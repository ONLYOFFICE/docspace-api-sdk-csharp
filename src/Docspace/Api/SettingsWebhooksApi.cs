/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Docspace.Client;
using Docspace.Model;

namespace Docspace.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>WebhooksConfigWrapper</returns>
        WebhooksConfigWrapper CreateWebhook(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?));

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksConfigWrapper</returns>
        ApiResponse<WebhooksConfigWrapper> CreateWebhookWithHttpInfo(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?));
        /// <summary>
        /// Disable a webhook
        /// </summary>
        /// <remarks>
        /// Disables a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>WebhookWrapper</returns>
        WebhookWrapper DisableWebHook(int id);

        /// <summary>
        /// Disable a webhook
        /// </summary>
        /// <remarks>
        /// Disables a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>ApiResponse of WebhookWrapper</returns>
        ApiResponse<WebhookWrapper> DisableWebHookWithHttpInfo(int id);
        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the logs of the webhook activities.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <returns>WebhooksLogArrayWrapper</returns>
        WebhooksLogArrayWrapper GetJournal(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?));

        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the logs of the webhook activities.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <returns>ApiResponse of WebhooksLogArrayWrapper</returns>
        ApiResponse<WebhooksLogArrayWrapper> GetJournalWithHttpInfo(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?));
        /// <summary>
        /// Get webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of the tenant webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhooksConfigWithStatusArrayWrapper</returns>
        WebhooksConfigWithStatusArrayWrapper GetTenantWebhooks();

        /// <summary>
        /// Get webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of the tenant webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhooksConfigWithStatusArrayWrapper</returns>
        ApiResponse<WebhooksConfigWithStatusArrayWrapper> GetTenantWebhooksWithHttpInfo();
        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <remarks>
        /// Removes the tenant webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>WebhooksConfigWrapper</returns>
        WebhooksConfigWrapper RemoveWebhook(int id);

        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <remarks>
        /// Removes the tenant webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>ApiResponse of WebhooksConfigWrapper</returns>
        ApiResponse<WebhooksConfigWrapper> RemoveWebhookWithHttpInfo(int id);
        /// <summary>
        /// Retry a webhook
        /// </summary>
        /// <remarks>
        /// Retries a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>WebhooksLogWrapper</returns>
        WebhooksLogWrapper RetryWebhook(int id);

        /// <summary>
        /// Retry a webhook
        /// </summary>
        /// <remarks>
        /// Retries a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>ApiResponse of WebhooksLogWrapper</returns>
        ApiResponse<WebhooksLogWrapper> RetryWebhookWithHttpInfo(int id);
        /// <summary>
        /// Retry webhooks
        /// </summary>
        /// <remarks>
        /// Retries all the webhooks with the IDs specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <returns>WebhooksLogArrayWrapper</returns>
        WebhooksLogArrayWrapper RetryWebhooks(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?));

        /// <summary>
        /// Retry webhooks
        /// </summary>
        /// <remarks>
        /// Retries all the webhooks with the IDs specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksLogArrayWrapper</returns>
        ApiResponse<WebhooksLogArrayWrapper> RetryWebhooksWithHttpInfo(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?));
        /// <summary>
        /// Get webhook settings
        /// </summary>
        /// <remarks>
        /// Returns settings of all webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookArrayWrapper</returns>
        WebhookArrayWrapper Settings();

        /// <summary>
        /// Get webhook settings
        /// </summary>
        /// <remarks>
        /// Returns settings of all webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookArrayWrapper</returns>
        ApiResponse<WebhookArrayWrapper> SettingsWithHttpInfo();
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>WebhooksConfigWrapper</returns>
        WebhooksConfigWrapper UpdateWebhook(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksConfigWrapper</returns>
        ApiResponse<WebhooksConfigWrapper> UpdateWebhookWithHttpInfo(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWrapper</returns>
        System.Threading.Tasks.Task<WebhooksConfigWrapper> CreateWebhookAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Creates a new tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksConfigWrapper>> CreateWebhookWithHttpInfoAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Disable a webhook
        /// </summary>
        /// <remarks>
        /// Disables a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookWrapper</returns>
        System.Threading.Tasks.Task<WebhookWrapper> DisableWebHookAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Disable a webhook
        /// </summary>
        /// <remarks>
        /// Disables a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookWrapper>> DisableWebHookWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the logs of the webhook activities.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksLogArrayWrapper</returns>
        System.Threading.Tasks.Task<WebhooksLogArrayWrapper> GetJournalAsync(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <remarks>
        /// Returns the logs of the webhook activities.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksLogArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksLogArrayWrapper>> GetJournalWithHttpInfoAsync(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of the tenant webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWithStatusArrayWrapper</returns>
        System.Threading.Tasks.Task<WebhooksConfigWithStatusArrayWrapper> GetTenantWebhooksAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get webhooks
        /// </summary>
        /// <remarks>
        /// Returns a list of the tenant webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWithStatusArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksConfigWithStatusArrayWrapper>> GetTenantWebhooksWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <remarks>
        /// Removes the tenant webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWrapper</returns>
        System.Threading.Tasks.Task<WebhooksConfigWrapper> RemoveWebhookAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a webhook
        /// </summary>
        /// <remarks>
        /// Removes the tenant webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksConfigWrapper>> RemoveWebhookWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retry a webhook
        /// </summary>
        /// <remarks>
        /// Retries a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksLogWrapper</returns>
        System.Threading.Tasks.Task<WebhooksLogWrapper> RetryWebhookAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retry a webhook
        /// </summary>
        /// <remarks>
        /// Retries a webhook with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksLogWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksLogWrapper>> RetryWebhookWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retry webhooks
        /// </summary>
        /// <remarks>
        /// Retries all the webhooks with the IDs specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksLogArrayWrapper</returns>
        System.Threading.Tasks.Task<WebhooksLogArrayWrapper> RetryWebhooksAsync(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retry webhooks
        /// </summary>
        /// <remarks>
        /// Retries all the webhooks with the IDs specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksLogArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksLogArrayWrapper>> RetryWebhooksWithHttpInfoAsync(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get webhook settings
        /// </summary>
        /// <remarks>
        /// Returns settings of all webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookArrayWrapper</returns>
        System.Threading.Tasks.Task<WebhookArrayWrapper> SettingsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get webhook settings
        /// </summary>
        /// <remarks>
        /// Returns settings of all webhooks.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookArrayWrapper>> SettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWrapper</returns>
        System.Threading.Tasks.Task<WebhooksConfigWrapper> UpdateWebhookAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Updates the tenant webhook with the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksConfigWrapper>> UpdateWebhookWithHttpInfoAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsWebhooksApi : ISettingsWebhooksApiSync, ISettingsWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsWebhooksApi : IDisposable, ISettingsWebhooksApi
    {
        private Docspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsWebhooksApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SettingsWebhooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsWebhooksApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SettingsWebhooksApi(string basePath)
        {
            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsWebhooksApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SettingsWebhooksApi(Docspace.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsWebhooksApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SettingsWebhooksApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsWebhooksApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SettingsWebhooksApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsWebhooksApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SettingsWebhooksApi(HttpClient client, Docspace.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsWebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SettingsWebhooksApi(Docspace.Client.ISynchronousClient client, Docspace.Client.IAsynchronousClient asyncClient, Docspace.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Docspace.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Docspace.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Docspace.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Docspace.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Docspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a webhook Creates a new tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>WebhooksConfigWrapper</returns>
        public WebhooksConfigWrapper CreateWebhook(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?))
        {
            Docspace.Client.ApiResponse<WebhooksConfigWrapper> localVarResponse = CreateWebhookWithHttpInfo(webhooksConfigRequestsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook Creates a new tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksConfigWrapper</returns>
        public Docspace.Client.ApiResponse<WebhooksConfigWrapper> CreateWebhookWithHttpInfo(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksConfigRequestsDto;

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebhooksConfigWrapper>("/api/2.0/settings/webhook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a webhook Creates a new tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWrapper</returns>
        public async System.Threading.Tasks.Task<WebhooksConfigWrapper> CreateWebhookAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhooksConfigWrapper> localVarResponse = await CreateWebhookWithHttpInfoAsync(webhooksConfigRequestsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook Creates a new tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhooksConfigWrapper>> CreateWebhookWithHttpInfoAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksConfigRequestsDto;

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhooksConfigWrapper>("/api/2.0/settings/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a webhook Disables a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>WebhookWrapper</returns>
        public WebhookWrapper DisableWebHook(int id)
        {
            Docspace.Client.ApiResponse<WebhookWrapper> localVarResponse = DisableWebHookWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a webhook Disables a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>ApiResponse of WebhookWrapper</returns>
        public Docspace.Client.ApiResponse<WebhookWrapper> DisableWebHookWithHttpInfo(int id)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebhookWrapper>("/api/2.0/settings/webhook/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableWebHook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a webhook Disables a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookWrapper</returns>
        public async System.Threading.Tasks.Task<WebhookWrapper> DisableWebHookAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhookWrapper> localVarResponse = await DisableWebHookWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a webhook Disables a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhookWrapper>> DisableWebHookWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<WebhookWrapper>("/api/2.0/settings/webhook/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableWebHook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook logs Returns the logs of the webhook activities.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <returns>WebhooksLogArrayWrapper</returns>
        public WebhooksLogArrayWrapper GetJournal(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?))
        {
            Docspace.Client.ApiResponse<WebhooksLogArrayWrapper> localVarResponse = GetJournalWithHttpInfo(deliveryFrom, deliveryTo, hookUri, webhookId, configId, eventId, groupStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook logs Returns the logs of the webhook activities.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <returns>ApiResponse of WebhooksLogArrayWrapper</returns>
        public Docspace.Client.ApiResponse<WebhooksLogArrayWrapper> GetJournalWithHttpInfo(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deliveryFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "deliveryFrom", deliveryFrom));
            }
            if (deliveryTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "deliveryTo", deliveryTo));
            }
            if (hookUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "hookUri", hookUri));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (configId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "configId", configId));
            }
            if (eventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "eventId", eventId));
            }
            if (groupStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "groupStatus", groupStatus));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhooksLogArrayWrapper>("/api/2.0/settings/webhooks/log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook logs Returns the logs of the webhook activities.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksLogArrayWrapper</returns>
        public async System.Threading.Tasks.Task<WebhooksLogArrayWrapper> GetJournalAsync(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhooksLogArrayWrapper> localVarResponse = await GetJournalWithHttpInfoAsync(deliveryFrom, deliveryTo, hookUri, webhookId, configId, eventId, groupStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook logs Returns the logs of the webhook activities.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryFrom">Delivey start time (optional)</param>
        /// <param name="deliveryTo">Delivey end time (optional)</param>
        /// <param name="hookUri">Hook URI (optional)</param>
        /// <param name="webhookId">Webhook ID (optional)</param>
        /// <param name="configId">Config ID (optional)</param>
        /// <param name="eventId">Event ID (optional)</param>
        /// <param name="groupStatus">Webhook group status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksLogArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhooksLogArrayWrapper>> GetJournalWithHttpInfoAsync(DateTime? deliveryFrom = default(DateTime?), DateTime? deliveryTo = default(DateTime?), string? hookUri = default(string?), int? webhookId = default(int?), int? configId = default(int?), int? eventId = default(int?), WebhookGroupStatus? groupStatus = default(WebhookGroupStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deliveryFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "deliveryFrom", deliveryFrom));
            }
            if (deliveryTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "deliveryTo", deliveryTo));
            }
            if (hookUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "hookUri", hookUri));
            }
            if (webhookId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "webhookId", webhookId));
            }
            if (configId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "configId", configId));
            }
            if (eventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "eventId", eventId));
            }
            if (groupStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "groupStatus", groupStatus));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhooksLogArrayWrapper>("/api/2.0/settings/webhooks/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhooks Returns a list of the tenant webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhooksConfigWithStatusArrayWrapper</returns>
        public WebhooksConfigWithStatusArrayWrapper GetTenantWebhooks()
        {
            Docspace.Client.ApiResponse<WebhooksConfigWithStatusArrayWrapper> localVarResponse = GetTenantWebhooksWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhooks Returns a list of the tenant webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhooksConfigWithStatusArrayWrapper</returns>
        public Docspace.Client.ApiResponse<WebhooksConfigWithStatusArrayWrapper> GetTenantWebhooksWithHttpInfo()
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhooksConfigWithStatusArrayWrapper>("/api/2.0/settings/webhook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhooks Returns a list of the tenant webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWithStatusArrayWrapper</returns>
        public async System.Threading.Tasks.Task<WebhooksConfigWithStatusArrayWrapper> GetTenantWebhooksAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhooksConfigWithStatusArrayWrapper> localVarResponse = await GetTenantWebhooksWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhooks Returns a list of the tenant webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWithStatusArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhooksConfigWithStatusArrayWrapper>> GetTenantWebhooksWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhooksConfigWithStatusArrayWrapper>("/api/2.0/settings/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a webhook Removes the tenant webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>WebhooksConfigWrapper</returns>
        public WebhooksConfigWrapper RemoveWebhook(int id)
        {
            Docspace.Client.ApiResponse<WebhooksConfigWrapper> localVarResponse = RemoveWebhookWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a webhook Removes the tenant webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>ApiResponse of WebhooksConfigWrapper</returns>
        public Docspace.Client.ApiResponse<WebhooksConfigWrapper> RemoveWebhookWithHttpInfo(int id)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<WebhooksConfigWrapper>("/api/2.0/settings/webhook/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a webhook Removes the tenant webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWrapper</returns>
        public async System.Threading.Tasks.Task<WebhooksConfigWrapper> RemoveWebhookAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhooksConfigWrapper> localVarResponse = await RemoveWebhookWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a webhook Removes the tenant webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhooksConfigWrapper>> RemoveWebhookWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<WebhooksConfigWrapper>("/api/2.0/settings/webhook/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry a webhook Retries a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>WebhooksLogWrapper</returns>
        public WebhooksLogWrapper RetryWebhook(int id)
        {
            Docspace.Client.ApiResponse<WebhooksLogWrapper> localVarResponse = RetryWebhookWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retry a webhook Retries a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <returns>ApiResponse of WebhooksLogWrapper</returns>
        public Docspace.Client.ApiResponse<WebhooksLogWrapper> RetryWebhookWithHttpInfo(int id)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebhooksLogWrapper>("/api/2.0/settings/webhook/{id}/retry", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetryWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry a webhook Retries a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksLogWrapper</returns>
        public async System.Threading.Tasks.Task<WebhooksLogWrapper> RetryWebhookAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhooksLogWrapper> localVarResponse = await RetryWebhookWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retry a webhook Retries a webhook with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksLogWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhooksLogWrapper>> RetryWebhookWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<WebhooksLogWrapper>("/api/2.0/settings/webhook/{id}/retry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetryWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry webhooks Retries all the webhooks with the IDs specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <returns>WebhooksLogArrayWrapper</returns>
        public WebhooksLogArrayWrapper RetryWebhooks(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?))
        {
            Docspace.Client.ApiResponse<WebhooksLogArrayWrapper> localVarResponse = RetryWebhooksWithHttpInfo(webhookRetryRequestsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retry webhooks Retries all the webhooks with the IDs specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksLogArrayWrapper</returns>
        public Docspace.Client.ApiResponse<WebhooksLogArrayWrapper> RetryWebhooksWithHttpInfo(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhookRetryRequestsDto;

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebhooksLogArrayWrapper>("/api/2.0/settings/webhook/retry", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetryWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retry webhooks Retries all the webhooks with the IDs specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksLogArrayWrapper</returns>
        public async System.Threading.Tasks.Task<WebhooksLogArrayWrapper> RetryWebhooksAsync(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhooksLogArrayWrapper> localVarResponse = await RetryWebhooksWithHttpInfoAsync(webhookRetryRequestsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retry webhooks Retries all the webhooks with the IDs specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRetryRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksLogArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhooksLogArrayWrapper>> RetryWebhooksWithHttpInfoAsync(WebhookRetryRequestsDto? webhookRetryRequestsDto = default(WebhookRetryRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhookRetryRequestsDto;

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<WebhooksLogArrayWrapper>("/api/2.0/settings/webhook/retry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetryWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook settings Returns settings of all webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookArrayWrapper</returns>
        public WebhookArrayWrapper Settings()
        {
            Docspace.Client.ApiResponse<WebhookArrayWrapper> localVarResponse = SettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook settings Returns settings of all webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookArrayWrapper</returns>
        public Docspace.Client.ApiResponse<WebhookArrayWrapper> SettingsWithHttpInfo()
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhookArrayWrapper>("/api/2.0/settings/webhooks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Settings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook settings Returns settings of all webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookArrayWrapper</returns>
        public async System.Threading.Tasks.Task<WebhookArrayWrapper> SettingsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhookArrayWrapper> localVarResponse = await SettingsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook settings Returns settings of all webhooks.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhookArrayWrapper>> SettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookArrayWrapper>("/api/2.0/settings/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Settings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Updates the tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>WebhooksConfigWrapper</returns>
        public WebhooksConfigWrapper UpdateWebhook(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?))
        {
            Docspace.Client.ApiResponse<WebhooksConfigWrapper> localVarResponse = UpdateWebhookWithHttpInfo(webhooksConfigRequestsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Updates the tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksConfigWrapper</returns>
        public Docspace.Client.ApiResponse<WebhooksConfigWrapper> UpdateWebhookWithHttpInfo(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksConfigRequestsDto;

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebhooksConfigWrapper>("/api/2.0/settings/webhook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Updates the tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksConfigWrapper</returns>
        public async System.Threading.Tasks.Task<WebhooksConfigWrapper> UpdateWebhookAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<WebhooksConfigWrapper> localVarResponse = await UpdateWebhookWithHttpInfoAsync(webhooksConfigRequestsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Updates the tenant webhook with the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksConfigRequestsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksConfigWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<WebhooksConfigWrapper>> UpdateWebhookWithHttpInfoAsync(WebhooksConfigRequestsDto? webhooksConfigRequestsDto = default(WebhooksConfigRequestsDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksConfigRequestsDto;

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<WebhooksConfigWrapper>("/api/2.0/settings/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
