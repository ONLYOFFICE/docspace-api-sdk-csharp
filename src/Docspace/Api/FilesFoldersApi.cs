/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Docspace.Client;
using Docspace.Model;

namespace Docspace.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesFoldersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check file uploads
        /// </summary>
        /// <remarks>
        /// Checks the file uploads to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <returns>STRINGArrayWrapper</returns>
        STRINGArrayWrapper CheckUpload(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?));

        /// <summary>
        /// Check file uploads
        /// </summary>
        /// <remarks>
        /// Checks the file uploads to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <returns>ApiResponse of STRINGArrayWrapper</returns>
        ApiResponse<STRINGArrayWrapper> CheckUploadWithHttpInfo(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?));
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>FolderIntegerWrapper</returns>
        FolderIntegerWrapper CreateFolder(int folderId, CreateFolder? createFolder = default(CreateFolder?));

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        ApiResponse<FolderIntegerWrapper> CreateFolderWithHttpInfo(int folderId, CreateFolder? createFolder = default(CreateFolder?));
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// Deletes a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <returns>FileOperationArrayWrapper</returns>
        FileOperationArrayWrapper DeleteFolder(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// Deletes a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <returns>ApiResponse of FileOperationArrayWrapper</returns>
        ApiResponse<FileOperationArrayWrapper> DeleteFolderWithHttpInfo(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?));
        /// <summary>
        /// Get used space of files
        /// </summary>
        /// <remarks>
        /// Returns the used space of files in the root folders.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FilesStatisticsResultWrapper</returns>
        FilesStatisticsResultWrapper GetFilesUsedSpace();

        /// <summary>
        /// Get used space of files
        /// </summary>
        /// <remarks>
        /// Returns the used space of files in the root folders.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FilesStatisticsResultWrapper</returns>
        ApiResponse<FilesStatisticsResultWrapper> GetFilesUsedSpaceWithHttpInfo();
        /// <summary>
        /// Get folder form filter
        /// </summary>
        /// <remarks>
        /// Returns the form filter of a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FormsItemArrayWrapper</returns>
        FormsItemArrayWrapper GetFolder(int folderId);

        /// <summary>
        /// Get folder form filter
        /// </summary>
        /// <remarks>
        /// Returns the form filter of a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FormsItemArrayWrapper</returns>
        ApiResponse<FormsItemArrayWrapper> GetFolderWithHttpInfo(int folderId);
        /// <summary>
        /// Get a folder by ID
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        FolderContentIntegerWrapper GetFolderByFolderId(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?));

        /// <summary>
        /// Get a folder by ID
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        ApiResponse<FolderContentIntegerWrapper> GetFolderByFolderIdWithHttpInfo(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?));
        /// <summary>
        /// Get folder history
        /// </summary>
        /// <remarks>
        /// Returns the activity history of a folder with a specified identifier.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <returns>HistoryArrayWrapper</returns>
        HistoryArrayWrapper GetFolderHistory(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?));

        /// <summary>
        /// Get folder history
        /// </summary>
        /// <remarks>
        /// Returns the activity history of a folder with a specified identifier.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <returns>ApiResponse of HistoryArrayWrapper</returns>
        ApiResponse<HistoryArrayWrapper> GetFolderHistoryWithHttpInfo(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?));
        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Returns the detailed information about a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FolderIntegerWrapper</returns>
        FolderIntegerWrapper GetFolderInfo(int folderId);

        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Returns the detailed information about a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        ApiResponse<FolderIntegerWrapper> GetFolderInfoWithHttpInfo(int folderId);
        /// <summary>
        /// Get the folder path
        /// </summary>
        /// <remarks>
        /// Returns a path to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FileEntryArrayWrapper</returns>
        FileEntryArrayWrapper GetFolderPath(int folderId);

        /// <summary>
        /// Get the folder path
        /// </summary>
        /// <remarks>
        /// Returns a path to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FileEntryArrayWrapper</returns>
        ApiResponse<FileEntryArrayWrapper> GetFolderPathWithHttpInfo(int folderId);
        /// <summary>
        /// Get primary external link
        /// </summary>
        /// <remarks>
        /// Returns the primary external link by the identifier specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <returns>FileShareWrapper</returns>
        FileShareWrapper GetFolderPrimaryExternalLink(int id);

        /// <summary>
        /// Get primary external link
        /// </summary>
        /// <remarks>
        /// Returns the primary external link by the identifier specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <returns>ApiResponse of FileShareWrapper</returns>
        ApiResponse<FileShareWrapper> GetFolderPrimaryExternalLinkWithHttpInfo(int id);
        /// <summary>
        /// Get subfolders
        /// </summary>
        /// <remarks>
        /// Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FileEntryArrayWrapper</returns>
        FileEntryArrayWrapper GetFolders(int folderId);

        /// <summary>
        /// Get subfolders
        /// </summary>
        /// <remarks>
        /// Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FileEntryArrayWrapper</returns>
        ApiResponse<FileEntryArrayWrapper> GetFoldersWithHttpInfo(int folderId);
        /// <summary>
        /// Get the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        FolderContentIntegerWrapper GetMyFolder(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?));

        /// <summary>
        /// Get the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        ApiResponse<FolderContentIntegerWrapper> GetMyFolderWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?));
        /// <summary>
        /// Get new folder items
        /// </summary>
        /// <remarks>
        /// Returns a list of all the new items from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FileEntryArrayWrapper</returns>
        FileEntryArrayWrapper GetNewItems(int folderId);

        /// <summary>
        /// Get new folder items
        /// </summary>
        /// <remarks>
        /// Returns a list of all the new items from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FileEntryArrayWrapper</returns>
        ApiResponse<FileEntryArrayWrapper> GetNewItemsWithHttpInfo(int folderId);
        /// <summary>
        /// Get the \&quot;Private Room\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        FolderContentIntegerWrapper GetPrivacyFolder(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?));

        /// <summary>
        /// Get the \&quot;Private Room\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        ApiResponse<FolderContentIntegerWrapper> GetPrivacyFolderWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?));
        /// <summary>
        /// Get filtered sections
        /// </summary>
        /// <remarks>
        /// Returns all the sections matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <returns>FolderContentIntegerArrayWrapper</returns>
        FolderContentIntegerArrayWrapper GetRootFolders(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?));

        /// <summary>
        /// Get filtered sections
        /// </summary>
        /// <remarks>
        /// Returns all the sections matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerArrayWrapper</returns>
        ApiResponse<FolderContentIntegerArrayWrapper> GetRootFoldersWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?));
        /// <summary>
        /// Get the \&quot;Trash\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        FolderContentIntegerWrapper GetTrashFolder(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?));

        /// <summary>
        /// Get the \&quot;Trash\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        ApiResponse<FolderContentIntegerWrapper> GetTrashFolderWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?));
        /// <summary>
        /// Insert a file
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the selected folder by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <returns>FileIntegerWrapper</returns>
        FileIntegerWrapper InsertFile(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?));

        /// <summary>
        /// Insert a file
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the selected folder by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <returns>ApiResponse of FileIntegerWrapper</returns>
        ApiResponse<FileIntegerWrapper> InsertFileWithHttpInfo(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?));
        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <returns>FileIntegerWrapper</returns>
        FileIntegerWrapper InsertFileToMyFromBody(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?));

        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <returns>ApiResponse of FileIntegerWrapper</returns>
        ApiResponse<FileIntegerWrapper> InsertFileToMyFromBodyWithHttpInfo(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?));
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// Renames the selected folder with a new title specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>FolderIntegerWrapper</returns>
        FolderIntegerWrapper RenameFolder(int folderId, CreateFolder? createFolder = default(CreateFolder?));

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// Renames the selected folder with a new title specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        ApiResponse<FolderIntegerWrapper> RenameFolderWithHttpInfo(int folderId, CreateFolder? createFolder = default(CreateFolder?));
        /// <summary>
        /// Set file order
        /// </summary>
        /// <remarks>
        /// Sets the file order in the folder with ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <returns>FolderIntegerWrapper</returns>
        FolderIntegerWrapper SetFileOrder(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?));

        /// <summary>
        /// Set file order
        /// </summary>
        /// <remarks>
        /// Sets the file order in the folder with ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        ApiResponse<FolderIntegerWrapper> SetFileOrderWithHttpInfo(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?));
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ObjectWrapper</returns>
        ObjectWrapper UploadFile(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?));

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ApiResponse of ObjectWrapper</returns>
        ApiResponse<ObjectWrapper> UploadFileWithHttpInfo(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?));
        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ObjectWrapper</returns>
        ObjectWrapper UploadFileToMy(UploadRequestDto? inDto = default(UploadRequestDto?));

        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ApiResponse of ObjectWrapper</returns>
        ApiResponse<ObjectWrapper> UploadFileToMyWithHttpInfo(UploadRequestDto? inDto = default(UploadRequestDto?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesFoldersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check file uploads
        /// </summary>
        /// <remarks>
        /// Checks the file uploads to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of STRINGArrayWrapper</returns>
        System.Threading.Tasks.Task<STRINGArrayWrapper> CheckUploadAsync(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check file uploads
        /// </summary>
        /// <remarks>
        /// Checks the file uploads to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (STRINGArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<STRINGArrayWrapper>> CheckUploadWithHttpInfoAsync(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderIntegerWrapper> CreateFolderAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderIntegerWrapper>> CreateFolderWithHttpInfoAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// Deletes a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileOperationArrayWrapper</returns>
        System.Threading.Tasks.Task<FileOperationArrayWrapper> DeleteFolderAsync(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// Deletes a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileOperationArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileOperationArrayWrapper>> DeleteFolderWithHttpInfoAsync(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get used space of files
        /// </summary>
        /// <remarks>
        /// Returns the used space of files in the root folders.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilesStatisticsResultWrapper</returns>
        System.Threading.Tasks.Task<FilesStatisticsResultWrapper> GetFilesUsedSpaceAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get used space of files
        /// </summary>
        /// <remarks>
        /// Returns the used space of files in the root folders.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilesStatisticsResultWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesStatisticsResultWrapper>> GetFilesUsedSpaceWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get folder form filter
        /// </summary>
        /// <remarks>
        /// Returns the form filter of a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsItemArrayWrapper</returns>
        System.Threading.Tasks.Task<FormsItemArrayWrapper> GetFolderAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get folder form filter
        /// </summary>
        /// <remarks>
        /// Returns the form filter of a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsItemArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormsItemArrayWrapper>> GetFolderWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a folder by ID
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetFolderByFolderIdAsync(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a folder by ID
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderContentIntegerWrapper>> GetFolderByFolderIdWithHttpInfoAsync(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get folder history
        /// </summary>
        /// <remarks>
        /// Returns the activity history of a folder with a specified identifier.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryArrayWrapper</returns>
        System.Threading.Tasks.Task<HistoryArrayWrapper> GetFolderHistoryAsync(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get folder history
        /// </summary>
        /// <remarks>
        /// Returns the activity history of a folder with a specified identifier.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryArrayWrapper>> GetFolderHistoryWithHttpInfoAsync(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Returns the detailed information about a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderIntegerWrapper> GetFolderInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get folder information
        /// </summary>
        /// <remarks>
        /// Returns the detailed information about a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderIntegerWrapper>> GetFolderInfoWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the folder path
        /// </summary>
        /// <remarks>
        /// Returns a path to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileEntryArrayWrapper</returns>
        System.Threading.Tasks.Task<FileEntryArrayWrapper> GetFolderPathAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the folder path
        /// </summary>
        /// <remarks>
        /// Returns a path to the folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileEntryArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileEntryArrayWrapper>> GetFolderPathWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get primary external link
        /// </summary>
        /// <remarks>
        /// Returns the primary external link by the identifier specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileShareWrapper</returns>
        System.Threading.Tasks.Task<FileShareWrapper> GetFolderPrimaryExternalLinkAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get primary external link
        /// </summary>
        /// <remarks>
        /// Returns the primary external link by the identifier specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileShareWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileShareWrapper>> GetFolderPrimaryExternalLinkWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get subfolders
        /// </summary>
        /// <remarks>
        /// Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileEntryArrayWrapper</returns>
        System.Threading.Tasks.Task<FileEntryArrayWrapper> GetFoldersAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get subfolders
        /// </summary>
        /// <remarks>
        /// Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileEntryArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileEntryArrayWrapper>> GetFoldersWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetMyFolderAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderContentIntegerWrapper>> GetMyFolderWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get new folder items
        /// </summary>
        /// <remarks>
        /// Returns a list of all the new items from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileEntryArrayWrapper</returns>
        System.Threading.Tasks.Task<FileEntryArrayWrapper> GetNewItemsAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get new folder items
        /// </summary>
        /// <remarks>
        /// Returns a list of all the new items from a folder with the ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileEntryArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileEntryArrayWrapper>> GetNewItemsWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the \&quot;Private Room\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetPrivacyFolderAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the \&quot;Private Room\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderContentIntegerWrapper>> GetPrivacyFolderWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get filtered sections
        /// </summary>
        /// <remarks>
        /// Returns all the sections matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerArrayWrapper</returns>
        System.Threading.Tasks.Task<FolderContentIntegerArrayWrapper> GetRootFoldersAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get filtered sections
        /// </summary>
        /// <remarks>
        /// Returns all the sections matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderContentIntegerArrayWrapper>> GetRootFoldersWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the \&quot;Trash\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetTrashFolderAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the \&quot;Trash\&quot; section
        /// </summary>
        /// <remarks>
        /// Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderContentIntegerWrapper>> GetTrashFolderWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Insert a file
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the selected folder by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileIntegerWrapper</returns>
        System.Threading.Tasks.Task<FileIntegerWrapper> InsertFileAsync(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Insert a file
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the selected folder by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileIntegerWrapper>> InsertFileWithHttpInfoAsync(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileIntegerWrapper</returns>
        System.Threading.Tasks.Task<FileIntegerWrapper> InsertFileToMyFromBodyAsync(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileIntegerWrapper>> InsertFileToMyFromBodyWithHttpInfoAsync(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// Renames the selected folder with a new title specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderIntegerWrapper> RenameFolderAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// Renames the selected folder with a new title specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderIntegerWrapper>> RenameFolderWithHttpInfoAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set file order
        /// </summary>
        /// <remarks>
        /// Sets the file order in the folder with ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        System.Threading.Tasks.Task<FolderIntegerWrapper> SetFileOrderAsync(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set file order
        /// </summary>
        /// <remarks>
        /// Sets the file order in the folder with ID specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderIntegerWrapper>> SetFileOrderWithHttpInfoAsync(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectWrapper</returns>
        System.Threading.Tasks.Task<ObjectWrapper> UploadFileAsync(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectWrapper>> UploadFileWithHttpInfoAsync(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectWrapper</returns>
        System.Threading.Tasks.Task<ObjectWrapper> UploadFileToMyAsync(UploadRequestDto? inDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section
        /// </summary>
        /// <remarks>
        /// Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectWrapper>> UploadFileToMyWithHttpInfoAsync(UploadRequestDto? inDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesFoldersApi : IFilesFoldersApiSync, IFilesFoldersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesFoldersApi : IDisposable, IFilesFoldersApi
    {
        private Docspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesFoldersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public FilesFoldersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesFoldersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FilesFoldersApi(string basePath)
        {
            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesFoldersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FilesFoldersApi(Docspace.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesFoldersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FilesFoldersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesFoldersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FilesFoldersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesFoldersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FilesFoldersApi(HttpClient client, Docspace.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesFoldersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FilesFoldersApi(Docspace.Client.ISynchronousClient client, Docspace.Client.IAsynchronousClient asyncClient, Docspace.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Docspace.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Docspace.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Docspace.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Docspace.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Docspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check file uploads Checks the file uploads to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <returns>STRINGArrayWrapper</returns>
        public STRINGArrayWrapper CheckUpload(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?))
        {
            Docspace.Client.ApiResponse<STRINGArrayWrapper> localVarResponse = CheckUploadWithHttpInfo(folderId, checkUploadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check file uploads Checks the file uploads to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <returns>ApiResponse of STRINGArrayWrapper</returns>
        public Docspace.Client.ApiResponse<STRINGArrayWrapper> CheckUploadWithHttpInfo(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = checkUploadRequest;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Post<STRINGArrayWrapper>("/api/2.0/files/{folderId}/upload/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check file uploads Checks the file uploads to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of STRINGArrayWrapper</returns>
        public async System.Threading.Tasks.Task<STRINGArrayWrapper> CheckUploadAsync(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<STRINGArrayWrapper> localVarResponse = await CheckUploadWithHttpInfoAsync(folderId, checkUploadRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check file uploads Checks the file uploads to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID.</param>
        /// <param name="checkUploadRequest">The request parameters for checking file uploads. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (STRINGArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<STRINGArrayWrapper>> CheckUploadWithHttpInfoAsync(int folderId, CheckUploadRequest? checkUploadRequest = default(CheckUploadRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = checkUploadRequest;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<STRINGArrayWrapper>("/api/2.0/files/{folderId}/upload/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>FolderIntegerWrapper</returns>
        public FolderIntegerWrapper CreateFolder(int folderId, CreateFolder? createFolder = default(CreateFolder?))
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = CreateFolderWithHttpInfo(folderId, createFolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderIntegerWrapper> CreateFolderWithHttpInfo(int folderId, CreateFolder? createFolder = default(CreateFolder?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = createFolder;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Post<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderIntegerWrapper> CreateFolderAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = await CreateFolderWithHttpInfoAsync(folderId, createFolder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder Creates a new folder with the title specified in the request. The parent folder ID can be also specified.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderIntegerWrapper>> CreateFolderWithHttpInfoAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = createFolder;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder Deletes a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <returns>FileOperationArrayWrapper</returns>
        public FileOperationArrayWrapper DeleteFolder(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?))
        {
            Docspace.Client.ApiResponse<FileOperationArrayWrapper> localVarResponse = DeleteFolderWithHttpInfo(folderId, deleteFolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a folder Deletes a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <returns>ApiResponse of FileOperationArrayWrapper</returns>
        public Docspace.Client.ApiResponse<FileOperationArrayWrapper> DeleteFolderWithHttpInfo(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = deleteFolder;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Delete<FileOperationArrayWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder Deletes a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileOperationArrayWrapper</returns>
        public async System.Threading.Tasks.Task<FileOperationArrayWrapper> DeleteFolderAsync(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FileOperationArrayWrapper> localVarResponse = await DeleteFolderWithHttpInfoAsync(folderId, deleteFolder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a folder Deletes a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to delete.</param>
        /// <param name="deleteFolder">The parameters for deleting a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileOperationArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FileOperationArrayWrapper>> DeleteFolderWithHttpInfoAsync(int folderId, DeleteFolder? deleteFolder = default(DeleteFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = deleteFolder;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<FileOperationArrayWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get used space of files Returns the used space of files in the root folders.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FilesStatisticsResultWrapper</returns>
        public FilesStatisticsResultWrapper GetFilesUsedSpace()
        {
            Docspace.Client.ApiResponse<FilesStatisticsResultWrapper> localVarResponse = GetFilesUsedSpaceWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get used space of files Returns the used space of files in the root folders.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FilesStatisticsResultWrapper</returns>
        public Docspace.Client.ApiResponse<FilesStatisticsResultWrapper> GetFilesUsedSpaceWithHttpInfo()
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FilesStatisticsResultWrapper>("/api/2.0/files/filesusedspace", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilesUsedSpace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get used space of files Returns the used space of files in the root folders.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilesStatisticsResultWrapper</returns>
        public async System.Threading.Tasks.Task<FilesStatisticsResultWrapper> GetFilesUsedSpaceAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FilesStatisticsResultWrapper> localVarResponse = await GetFilesUsedSpaceWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get used space of files Returns the used space of files in the root folders.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilesStatisticsResultWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FilesStatisticsResultWrapper>> GetFilesUsedSpaceWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FilesStatisticsResultWrapper>("/api/2.0/files/filesusedspace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilesUsedSpace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get folder form filter Returns the form filter of a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FormsItemArrayWrapper</returns>
        public FormsItemArrayWrapper GetFolder(int folderId)
        {
            Docspace.Client.ApiResponse<FormsItemArrayWrapper> localVarResponse = GetFolderWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get folder form filter Returns the form filter of a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FormsItemArrayWrapper</returns>
        public Docspace.Client.ApiResponse<FormsItemArrayWrapper> GetFolderWithHttpInfo(int folderId)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FormsItemArrayWrapper>("/api/2.0/files/{folderId}/formfilter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get folder form filter Returns the form filter of a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsItemArrayWrapper</returns>
        public async System.Threading.Tasks.Task<FormsItemArrayWrapper> GetFolderAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FormsItemArrayWrapper> localVarResponse = await GetFolderWithHttpInfoAsync(folderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get folder form filter Returns the form filter of a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsItemArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FormsItemArrayWrapper>> GetFolderWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FormsItemArrayWrapper>("/api/2.0/files/{folderId}/formfilter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a folder by ID Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        public FolderContentIntegerWrapper GetFolderByFolderId(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = GetFolderByFolderIdWithHttpInfo(folderId, userIdOrGroupId, filterType, roomId, excludeSubject, applyFilterOption, extension, searchArea, formsItemKey, formsItemType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a folder by ID Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderContentIntegerWrapper> GetFolderByFolderIdWithHttpInfo(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            if (excludeSubject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeSubject", excludeSubject));
            }
            if (applyFilterOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "applyFilterOption", applyFilterOption));
            }
            if (extension != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "extension", extension));
            }
            if (searchArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "searchArea", searchArea));
            }
            if (formsItemKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "formsItemKey", formsItemKey));
            }
            if (formsItemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "formsItemType", formsItemType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderContentIntegerWrapper>("/api/2.0/files/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderByFolderId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a folder by ID Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetFolderByFolderIdAsync(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = await GetFolderByFolderIdWithHttpInfoAsync(folderId, userIdOrGroupId, filterType, roomId, excludeSubject, applyFilterOption, extension, searchArea, formsItemKey, formsItemType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a folder by ID Returns the detailed list of files and folders located in the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the request.</param>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="roomId">The room ID. (optional)</param>
        /// <param name="excludeSubject">Specifies whether to exclude search by user or group ID. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements from the specified folder. (optional)</param>
        /// <param name="extension">Specifies whether to search for the specific file extension. (optional)</param>
        /// <param name="searchArea">The search area. (optional)</param>
        /// <param name="formsItemKey">The forms item key. (optional)</param>
        /// <param name="formsItemType">The forms item type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderContentIntegerWrapper>> GetFolderByFolderIdWithHttpInfoAsync(int folderId, Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), int? roomId = default(int?), bool? excludeSubject = default(bool?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), string? extension = default(string?), SearchArea? searchArea = default(SearchArea?), string? formsItemKey = default(string?), string? formsItemType = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            if (excludeSubject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeSubject", excludeSubject));
            }
            if (applyFilterOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "applyFilterOption", applyFilterOption));
            }
            if (extension != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "extension", extension));
            }
            if (searchArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "searchArea", searchArea));
            }
            if (formsItemKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "formsItemKey", formsItemKey));
            }
            if (formsItemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "formsItemType", formsItemType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderContentIntegerWrapper>("/api/2.0/files/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderByFolderId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get folder history Returns the activity history of a folder with a specified identifier.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <returns>HistoryArrayWrapper</returns>
        public HistoryArrayWrapper GetFolderHistory(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?))
        {
            Docspace.Client.ApiResponse<HistoryArrayWrapper> localVarResponse = GetFolderHistoryWithHttpInfo(folderId, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get folder history Returns the activity history of a folder with a specified identifier.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <returns>ApiResponse of HistoryArrayWrapper</returns>
        public Docspace.Client.ApiResponse<HistoryArrayWrapper> GetFolderHistoryWithHttpInfo(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryArrayWrapper>("/api/2.0/files/folder/{folderId}/log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get folder history Returns the activity history of a folder with a specified identifier.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryArrayWrapper</returns>
        public async System.Threading.Tasks.Task<HistoryArrayWrapper> GetFolderHistoryAsync(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<HistoryArrayWrapper> localVarResponse = await GetFolderHistoryWithHttpInfoAsync(folderId, fromDate, toDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get folder history Returns the activity history of a folder with a specified identifier.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID of the history request.</param>
        /// <param name="fromDate">The start date of the history request. (optional)</param>
        /// <param name="toDate">The end date of the history request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<HistoryArrayWrapper>> GetFolderHistoryWithHttpInfoAsync(int folderId, ApiDateTime? fromDate = default(ApiDateTime?), ApiDateTime? toDate = default(ApiDateTime?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryArrayWrapper>("/api/2.0/files/folder/{folderId}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get folder information Returns the detailed information about a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FolderIntegerWrapper</returns>
        public FolderIntegerWrapper GetFolderInfo(int folderId)
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = GetFolderInfoWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get folder information Returns the detailed information about a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderIntegerWrapper> GetFolderInfoWithHttpInfo(int folderId)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get folder information Returns the detailed information about a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderIntegerWrapper> GetFolderInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = await GetFolderInfoWithHttpInfoAsync(folderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get folder information Returns the detailed information about a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderIntegerWrapper>> GetFolderInfoWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the folder path Returns a path to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FileEntryArrayWrapper</returns>
        public FileEntryArrayWrapper GetFolderPath(int folderId)
        {
            Docspace.Client.ApiResponse<FileEntryArrayWrapper> localVarResponse = GetFolderPathWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the folder path Returns a path to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FileEntryArrayWrapper</returns>
        public Docspace.Client.ApiResponse<FileEntryArrayWrapper> GetFolderPathWithHttpInfo(int folderId)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileEntryArrayWrapper>("/api/2.0/files/folder/{folderId}/path", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the folder path Returns a path to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileEntryArrayWrapper</returns>
        public async System.Threading.Tasks.Task<FileEntryArrayWrapper> GetFolderPathAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FileEntryArrayWrapper> localVarResponse = await GetFolderPathWithHttpInfoAsync(folderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the folder path Returns a path to the folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileEntryArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FileEntryArrayWrapper>> GetFolderPathWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileEntryArrayWrapper>("/api/2.0/files/folder/{folderId}/path", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary external link Returns the primary external link by the identifier specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <returns>FileShareWrapper</returns>
        public FileShareWrapper GetFolderPrimaryExternalLink(int id)
        {
            Docspace.Client.ApiResponse<FileShareWrapper> localVarResponse = GetFolderPrimaryExternalLinkWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary external link Returns the primary external link by the identifier specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <returns>ApiResponse of FileShareWrapper</returns>
        public Docspace.Client.ApiResponse<FileShareWrapper> GetFolderPrimaryExternalLinkWithHttpInfo(int id)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileShareWrapper>("/api/2.0/files/folder/{id}/link", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderPrimaryExternalLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary external link Returns the primary external link by the identifier specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileShareWrapper</returns>
        public async System.Threading.Tasks.Task<FileShareWrapper> GetFolderPrimaryExternalLinkAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FileShareWrapper> localVarResponse = await GetFolderPrimaryExternalLinkWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary external link Returns the primary external link by the identifier specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileShareWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FileShareWrapper>> GetFolderPrimaryExternalLinkWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileShareWrapper>("/api/2.0/files/folder/{id}/link", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolderPrimaryExternalLink", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subfolders Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FileEntryArrayWrapper</returns>
        public FileEntryArrayWrapper GetFolders(int folderId)
        {
            Docspace.Client.ApiResponse<FileEntryArrayWrapper> localVarResponse = GetFoldersWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get subfolders Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FileEntryArrayWrapper</returns>
        public Docspace.Client.ApiResponse<FileEntryArrayWrapper> GetFoldersWithHttpInfo(int folderId)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileEntryArrayWrapper>("/api/2.0/files/{folderId}/subfolders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subfolders Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileEntryArrayWrapper</returns>
        public async System.Threading.Tasks.Task<FileEntryArrayWrapper> GetFoldersAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FileEntryArrayWrapper> localVarResponse = await GetFoldersWithHttpInfoAsync(folderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get subfolders Returns a list of all the subfolders from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileEntryArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FileEntryArrayWrapper>> GetFoldersWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileEntryArrayWrapper>("/api/2.0/files/{folderId}/subfolders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFolders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the \&quot;My documents\&quot; section Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        public FolderContentIntegerWrapper GetMyFolder(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = GetMyFolderWithHttpInfo(userIdOrGroupId, filterType, applyFilterOption);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the \&quot;My documents\&quot; section Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderContentIntegerWrapper> GetMyFolderWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (applyFilterOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "applyFilterOption", applyFilterOption));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderContentIntegerWrapper>("/api/2.0/files/@my", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the \&quot;My documents\&quot; section Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetMyFolderAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = await GetMyFolderWithHttpInfoAsync(userIdOrGroupId, filterType, applyFilterOption, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the \&quot;My documents\&quot; section Returns the detailed list of files and folders located in the \&quot;My documents\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderContentIntegerWrapper>> GetMyFolderWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (applyFilterOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "applyFilterOption", applyFilterOption));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderContentIntegerWrapper>("/api/2.0/files/@my", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get new folder items Returns a list of all the new items from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>FileEntryArrayWrapper</returns>
        public FileEntryArrayWrapper GetNewItems(int folderId)
        {
            Docspace.Client.ApiResponse<FileEntryArrayWrapper> localVarResponse = GetNewItemsWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get new folder items Returns a list of all the new items from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <returns>ApiResponse of FileEntryArrayWrapper</returns>
        public Docspace.Client.ApiResponse<FileEntryArrayWrapper> GetNewItemsWithHttpInfo(int folderId)
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileEntryArrayWrapper>("/api/2.0/files/{folderId}/news", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get new folder items Returns a list of all the new items from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileEntryArrayWrapper</returns>
        public async System.Threading.Tasks.Task<FileEntryArrayWrapper> GetNewItemsAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FileEntryArrayWrapper> localVarResponse = await GetNewItemsWithHttpInfoAsync(folderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get new folder items Returns a list of all the new items from a folder with the ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The request folder ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileEntryArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FileEntryArrayWrapper>> GetNewItemsWithHttpInfoAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileEntryArrayWrapper>("/api/2.0/files/{folderId}/news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the \&quot;Private Room\&quot; section Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        public FolderContentIntegerWrapper GetPrivacyFolder(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = GetPrivacyFolderWithHttpInfo(userIdOrGroupId, filterType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the \&quot;Private Room\&quot; section Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderContentIntegerWrapper> GetPrivacyFolderWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderContentIntegerWrapper>("/api/2.0/files/@privacy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrivacyFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the \&quot;Private Room\&quot; section Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetPrivacyFolderAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = await GetPrivacyFolderWithHttpInfoAsync(userIdOrGroupId, filterType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the \&quot;Private Room\&quot; section Returns the detailed list of files and folders located in the \&quot;Private Room\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderContentIntegerWrapper>> GetPrivacyFolderWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderContentIntegerWrapper>("/api/2.0/files/@privacy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrivacyFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get filtered sections Returns all the sections matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <returns>FolderContentIntegerArrayWrapper</returns>
        public FolderContentIntegerArrayWrapper GetRootFolders(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerArrayWrapper> localVarResponse = GetRootFoldersWithHttpInfo(userIdOrGroupId, filterType, withoutTrash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get filtered sections Returns all the sections matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerArrayWrapper</returns>
        public Docspace.Client.ApiResponse<FolderContentIntegerArrayWrapper> GetRootFoldersWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (withoutTrash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "withoutTrash", withoutTrash));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderContentIntegerArrayWrapper>("/api/2.0/files/@root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRootFolders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get filtered sections Returns all the sections matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerArrayWrapper</returns>
        public async System.Threading.Tasks.Task<FolderContentIntegerArrayWrapper> GetRootFoldersAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerArrayWrapper> localVarResponse = await GetRootFoldersWithHttpInfoAsync(userIdOrGroupId, filterType, withoutTrash, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get filtered sections Returns all the sections matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="withoutTrash">Specifies whether to return the \&quot;Trash\&quot; section or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderContentIntegerArrayWrapper>> GetRootFoldersWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), bool? withoutTrash = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (withoutTrash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "withoutTrash", withoutTrash));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderContentIntegerArrayWrapper>("/api/2.0/files/@root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRootFolders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the \&quot;Trash\&quot; section Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>FolderContentIntegerWrapper</returns>
        public FolderContentIntegerWrapper GetTrashFolder(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = GetTrashFolderWithHttpInfo(userIdOrGroupId, filterType, applyFilterOption);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the \&quot;Trash\&quot; section Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <returns>ApiResponse of FolderContentIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderContentIntegerWrapper> GetTrashFolderWithHttpInfo(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (applyFilterOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "applyFilterOption", applyFilterOption));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderContentIntegerWrapper>("/api/2.0/files/@trash", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrashFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the \&quot;Trash\&quot; section Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderContentIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderContentIntegerWrapper> GetTrashFolderAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderContentIntegerWrapper> localVarResponse = await GetTrashFolderWithHttpInfoAsync(userIdOrGroupId, filterType, applyFilterOption, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the \&quot;Trash\&quot; section Returns the detailed list of files and folders located in the \&quot;Trash\&quot; section.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrGroupId">The user or group ID. (optional)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="applyFilterOption">Specifies whether to return only files, only folders or all elements. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderContentIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderContentIntegerWrapper>> GetTrashFolderWithHttpInfoAsync(Guid? userIdOrGroupId = default(Guid?), FilterType? filterType = default(FilterType?), ApplyFilterOption? applyFilterOption = default(ApplyFilterOption?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userIdOrGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "userIdOrGroupId", userIdOrGroupId));
            }
            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "filterType", filterType));
            }
            if (applyFilterOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "applyFilterOption", applyFilterOption));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderContentIntegerWrapper>("/api/2.0/files/@trash", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrashFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert a file Inserts a file specified in the request to the selected folder by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <returns>FileIntegerWrapper</returns>
        public FileIntegerWrapper InsertFile(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?))
        {
            Docspace.Client.ApiResponse<FileIntegerWrapper> localVarResponse = InsertFileWithHttpInfo(folderId, insertFileFile, insertFileTitle, insertFileCreateNewIfExist, insertFileKeepConvertStatus, insertFileStreamCanRead, insertFileStreamCanWrite, insertFileStreamCanSeek, insertFileStreamCanTimeout, insertFileStreamLength, insertFileStreamPosition, insertFileStreamReadTimeout, insertFileStreamWriteTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a file Inserts a file specified in the request to the selected folder by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <returns>ApiResponse of FileIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FileIntegerWrapper> InsertFileWithHttpInfo(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (insertFileFile != null)
            {
                localVarRequestOptions.FileParameters.Add("InsertFile.File", insertFileFile);
            }
            if (insertFileTitle != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Title", Docspace.Client.ClientUtils.ParameterToString(insertFileTitle)); // form parameter
            }
            if (insertFileCreateNewIfExist != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.CreateNewIfExist", Docspace.Client.ClientUtils.ParameterToString(insertFileCreateNewIfExist)); // form parameter
            }
            if (insertFileKeepConvertStatus != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.KeepConvertStatus", Docspace.Client.ClientUtils.ParameterToString(insertFileKeepConvertStatus)); // form parameter
            }
            if (insertFileStreamCanRead != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanRead", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanRead)); // form parameter
            }
            if (insertFileStreamCanWrite != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanWrite", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanWrite)); // form parameter
            }
            if (insertFileStreamCanSeek != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanSeek", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanSeek)); // form parameter
            }
            if (insertFileStreamCanTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanTimeout", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanTimeout)); // form parameter
            }
            if (insertFileStreamLength != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.Length", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamLength)); // form parameter
            }
            if (insertFileStreamPosition != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.Position", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamPosition)); // form parameter
            }
            if (insertFileStreamReadTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.ReadTimeout", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamReadTimeout)); // form parameter
            }
            if (insertFileStreamWriteTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.WriteTimeout", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamWriteTimeout)); // form parameter
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileIntegerWrapper>("/api/2.0/files/{folderId}/insert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert a file Inserts a file specified in the request to the selected folder by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FileIntegerWrapper> InsertFileAsync(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FileIntegerWrapper> localVarResponse = await InsertFileWithHttpInfoAsync(folderId, insertFileFile, insertFileTitle, insertFileCreateNewIfExist, insertFileKeepConvertStatus, insertFileStreamCanRead, insertFileStreamCanWrite, insertFileStreamCanSeek, insertFileStreamCanTimeout, insertFileStreamLength, insertFileStreamPosition, insertFileStreamReadTimeout, insertFileStreamWriteTimeout, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a file Inserts a file specified in the request to the selected folder by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for inserting a file.</param>
        /// <param name="insertFileFile">The file to be inserted. (optional)</param>
        /// <param name="insertFileTitle">The file title to be inserted. (optional)</param>
        /// <param name="insertFileCreateNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="insertFileKeepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="insertFileStreamCanRead"> (optional)</param>
        /// <param name="insertFileStreamCanWrite"> (optional)</param>
        /// <param name="insertFileStreamCanSeek"> (optional)</param>
        /// <param name="insertFileStreamCanTimeout"> (optional)</param>
        /// <param name="insertFileStreamLength"> (optional)</param>
        /// <param name="insertFileStreamPosition"> (optional)</param>
        /// <param name="insertFileStreamReadTimeout"> (optional)</param>
        /// <param name="insertFileStreamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FileIntegerWrapper>> InsertFileWithHttpInfoAsync(int folderId, FileParameter? insertFileFile = default(FileParameter?), string? insertFileTitle = default(string?), bool? insertFileCreateNewIfExist = default(bool?), bool? insertFileKeepConvertStatus = default(bool?), bool? insertFileStreamCanRead = default(bool?), bool? insertFileStreamCanWrite = default(bool?), bool? insertFileStreamCanSeek = default(bool?), bool? insertFileStreamCanTimeout = default(bool?), long? insertFileStreamLength = default(long?), long? insertFileStreamPosition = default(long?), int? insertFileStreamReadTimeout = default(int?), int? insertFileStreamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (insertFileFile != null)
            {
                localVarRequestOptions.FileParameters.Add("InsertFile.File", insertFileFile);
            }
            if (insertFileTitle != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Title", Docspace.Client.ClientUtils.ParameterToString(insertFileTitle)); // form parameter
            }
            if (insertFileCreateNewIfExist != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.CreateNewIfExist", Docspace.Client.ClientUtils.ParameterToString(insertFileCreateNewIfExist)); // form parameter
            }
            if (insertFileKeepConvertStatus != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.KeepConvertStatus", Docspace.Client.ClientUtils.ParameterToString(insertFileKeepConvertStatus)); // form parameter
            }
            if (insertFileStreamCanRead != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanRead", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanRead)); // form parameter
            }
            if (insertFileStreamCanWrite != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanWrite", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanWrite)); // form parameter
            }
            if (insertFileStreamCanSeek != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanSeek", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanSeek)); // form parameter
            }
            if (insertFileStreamCanTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.CanTimeout", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamCanTimeout)); // form parameter
            }
            if (insertFileStreamLength != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.Length", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamLength)); // form parameter
            }
            if (insertFileStreamPosition != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.Position", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamPosition)); // form parameter
            }
            if (insertFileStreamReadTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.ReadTimeout", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamReadTimeout)); // form parameter
            }
            if (insertFileStreamWriteTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("InsertFile.Stream.WriteTimeout", Docspace.Client.ClientUtils.ParameterToString(insertFileStreamWriteTimeout)); // form parameter
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileIntegerWrapper>("/api/2.0/files/{folderId}/insert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <returns>FileIntegerWrapper</returns>
        public FileIntegerWrapper InsertFileToMyFromBody(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?))
        {
            Docspace.Client.ApiResponse<FileIntegerWrapper> localVarResponse = InsertFileToMyFromBodyWithHttpInfo(file, title, createNewIfExist, keepConvertStatus, streamCanRead, streamCanWrite, streamCanSeek, streamCanTimeout, streamLength, streamPosition, streamReadTimeout, streamWriteTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <returns>ApiResponse of FileIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FileIntegerWrapper> InsertFileToMyFromBodyWithHttpInfo(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("File", file);
            }
            if (title != null)
            {
                localVarRequestOptions.FormParameters.Add("Title", Docspace.Client.ClientUtils.ParameterToString(title)); // form parameter
            }
            if (createNewIfExist != null)
            {
                localVarRequestOptions.FormParameters.Add("CreateNewIfExist", Docspace.Client.ClientUtils.ParameterToString(createNewIfExist)); // form parameter
            }
            if (keepConvertStatus != null)
            {
                localVarRequestOptions.FormParameters.Add("KeepConvertStatus", Docspace.Client.ClientUtils.ParameterToString(keepConvertStatus)); // form parameter
            }
            if (streamCanRead != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanRead", Docspace.Client.ClientUtils.ParameterToString(streamCanRead)); // form parameter
            }
            if (streamCanWrite != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanWrite", Docspace.Client.ClientUtils.ParameterToString(streamCanWrite)); // form parameter
            }
            if (streamCanSeek != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanSeek", Docspace.Client.ClientUtils.ParameterToString(streamCanSeek)); // form parameter
            }
            if (streamCanTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanTimeout", Docspace.Client.ClientUtils.ParameterToString(streamCanTimeout)); // form parameter
            }
            if (streamLength != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.Length", Docspace.Client.ClientUtils.ParameterToString(streamLength)); // form parameter
            }
            if (streamPosition != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.Position", Docspace.Client.ClientUtils.ParameterToString(streamPosition)); // form parameter
            }
            if (streamReadTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.ReadTimeout", Docspace.Client.ClientUtils.ParameterToString(streamReadTimeout)); // form parameter
            }
            if (streamWriteTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.WriteTimeout", Docspace.Client.ClientUtils.ParameterToString(streamWriteTimeout)); // form parameter
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileIntegerWrapper>("/api/2.0/files/@my/insert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertFileToMyFromBody", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FileIntegerWrapper> InsertFileToMyFromBodyAsync(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FileIntegerWrapper> localVarResponse = await InsertFileToMyFromBodyWithHttpInfoAsync(file, title, createNewIfExist, keepConvertStatus, streamCanRead, streamCanWrite, streamCanSeek, streamCanTimeout, streamLength, streamPosition, streamReadTimeout, streamWriteTimeout, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a file to the \&quot;My documents\&quot; section Inserts a file specified in the request to the \&quot;My documents\&quot; section by single file uploading.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to be inserted. (optional)</param>
        /// <param name="title">The file title to be inserted. (optional)</param>
        /// <param name="createNewIfExist">Specifies whether to create a new file if it already exists or not. (optional)</param>
        /// <param name="keepConvertStatus">Specifies whether to keep the file converting status or not. (optional)</param>
        /// <param name="streamCanRead"> (optional)</param>
        /// <param name="streamCanWrite"> (optional)</param>
        /// <param name="streamCanSeek"> (optional)</param>
        /// <param name="streamCanTimeout"> (optional)</param>
        /// <param name="streamLength"> (optional)</param>
        /// <param name="streamPosition"> (optional)</param>
        /// <param name="streamReadTimeout"> (optional)</param>
        /// <param name="streamWriteTimeout"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FileIntegerWrapper>> InsertFileToMyFromBodyWithHttpInfoAsync(FileParameter? file = default(FileParameter?), string? title = default(string?), bool? createNewIfExist = default(bool?), bool? keepConvertStatus = default(bool?), bool? streamCanRead = default(bool?), bool? streamCanWrite = default(bool?), bool? streamCanSeek = default(bool?), bool? streamCanTimeout = default(bool?), long? streamLength = default(long?), long? streamPosition = default(long?), int? streamReadTimeout = default(int?), int? streamWriteTimeout = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("File", file);
            }
            if (title != null)
            {
                localVarRequestOptions.FormParameters.Add("Title", Docspace.Client.ClientUtils.ParameterToString(title)); // form parameter
            }
            if (createNewIfExist != null)
            {
                localVarRequestOptions.FormParameters.Add("CreateNewIfExist", Docspace.Client.ClientUtils.ParameterToString(createNewIfExist)); // form parameter
            }
            if (keepConvertStatus != null)
            {
                localVarRequestOptions.FormParameters.Add("KeepConvertStatus", Docspace.Client.ClientUtils.ParameterToString(keepConvertStatus)); // form parameter
            }
            if (streamCanRead != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanRead", Docspace.Client.ClientUtils.ParameterToString(streamCanRead)); // form parameter
            }
            if (streamCanWrite != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanWrite", Docspace.Client.ClientUtils.ParameterToString(streamCanWrite)); // form parameter
            }
            if (streamCanSeek != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanSeek", Docspace.Client.ClientUtils.ParameterToString(streamCanSeek)); // form parameter
            }
            if (streamCanTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.CanTimeout", Docspace.Client.ClientUtils.ParameterToString(streamCanTimeout)); // form parameter
            }
            if (streamLength != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.Length", Docspace.Client.ClientUtils.ParameterToString(streamLength)); // form parameter
            }
            if (streamPosition != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.Position", Docspace.Client.ClientUtils.ParameterToString(streamPosition)); // form parameter
            }
            if (streamReadTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.ReadTimeout", Docspace.Client.ClientUtils.ParameterToString(streamReadTimeout)); // form parameter
            }
            if (streamWriteTimeout != null)
            {
                localVarRequestOptions.FormParameters.Add("Stream.WriteTimeout", Docspace.Client.ClientUtils.ParameterToString(streamWriteTimeout)); // form parameter
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileIntegerWrapper>("/api/2.0/files/@my/insert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertFileToMyFromBody", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a folder Renames the selected folder with a new title specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>FolderIntegerWrapper</returns>
        public FolderIntegerWrapper RenameFolder(int folderId, CreateFolder? createFolder = default(CreateFolder?))
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = RenameFolderWithHttpInfo(folderId, createFolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a folder Renames the selected folder with a new title specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderIntegerWrapper> RenameFolderWithHttpInfo(int folderId, CreateFolder? createFolder = default(CreateFolder?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = createFolder;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Put<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a folder Renames the selected folder with a new title specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderIntegerWrapper> RenameFolderAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = await RenameFolderWithHttpInfoAsync(folderId, createFolder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a folder Renames the selected folder with a new title specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID for the folder creation.</param>
        /// <param name="createFolder">The parameters for creating a folder. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderIntegerWrapper>> RenameFolderWithHttpInfoAsync(int folderId, CreateFolder? createFolder = default(CreateFolder?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = createFolder;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set file order Sets the file order in the folder with ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <returns>FolderIntegerWrapper</returns>
        public FolderIntegerWrapper SetFileOrder(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?))
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = SetFileOrderWithHttpInfo(folderId, orderRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set file order Sets the file order in the folder with ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <returns>ApiResponse of FolderIntegerWrapper</returns>
        public Docspace.Client.ApiResponse<FolderIntegerWrapper> SetFileOrderWithHttpInfo(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = orderRequestDto;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Put<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}/order", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFileOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set file order Sets the file order in the folder with ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderIntegerWrapper</returns>
        public async System.Threading.Tasks.Task<FolderIntegerWrapper> SetFileOrderAsync(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<FolderIntegerWrapper> localVarResponse = await SetFileOrderWithHttpInfoAsync(folderId, orderRequestDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set file order Sets the file order in the folder with ID specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder unique identifier.</param>
        /// <param name="orderRequestDto">The folder order information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderIntegerWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<FolderIntegerWrapper>> SetFileOrderWithHttpInfoAsync(int folderId, OrderRequestDto? orderRequestDto = default(OrderRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = orderRequestDto;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FolderIntegerWrapper>("/api/2.0/files/folder/{folderId}/order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFileOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a file Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ObjectWrapper</returns>
        public ObjectWrapper UploadFile(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?))
        {
            Docspace.Client.ApiResponse<ObjectWrapper> localVarResponse = UploadFileWithHttpInfo(folderId, uploadRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ApiResponse of ObjectWrapper</returns>
        public Docspace.Client.ApiResponse<ObjectWrapper> UploadFileWithHttpInfo(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = uploadRequestDto;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectWrapper>("/api/2.0/files/{folderId}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a file Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectWrapper</returns>
        public async System.Threading.Tasks.Task<ObjectWrapper> UploadFileAsync(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<ObjectWrapper> localVarResponse = await UploadFileWithHttpInfoAsync(folderId, uploadRequestDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">The folder ID to upload a file.</param>
        /// <param name="uploadRequestDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<ObjectWrapper>> UploadFileWithHttpInfoAsync(int folderId, UploadRequestDto? uploadRequestDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Docspace.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = uploadRequestDto;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectWrapper>("/api/2.0/files/{folderId}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ObjectWrapper</returns>
        public ObjectWrapper UploadFileToMy(UploadRequestDto? inDto = default(UploadRequestDto?))
        {
            Docspace.Client.ApiResponse<ObjectWrapper> localVarResponse = UploadFileToMyWithHttpInfo(inDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <returns>ApiResponse of ObjectWrapper</returns>
        public Docspace.Client.ApiResponse<ObjectWrapper> UploadFileToMyWithHttpInfo(UploadRequestDto? inDto = default(UploadRequestDto?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inDto != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inDto", inDto));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectWrapper>("/api/2.0/files/@my/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileToMy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectWrapper</returns>
        public async System.Threading.Tasks.Task<ObjectWrapper> UploadFileToMyAsync(UploadRequestDto? inDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<ObjectWrapper> localVarResponse = await UploadFileToMyWithHttpInfoAsync(inDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file to the \&quot;My documents\&quot; section Uploads a file specified in the request to the \&quot;My documents\&quot; section by single file uploading or standart multipart/form-data method.   **Note**:  You can upload files in two different ways:   &lt;ol&gt;  &lt;li&gt;Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.&lt;/li&gt;  &lt;li&gt;Using standart multipart/form-data method.&lt;/li&gt;  &lt;/ol&gt;
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inDto">The request parameters for uploading a file. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<ObjectWrapper>> UploadFileToMyWithHttpInfoAsync(UploadRequestDto? inDto = default(UploadRequestDto?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inDto != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inDto", inDto));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Docspace.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ApiKeyBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (OpenId) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectWrapper>("/api/2.0/files/@my/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileToMy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
