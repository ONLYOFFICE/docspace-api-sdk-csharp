/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Docspace.Client;
using Docspace.Model;

namespace Docspace.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleSearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets accounts entries with shared
        /// </summary>
        /// <remarks>
        /// Gets accounts entries with shared
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>ObjectArrayWrapper</returns>
        ObjectArrayWrapper GetAccountsEntriesWithShared(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?));

        /// <summary>
        /// Gets accounts entries with shared
        /// </summary>
        /// <remarks>
        /// Gets accounts entries with shared
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>ApiResponse of ObjectArrayWrapper</returns>
        ApiResponse<ObjectArrayWrapper> GetAccountsEntriesWithSharedWithHttpInfo(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?));
        /// <summary>
        /// Search users by status filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the status filter and search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        EmployeeFullArrayWrapper GetAdvanced(EmployeeStatus status, string? query = default(string?));

        /// <summary>
        /// Search users by status filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the status filter and search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        ApiResponse<EmployeeFullArrayWrapper> GetAdvancedWithHttpInfo(EmployeeStatus status, string? query = default(string?));
        /// <summary>
        /// Search users and their information by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users with full information about them matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        EmployeeFullArrayWrapper GetFullByFilter(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?));

        /// <summary>
        /// Search users and their information by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users with full information about them matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        ApiResponse<EmployeeFullArrayWrapper> GetFullByFilterWithHttpInfo(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?));
        /// <summary>
        /// Search users (using query parameters)
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query. This method uses the query parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <returns>EmployeeArrayWrapper</returns>
        EmployeeArrayWrapper GetPeopleSearch(string? query = default(string?));

        /// <summary>
        /// Search users (using query parameters)
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query. This method uses the query parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <returns>ApiResponse of EmployeeArrayWrapper</returns>
        ApiResponse<EmployeeArrayWrapper> GetPeopleSearchWithHttpInfo(string? query = default(string?));
        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        EmployeeFullArrayWrapper GetSearch(string query);

        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        ApiResponse<EmployeeFullArrayWrapper> GetSearchWithHttpInfo(string query);
        /// <summary>
        /// Search users by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>EmployeeArrayWrapper</returns>
        EmployeeArrayWrapper GetSimpleByFilter(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?));

        /// <summary>
        /// Search users by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>ApiResponse of EmployeeArrayWrapper</returns>
        ApiResponse<EmployeeArrayWrapper> GetSimpleByFilterWithHttpInfo(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?));
        /// <summary>
        /// Gets users with shared in room ID specified in request
        /// </summary>
        /// <remarks>
        /// Gets users with shared in room ID specified in request
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        EmployeeFullArrayWrapper GetUsersWithRoomShared(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?));

        /// <summary>
        /// Gets users with shared in room ID specified in request
        /// </summary>
        /// <remarks>
        /// Gets users with shared in room ID specified in request
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        ApiResponse<EmployeeFullArrayWrapper> GetUsersWithRoomSharedWithHttpInfo(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleSearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets accounts entries with shared
        /// </summary>
        /// <remarks>
        /// Gets accounts entries with shared
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectArrayWrapper</returns>
        System.Threading.Tasks.Task<ObjectArrayWrapper> GetAccountsEntriesWithSharedAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gets accounts entries with shared
        /// </summary>
        /// <remarks>
        /// Gets accounts entries with shared
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectArrayWrapper>> GetAccountsEntriesWithSharedWithHttpInfoAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search users by status filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the status filter and search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetAdvancedAsync(EmployeeStatus status, string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search users by status filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the status filter and search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeFullArrayWrapper>> GetAdvancedWithHttpInfoAsync(EmployeeStatus status, string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search users and their information by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users with full information about them matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetFullByFilterAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search users and their information by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users with full information about them matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeFullArrayWrapper>> GetFullByFilterWithHttpInfoAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search users (using query parameters)
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query. This method uses the query parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeArrayWrapper</returns>
        System.Threading.Tasks.Task<EmployeeArrayWrapper> GetPeopleSearchAsync(string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search users (using query parameters)
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query. This method uses the query parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeArrayWrapper>> GetPeopleSearchWithHttpInfoAsync(string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetSearchAsync(string query, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the search query.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeFullArrayWrapper>> GetSearchWithHttpInfoAsync(string query, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search users by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeArrayWrapper</returns>
        System.Threading.Tasks.Task<EmployeeArrayWrapper> GetSimpleByFilterAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search users by extended filter
        /// </summary>
        /// <remarks>
        /// Returns a list of users matching the parameters specified in the request.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeArrayWrapper>> GetSimpleByFilterWithHttpInfoAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gets users with shared in room ID specified in request
        /// </summary>
        /// <remarks>
        /// Gets users with shared in room ID specified in request
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetUsersWithRoomSharedAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gets users with shared in room ID specified in request
        /// </summary>
        /// <remarks>
        /// Gets users with shared in room ID specified in request
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeFullArrayWrapper>> GetUsersWithRoomSharedWithHttpInfoAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleSearchApi : IPeopleSearchApiSync, IPeopleSearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeopleSearchApi : IDisposable, IPeopleSearchApi
    {
        private Docspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleSearchApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PeopleSearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleSearchApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PeopleSearchApi(string basePath)
        {
            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleSearchApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PeopleSearchApi(Docspace.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleSearchApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PeopleSearchApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleSearchApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PeopleSearchApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleSearchApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public PeopleSearchApi(HttpClient client, Docspace.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleSearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PeopleSearchApi(Docspace.Client.ISynchronousClient client, Docspace.Client.IAsynchronousClient asyncClient, Docspace.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Docspace.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Docspace.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Docspace.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Docspace.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Docspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets accounts entries with shared Gets accounts entries with shared
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>ObjectArrayWrapper</returns>
        public ObjectArrayWrapper GetAccountsEntriesWithShared(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?))
        {
            Docspace.Client.ApiResponse<ObjectArrayWrapper> localVarResponse = GetAccountsEntriesWithSharedWithHttpInfo(id, employeeStatus, activationStatus, excludeShared, invitedByMe, inviterId, area, employeeTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets accounts entries with shared Gets accounts entries with shared
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>ApiResponse of ObjectArrayWrapper</returns>
        public Docspace.Client.ApiResponse<ObjectArrayWrapper> GetAccountsEntriesWithSharedWithHttpInfo(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (excludeShared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeShared", excludeShared));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }
            if (employeeTypes != null)
            {
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectArrayWrapper>("/api/2.0/accounts/room/{id}/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountsEntriesWithShared", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets accounts entries with shared Gets accounts entries with shared
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectArrayWrapper</returns>
        public async System.Threading.Tasks.Task<ObjectArrayWrapper> GetAccountsEntriesWithSharedAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<ObjectArrayWrapper> localVarResponse = await GetAccountsEntriesWithSharedWithHttpInfoAsync(id, employeeStatus, activationStatus, excludeShared, invitedByMe, inviterId, area, employeeTypes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets accounts entries with shared Gets accounts entries with shared
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<ObjectArrayWrapper>> GetAccountsEntriesWithSharedWithHttpInfoAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (excludeShared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeShared", excludeShared));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }
            if (employeeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("csv", "employeeTypes", employeeTypes));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectArrayWrapper>("/api/2.0/accounts/room/{id}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountsEntriesWithShared", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users by status filter Returns a list of users matching the status filter and search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        public EmployeeFullArrayWrapper GetAdvanced(EmployeeStatus status, string? query = default(string?))
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = GetAdvancedWithHttpInfo(status, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users by status filter Returns a list of users matching the status filter and search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        public Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> GetAdvancedWithHttpInfo(EmployeeStatus status, string? query = default(string?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("status", Docspace.Client.ClientUtils.ParameterToString(status)); // path parameter
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmployeeFullArrayWrapper>("/api/2.0/people/status/{status}/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvanced", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users by status filter Returns a list of users matching the status filter and search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        public async System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetAdvancedAsync(EmployeeStatus status, string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = await GetAdvancedWithHttpInfoAsync(status, query, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users by status filter Returns a list of users matching the status filter and search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">User status</param>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<EmployeeFullArrayWrapper>> GetAdvancedWithHttpInfoAsync(EmployeeStatus status, string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("status", Docspace.Client.ClientUtils.ParameterToString(status)); // path parameter
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmployeeFullArrayWrapper>("/api/2.0/people/status/{status}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdvanced", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users and their information by extended filter Returns a list of users with full information about them matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        public EmployeeFullArrayWrapper GetFullByFilter(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?))
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = GetFullByFilterWithHttpInfo(employeeStatus, groupId, activationStatus, employeeType, employeeTypes, isAdministrator, payments, accountLoginType, quotaFilter, withoutGroup, excludeGroup, invitedByMe, inviterId, area);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users and their information by extended filter Returns a list of users with full information about them matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        public Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> GetFullByFilterWithHttpInfo(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (employeeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeType", employeeType));
            }
            if (employeeTypes != null)
            {
            }
            if (isAdministrator != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "isAdministrator", isAdministrator));
            }
            if (payments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "payments", payments));
            }
            if (accountLoginType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "accountLoginType", accountLoginType));
            }
            if (quotaFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "quotaFilter", quotaFilter));
            }
            if (withoutGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "withoutGroup", withoutGroup));
            }
            if (excludeGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeGroup", excludeGroup));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmployeeFullArrayWrapper>("/api/2.0/people/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users and their information by extended filter Returns a list of users with full information about them matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        public async System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetFullByFilterAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = await GetFullByFilterWithHttpInfoAsync(employeeStatus, groupId, activationStatus, employeeType, employeeTypes, isAdministrator, payments, accountLoginType, quotaFilter, withoutGroup, excludeGroup, invitedByMe, inviterId, area, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users and their information by extended filter Returns a list of users with full information about them matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<EmployeeFullArrayWrapper>> GetFullByFilterWithHttpInfoAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (employeeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeType", employeeType));
            }
            if (employeeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("csv", "employeeTypes", employeeTypes));
            }
            if (isAdministrator != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "isAdministrator", isAdministrator));
            }
            if (payments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "payments", payments));
            }
            if (accountLoginType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "accountLoginType", accountLoginType));
            }
            if (quotaFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "quotaFilter", quotaFilter));
            }
            if (withoutGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "withoutGroup", withoutGroup));
            }
            if (excludeGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeGroup", excludeGroup));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmployeeFullArrayWrapper>("/api/2.0/people/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users (using query parameters) Returns a list of users matching the search query. This method uses the query parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <returns>EmployeeArrayWrapper</returns>
        public EmployeeArrayWrapper GetPeopleSearch(string? query = default(string?))
        {
            Docspace.Client.ApiResponse<EmployeeArrayWrapper> localVarResponse = GetPeopleSearchWithHttpInfo(query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users (using query parameters) Returns a list of users matching the search query. This method uses the query parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <returns>ApiResponse of EmployeeArrayWrapper</returns>
        public Docspace.Client.ApiResponse<EmployeeArrayWrapper> GetPeopleSearchWithHttpInfo(string? query = default(string?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmployeeArrayWrapper>("/api/2.0/people/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users (using query parameters) Returns a list of users matching the search query. This method uses the query parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeArrayWrapper</returns>
        public async System.Threading.Tasks.Task<EmployeeArrayWrapper> GetPeopleSearchAsync(string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<EmployeeArrayWrapper> localVarResponse = await GetPeopleSearchWithHttpInfoAsync(query, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users (using query parameters) Returns a list of users matching the search query. This method uses the query parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<EmployeeArrayWrapper>> GetPeopleSearchWithHttpInfoAsync(string? query = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmployeeArrayWrapper>("/api/2.0/people/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPeopleSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users Returns a list of users matching the search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        public EmployeeFullArrayWrapper GetSearch(string query)
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = GetSearchWithHttpInfo(query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users Returns a list of users matching the search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        public Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> GetSearchWithHttpInfo(string query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'query' when calling PeopleSearchApi->GetSearch");

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("query", Docspace.Client.ClientUtils.ParameterToString(query)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmployeeFullArrayWrapper>("/api/2.0/people/@search/{query}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users Returns a list of users matching the search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        public async System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetSearchAsync(string query, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = await GetSearchWithHttpInfoAsync(query, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users Returns a list of users matching the search query.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<EmployeeFullArrayWrapper>> GetSearchWithHttpInfoAsync(string query, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'query' when calling PeopleSearchApi->GetSearch");


            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("query", Docspace.Client.ClientUtils.ParameterToString(query)); // path parameter

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmployeeFullArrayWrapper>("/api/2.0/people/@search/{query}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users by extended filter Returns a list of users matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>EmployeeArrayWrapper</returns>
        public EmployeeArrayWrapper GetSimpleByFilter(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?))
        {
            Docspace.Client.ApiResponse<EmployeeArrayWrapper> localVarResponse = GetSimpleByFilterWithHttpInfo(employeeStatus, groupId, activationStatus, employeeType, employeeTypes, isAdministrator, payments, accountLoginType, quotaFilter, withoutGroup, excludeGroup, invitedByMe, inviterId, area);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users by extended filter Returns a list of users matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <returns>ApiResponse of EmployeeArrayWrapper</returns>
        public Docspace.Client.ApiResponse<EmployeeArrayWrapper> GetSimpleByFilterWithHttpInfo(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (employeeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeType", employeeType));
            }
            if (employeeTypes != null)
            {
            }
            if (isAdministrator != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "isAdministrator", isAdministrator));
            }
            if (payments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "payments", payments));
            }
            if (accountLoginType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "accountLoginType", accountLoginType));
            }
            if (quotaFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "quotaFilter", quotaFilter));
            }
            if (withoutGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "withoutGroup", withoutGroup));
            }
            if (excludeGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeGroup", excludeGroup));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmployeeArrayWrapper>("/api/2.0/people/simple/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimpleByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users by extended filter Returns a list of users matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeArrayWrapper</returns>
        public async System.Threading.Tasks.Task<EmployeeArrayWrapper> GetSimpleByFilterAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<EmployeeArrayWrapper> localVarResponse = await GetSimpleByFilterWithHttpInfoAsync(employeeStatus, groupId, activationStatus, employeeType, employeeTypes, isAdministrator, payments, accountLoginType, quotaFilter, withoutGroup, excludeGroup, invitedByMe, inviterId, area, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users by extended filter Returns a list of users matching the parameters specified in the request.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeStatus">User status (optional)</param>
        /// <param name="groupId">Group ID (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="employeeType">User type (optional)</param>
        /// <param name="employeeTypes">List of user types (optional)</param>
        /// <param name="isAdministrator">Specifies if the user is an administrator or not (optional)</param>
        /// <param name="payments">User payment status (optional)</param>
        /// <param name="accountLoginType">Account login type (optional)</param>
        /// <param name="quotaFilter">Filter by quota (All - 0, Default - 1, Custom - 2) (optional)</param>
        /// <param name="withoutGroup">Specifies whether the user should be a member of a group or not (optional)</param>
        /// <param name="excludeGroup">Specifies whether or not the user should be a member of the group with the specified ID (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<EmployeeArrayWrapper>> GetSimpleByFilterWithHttpInfoAsync(EmployeeStatus? employeeStatus = default(EmployeeStatus?), Guid? groupId = default(Guid?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), EmployeeType? employeeType = default(EmployeeType?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), bool? isAdministrator = default(bool?), Payments? payments = default(Payments?), AccountLoginType? accountLoginType = default(AccountLoginType?), QuotaFilter? quotaFilter = default(QuotaFilter?), bool? withoutGroup = default(bool?), bool? excludeGroup = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (employeeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeType", employeeType));
            }
            if (employeeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("csv", "employeeTypes", employeeTypes));
            }
            if (isAdministrator != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "isAdministrator", isAdministrator));
            }
            if (payments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "payments", payments));
            }
            if (accountLoginType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "accountLoginType", accountLoginType));
            }
            if (quotaFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "quotaFilter", quotaFilter));
            }
            if (withoutGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "withoutGroup", withoutGroup));
            }
            if (excludeGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeGroup", excludeGroup));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmployeeArrayWrapper>("/api/2.0/people/simple/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimpleByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets users with shared in room ID specified in request Gets users with shared in room ID specified in request
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>EmployeeFullArrayWrapper</returns>
        public EmployeeFullArrayWrapper GetUsersWithRoomShared(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?))
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = GetUsersWithRoomSharedWithHttpInfo(id, employeeStatus, activationStatus, excludeShared, invitedByMe, inviterId, area, employeeTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets users with shared in room ID specified in request Gets users with shared in room ID specified in request
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <returns>ApiResponse of EmployeeFullArrayWrapper</returns>
        public Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> GetUsersWithRoomSharedWithHttpInfo(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (excludeShared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeShared", excludeShared));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }
            if (employeeTypes != null)
            {
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmployeeFullArrayWrapper>("/api/2.0/people/room/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersWithRoomShared", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets users with shared in room ID specified in request Gets users with shared in room ID specified in request
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployeeFullArrayWrapper</returns>
        public async System.Threading.Tasks.Task<EmployeeFullArrayWrapper> GetUsersWithRoomSharedAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<EmployeeFullArrayWrapper> localVarResponse = await GetUsersWithRoomSharedWithHttpInfoAsync(id, employeeStatus, activationStatus, excludeShared, invitedByMe, inviterId, area, employeeTypes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets users with shared in room ID specified in request Gets users with shared in room ID specified in request
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="employeeStatus">Employee status (optional)</param>
        /// <param name="activationStatus">Activation status (optional)</param>
        /// <param name="excludeShared">Exclude shared (optional)</param>
        /// <param name="invitedByMe">Invited by me (optional)</param>
        /// <param name="inviterId">Inviter Id (optional)</param>
        /// <param name="area">Area (optional)</param>
        /// <param name="employeeTypes">Employee Types (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployeeFullArrayWrapper)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<EmployeeFullArrayWrapper>> GetUsersWithRoomSharedWithHttpInfoAsync(int id, EmployeeStatus? employeeStatus = default(EmployeeStatus?), EmployeeActivationStatus? activationStatus = default(EmployeeActivationStatus?), bool? excludeShared = default(bool?), bool? invitedByMe = default(bool?), Guid? inviterId = default(Guid?), Area? area = default(Area?), List<EmployeeType>? employeeTypes = default(List<EmployeeType>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Docspace.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (employeeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "employeeStatus", employeeStatus));
            }
            if (activationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "activationStatus", activationStatus));
            }
            if (excludeShared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "excludeShared", excludeShared));
            }
            if (invitedByMe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "invitedByMe", invitedByMe));
            }
            if (inviterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "inviterId", inviterId));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "area", area));
            }
            if (employeeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("csv", "employeeTypes", employeeTypes));
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmployeeFullArrayWrapper>("/api/2.0/people/room/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersWithRoomShared", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
