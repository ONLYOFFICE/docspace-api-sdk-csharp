/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Docspace.Client;
using Docspace.Model;

namespace Docspace.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth20AuthorizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// OAuth2 authorization endpoint
        /// </summary>
        /// <remarks>
        /// Initiates the OAuth2 authorization flow.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <returns></returns>
        void Oauth2AuthorizeGet(string responseType, string clientId, string redirectUri, string scope);

        /// <summary>
        /// OAuth2 authorization endpoint
        /// </summary>
        /// <remarks>
        /// Initiates the OAuth2 authorization flow.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Oauth2AuthorizeGetWithHttpInfo(string responseType, string clientId, string redirectUri, string scope);
        /// <summary>
        /// OAuth2 consent endpoint
        /// </summary>
        /// <remarks>
        /// Sends a consent request with the specified parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <returns></returns>
        void Oauth2AuthorizePost(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?));

        /// <summary>
        /// OAuth2 consent endpoint
        /// </summary>
        /// <remarks>
        /// Sends a consent request with the specified parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Oauth2AuthorizePostWithHttpInfo(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?));
        /// <summary>
        /// OAuth2 token endpoint
        /// </summary>
        /// <remarks>
        /// Exchanges an authorization code specified in the request for the access token.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <returns>Oauth2TokenPost200Response</returns>
        Oauth2TokenPost200Response Oauth2TokenPost(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?));

        /// <summary>
        /// OAuth2 token endpoint
        /// </summary>
        /// <remarks>
        /// Exchanges an authorization code specified in the request for the access token.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <returns>ApiResponse of Oauth2TokenPost200Response</returns>
        ApiResponse<Oauth2TokenPost200Response> Oauth2TokenPostWithHttpInfo(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth20AuthorizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// OAuth2 authorization endpoint
        /// </summary>
        /// <remarks>
        /// Initiates the OAuth2 authorization flow.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Oauth2AuthorizeGetAsync(string responseType, string clientId, string redirectUri, string scope, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 authorization endpoint
        /// </summary>
        /// <remarks>
        /// Initiates the OAuth2 authorization flow.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Oauth2AuthorizeGetWithHttpInfoAsync(string responseType, string clientId, string redirectUri, string scope, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2 consent endpoint
        /// </summary>
        /// <remarks>
        /// Sends a consent request with the specified parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Oauth2AuthorizePostAsync(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 consent endpoint
        /// </summary>
        /// <remarks>
        /// Sends a consent request with the specified parameters.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Oauth2AuthorizePostWithHttpInfoAsync(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2 token endpoint
        /// </summary>
        /// <remarks>
        /// Exchanges an authorization code specified in the request for the access token.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Oauth2TokenPost200Response</returns>
        System.Threading.Tasks.Task<Oauth2TokenPost200Response> Oauth2TokenPostAsync(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 token endpoint
        /// </summary>
        /// <remarks>
        /// Exchanges an authorization code specified in the request for the access token.
        /// </remarks>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Oauth2TokenPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Oauth2TokenPost200Response>> Oauth2TokenPostWithHttpInfoAsync(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth20AuthorizationApi : IOAuth20AuthorizationApiSync, IOAuth20AuthorizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuth20AuthorizationApi : IDisposable, IOAuth20AuthorizationApi
    {
        private Docspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20AuthorizationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OAuth20AuthorizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20AuthorizationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OAuth20AuthorizationApi(string basePath)
        {
            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20AuthorizationApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OAuth20AuthorizationApi(Docspace.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20AuthorizationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OAuth20AuthorizationApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20AuthorizationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OAuth20AuthorizationApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                new Docspace.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20AuthorizationApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OAuth20AuthorizationApi(HttpClient client, Docspace.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Docspace.Client.Configuration.MergeConfigurations(
                Docspace.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Docspace.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth20AuthorizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OAuth20AuthorizationApi(Docspace.Client.ISynchronousClient client, Docspace.Client.IAsynchronousClient asyncClient, Docspace.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Docspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Docspace.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Docspace.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Docspace.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Docspace.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Docspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// OAuth2 authorization endpoint Initiates the OAuth2 authorization flow.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <returns></returns>
        public void Oauth2AuthorizeGet(string responseType, string clientId, string redirectUri, string scope)
        {
            Oauth2AuthorizeGetWithHttpInfo(responseType, clientId, redirectUri, scope);
        }

        /// <summary>
        /// OAuth2 authorization endpoint Initiates the OAuth2 authorization flow.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Docspace.Client.ApiResponse<Object> Oauth2AuthorizeGetWithHttpInfo(string responseType, string clientId, string redirectUri, string scope)
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'responseType' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");

            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'scope' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2AuthorizeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 authorization endpoint Initiates the OAuth2 authorization flow.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Oauth2AuthorizeGetAsync(string responseType, string clientId, string redirectUri, string scope, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await Oauth2AuthorizeGetWithHttpInfoAsync(responseType, clientId, redirectUri, scope, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2 authorization endpoint Initiates the OAuth2 authorization flow.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The OAuth 2.0 response type, must be &#39;code&#39; for authorization code flow.</param>
        /// <param name="clientId">The client identifier issued to the client during registration.</param>
        /// <param name="redirectUri">The URL to redirect to after authorization is complete.</param>
        /// <param name="scope">The space-separated list of requested scope permissions.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<Object>> Oauth2AuthorizeGetWithHttpInfoAsync(string responseType, string clientId, string redirectUri, string scope, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'responseType' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");

            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");

            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Docspace.Client.ApiException(400, "Missing required parameter 'scope' when calling OAuth20AuthorizationApi->Oauth2AuthorizeGet");


            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            localVarRequestOptions.QueryParameters.Add(Docspace.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2AuthorizeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 consent endpoint Sends a consent request with the specified parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <returns></returns>
        public void Oauth2AuthorizePost(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?))
        {
            Oauth2AuthorizePostWithHttpInfo(clientId, state, scope);
        }

        /// <summary>
        /// OAuth2 consent endpoint Sends a consent request with the specified parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Docspace.Client.ApiResponse<Object> Oauth2AuthorizePostWithHttpInfo(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Docspace.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (state != null)
            {
                localVarRequestOptions.FormParameters.Add("state", Docspace.Client.ClientUtils.ParameterToString(state)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Docspace.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2AuthorizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 consent endpoint Sends a consent request with the specified parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Oauth2AuthorizePostAsync(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await Oauth2AuthorizePostWithHttpInfoAsync(clientId, state, scope, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2 consent endpoint Sends a consent request with the specified parameters.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="state">The random string used to solve the CSRF vulnerability problem. (optional)</param>
        /// <param name="scope">The space-separated list of requested scope permissions. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<Object>> Oauth2AuthorizePostWithHttpInfoAsync(string? clientId = default(string?), string? state = default(string?), string? scope = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Docspace.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (state != null)
            {
                localVarRequestOptions.FormParameters.Add("state", Docspace.Client.ClientUtils.ParameterToString(state)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Docspace.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }

            // authentication (asc_auth_key) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("asc_auth_key")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("asc_auth_key", this.Configuration.GetApiKeyWithPrefix("asc_auth_key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2AuthorizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 token endpoint Exchanges an authorization code specified in the request for the access token.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <returns>Oauth2TokenPost200Response</returns>
        public Oauth2TokenPost200Response Oauth2TokenPost(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?))
        {
            Docspace.Client.ApiResponse<Oauth2TokenPost200Response> localVarResponse = Oauth2TokenPostWithHttpInfo(grantType, code, redirectUri, clientId, clientSecret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2 token endpoint Exchanges an authorization code specified in the request for the access token.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <returns>ApiResponse of Oauth2TokenPost200Response</returns>
        public Docspace.Client.ApiResponse<Oauth2TokenPost200Response> Oauth2TokenPostWithHttpInfo(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?))
        {
            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", Docspace.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Docspace.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Docspace.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Docspace.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Docspace.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<Oauth2TokenPost200Response>("/oauth2/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2TokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 token endpoint Exchanges an authorization code specified in the request for the access token.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Oauth2TokenPost200Response</returns>
        public async System.Threading.Tasks.Task<Oauth2TokenPost200Response> Oauth2TokenPostAsync(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Docspace.Client.ApiResponse<Oauth2TokenPost200Response> localVarResponse = await Oauth2TokenPostWithHttpInfoAsync(grantType, code, redirectUri, clientId, clientSecret, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2 token endpoint Exchanges an authorization code specified in the request for the access token.
        /// </summary>
        /// <exception cref="Docspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The OAuth2 grant type, must be &#39;authorization_code&#39; for the authorization code flow. (optional)</param>
        /// <param name="code">A temporary authorization code that is sent to the client to be exchanged for a token. (optional)</param>
        /// <param name="redirectUri">The URL where the user will be redirected after successful or unsuccessful authentication. (optional)</param>
        /// <param name="clientId">The client identifier issued to the client during registration. (optional)</param>
        /// <param name="clientSecret">The client secret issued to the client during registration. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Oauth2TokenPost200Response)</returns>
        public async System.Threading.Tasks.Task<Docspace.Client.ApiResponse<Oauth2TokenPost200Response>> Oauth2TokenPostWithHttpInfoAsync(string? grantType = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Docspace.Client.RequestOptions localVarRequestOptions = new Docspace.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Docspace.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Docspace.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", Docspace.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Docspace.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Docspace.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Docspace.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Docspace.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Oauth2TokenPost200Response>("/oauth2/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2TokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
