/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// The additional white label settings parameters.
    /// </summary>
    [DataContract(Name = "AdditionalWhiteLabelSettingsDto")]
    public partial class AdditionalWhiteLabelSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalWhiteLabelSettingsDto" /> class.
        /// </summary>
        /// <param name="startDocsEnabled">Specifies if the sample documents are displayed or hidden..</param>
        /// <param name="helpCenterEnabled">Specifies if the Help Center link is available or not..</param>
        /// <param name="feedbackAndSupportEnabled">Specifies if the \&quot;Feedback &amp; Support\&quot; link is available or not..</param>
        /// <param name="userForumEnabled">Specifies if the user forum is available or not..</param>
        /// <param name="videoGuidesEnabled">Specifies if the Video Guides link is available or not..</param>
        /// <param name="licenseAgreementsEnabled">Specifies if the License Agreements link is available or not..</param>
        /// <param name="isDefault">Specifies if the additional white label settings are default or not..</param>
        public AdditionalWhiteLabelSettingsDto(bool startDocsEnabled = default(bool), bool helpCenterEnabled = default(bool), bool feedbackAndSupportEnabled = default(bool), bool userForumEnabled = default(bool), bool videoGuidesEnabled = default(bool), bool licenseAgreementsEnabled = default(bool), bool isDefault = default(bool))
        {
            this.StartDocsEnabled = startDocsEnabled;
            this.HelpCenterEnabled = helpCenterEnabled;
            this.FeedbackAndSupportEnabled = feedbackAndSupportEnabled;
            this.UserForumEnabled = userForumEnabled;
            this.VideoGuidesEnabled = videoGuidesEnabled;
            this.LicenseAgreementsEnabled = licenseAgreementsEnabled;
            this.IsDefault = isDefault;
        }

        /// <summary>
        /// Specifies if the sample documents are displayed or hidden.
        /// </summary>
        /// <value>Specifies if the sample documents are displayed or hidden.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "startDocsEnabled", EmitDefaultValue = true)]
        public bool StartDocsEnabled { get; set; }

        /// <summary>
        /// Specifies if the Help Center link is available or not.
        /// </summary>
        /// <value>Specifies if the Help Center link is available or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "helpCenterEnabled", EmitDefaultValue = true)]
        public bool HelpCenterEnabled { get; set; }

        /// <summary>
        /// Specifies if the \&quot;Feedback &amp; Support\&quot; link is available or not.
        /// </summary>
        /// <value>Specifies if the \&quot;Feedback &amp; Support\&quot; link is available or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "feedbackAndSupportEnabled", EmitDefaultValue = true)]
        public bool FeedbackAndSupportEnabled { get; set; }

        /// <summary>
        /// Specifies if the user forum is available or not.
        /// </summary>
        /// <value>Specifies if the user forum is available or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "userForumEnabled", EmitDefaultValue = true)]
        public bool UserForumEnabled { get; set; }

        /// <summary>
        /// Specifies if the Video Guides link is available or not.
        /// </summary>
        /// <value>Specifies if the Video Guides link is available or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "videoGuidesEnabled", EmitDefaultValue = true)]
        public bool VideoGuidesEnabled { get; set; }

        /// <summary>
        /// Specifies if the License Agreements link is available or not.
        /// </summary>
        /// <value>Specifies if the License Agreements link is available or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "licenseAgreementsEnabled", EmitDefaultValue = true)]
        public bool LicenseAgreementsEnabled { get; set; }

        /// <summary>
        /// Specifies if the additional white label settings are default or not.
        /// </summary>
        /// <value>Specifies if the additional white label settings are default or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalWhiteLabelSettingsDto {\n");
            sb.Append("  StartDocsEnabled: ").Append(StartDocsEnabled).Append("\n");
            sb.Append("  HelpCenterEnabled: ").Append(HelpCenterEnabled).Append("\n");
            sb.Append("  FeedbackAndSupportEnabled: ").Append(FeedbackAndSupportEnabled).Append("\n");
            sb.Append("  UserForumEnabled: ").Append(UserForumEnabled).Append("\n");
            sb.Append("  VideoGuidesEnabled: ").Append(VideoGuidesEnabled).Append("\n");
            sb.Append("  LicenseAgreementsEnabled: ").Append(LicenseAgreementsEnabled).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
