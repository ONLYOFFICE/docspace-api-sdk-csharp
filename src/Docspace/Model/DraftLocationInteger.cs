/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// DraftLocationInteger
    /// </summary>
    [DataContract(Name = "DraftLocationInteger")]
    public partial class DraftLocationInteger : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DraftLocationInteger" /> class.
        /// </summary>
        /// <param name="folderId">InProcess folder ID.</param>
        /// <param name="folderTitle">InProcess folder title.</param>
        /// <param name="fileId">Draft ID.</param>
        /// <param name="fileTitle">Draft title.</param>
        public DraftLocationInteger(int folderId = default(int), string folderTitle = default(string), int fileId = default(int), string fileTitle = default(string))
        {
            this.FolderId = folderId;
            this.FolderTitle = folderTitle;
            this.FileId = fileId;
            this.FileTitle = fileTitle;
        }

        /// <summary>
        /// InProcess folder ID
        /// </summary>
        /// <value>InProcess folder ID</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "folderId", EmitDefaultValue = false)]
        public int FolderId { get; set; }

        /// <summary>
        /// InProcess folder title
        /// </summary>
        /// <value>InProcess folder title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "folderTitle", EmitDefaultValue = true)]
        public string FolderTitle { get; set; }

        /// <summary>
        /// Draft ID
        /// </summary>
        /// <value>Draft ID</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "fileId", EmitDefaultValue = false)]
        public int FileId { get; set; }

        /// <summary>
        /// Draft title
        /// </summary>
        /// <value>Draft title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileTitle", EmitDefaultValue = true)]
        public string FileTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DraftLocationInteger {\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  FolderTitle: ").Append(FolderTitle).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileTitle: ").Append(FileTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
