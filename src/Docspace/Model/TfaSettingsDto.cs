/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// TfaSettingsDto
    /// </summary>
    [DataContract(Name = "TfaSettingsDto")]
    public partial class TfaSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TfaSettingsDto" /> class.
        /// </summary>
        /// <param name="id">ID.</param>
        /// <param name="title">Title.</param>
        /// <param name="enabled">Specifies if the TFA settings are enabled or not.</param>
        /// <param name="avaliable">Specifies if the TFA settings are available or not.</param>
        /// <param name="trustedIps">List of trusted IP addresses.</param>
        /// <param name="mandatoryUsers">List of users who must use the TFA verification.</param>
        /// <param name="mandatoryGroups">List of groups who must use the TFA verification.</param>
        public TfaSettingsDto(string id = default(string), string title = default(string), bool enabled = default(bool), bool avaliable = default(bool), List<string> trustedIps = default(List<string>), List<Guid> mandatoryUsers = default(List<Guid>), List<Guid> mandatoryGroups = default(List<Guid>))
        {
            this.Id = id;
            this.Title = title;
            this.Enabled = enabled;
            this.Avaliable = avaliable;
            this.TrustedIps = trustedIps;
            this.MandatoryUsers = mandatoryUsers;
            this.MandatoryGroups = mandatoryGroups;
        }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        /*
        <example>legacy_1080p_small_wooden_mouse</example>
        */
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Specifies if the TFA settings are enabled or not
        /// </summary>
        /// <value>Specifies if the TFA settings are enabled or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Specifies if the TFA settings are available or not
        /// </summary>
        /// <value>Specifies if the TFA settings are available or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "avaliable", EmitDefaultValue = true)]
        public bool Avaliable { get; set; }

        /// <summary>
        /// List of trusted IP addresses
        /// </summary>
        /// <value>List of trusted IP addresses</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "trustedIps", EmitDefaultValue = true)]
        public List<string> TrustedIps { get; set; }

        /// <summary>
        /// List of users who must use the TFA verification
        /// </summary>
        /// <value>List of users who must use the TFA verification</value>
        /*
        <example>[&quot;75a5f745-f697-4418-b38d-0fe0d277e258&quot;]</example>
        */
        [DataMember(Name = "mandatoryUsers", EmitDefaultValue = true)]
        public List<Guid> MandatoryUsers { get; set; }

        /// <summary>
        /// List of groups who must use the TFA verification
        /// </summary>
        /// <value>List of groups who must use the TFA verification</value>
        /*
        <example>[&quot;75a5f745-f697-4418-b38d-0fe0d277e258&quot;]</example>
        */
        [DataMember(Name = "mandatoryGroups", EmitDefaultValue = true)]
        public List<Guid> MandatoryGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TfaSettingsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Avaliable: ").Append(Avaliable).Append("\n");
            sb.Append("  TrustedIps: ").Append(TrustedIps).Append("\n");
            sb.Append("  MandatoryUsers: ").Append(MandatoryUsers).Append("\n");
            sb.Append("  MandatoryGroups: ").Append(MandatoryGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
