/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// The API date and time parameters.
    /// </summary>
    [DataContract(Name = "ApiDateTime")]
    [JsonConverter(typeof(ApiDateTimeConverter))]
    public partial class ApiDateTime : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiDateTime" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ApiDateTime()
        {
        }

        /// <summary>
        /// The time in UTC format.
        /// </summary>
        /// <value>The time in UTC format.</value>
        /*
        <example>2008-04-10T06:30+04:00</example>
        */
        [DataMember(Name = "utcTime", EmitDefaultValue = false)]
        public DateTime UtcTime { get; set; }

        /// <summary>
        /// Returns false as UtcTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUtcTime()
        {
            return false;
        }
        /// <summary>
        /// The time zone offset.
        /// </summary>
        /// <value>The time zone offset.</value>
        /*
        <example>00:00:00</example>
        */
        [DataMember(Name = "timeZoneOffset", EmitDefaultValue = false)]
        public string TimeZoneOffset { get; set; }

        /// <summary>
        /// Returns false as TimeZoneOffset should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimeZoneOffset()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiDateTime {\n");
            sb.Append("  UtcTime: ").Append(UtcTime).Append("\n");
            sb.Append("  TimeZoneOffset: ").Append(TimeZoneOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    public class ApiDateTimeConverter : JsonConverter<ApiDateTime>
    {
        public override ApiDateTime ReadJson(JsonReader reader, Type objectType, ApiDateTime existingValue, bool hasExistingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jsonString = reader.Value.ToString();

            if (DateTimeOffset.TryParse(jsonString, out var dateTimeOffset))
            {
                return new ApiDateTime
                {
                    UtcTime = dateTimeOffset.UtcDateTime,
                    TimeZoneOffset = dateTimeOffset.Offset.ToString()
                };
            }
            else
            {
                throw new JsonSerializationException($"Unable to parse datetime: {jsonString}");
            }
        }

        public override void WriteJson(JsonWriter writer, ApiDateTime value, Newtonsoft.Json.JsonSerializer serializer)
        {
            var dateTimeOffset = new DateTimeOffset((DateTime)value.UtcTime, TimeSpan.Parse(value.TimeZoneOffset));
            writer.WriteValue(dateTimeOffset.ToString("o"));
        }
    }

}
