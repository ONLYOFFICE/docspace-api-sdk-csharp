/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// SsoSpCertificateAdvanced
    /// </summary>
    [DataContract(Name = "SsoSpCertificateAdvanced")]
    public partial class SsoSpCertificateAdvanced : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SsoSpCertificateAdvanced" /> class.
        /// </summary>
        /// <param name="signingAlgorithm">Signing algorithm.</param>
        /// <param name="signAuthRequests">Specifies if SP will sign the SAML authentication requests sent to IdP or not.</param>
        /// <param name="signLogoutRequests">Specifies if SP will sign the SAML logout requests sent to IdP or not.</param>
        /// <param name="signLogoutResponses">Specifies if sign the SAML logout responses sent to IdP or not.</param>
        /// <param name="encryptAlgorithm">Encryption algorithm.</param>
        /// <param name="decryptAlgorithm">Decryption algorithm.</param>
        /// <param name="encryptAssertions">Specifies if the assertions will be encrypted or not.</param>
        public SsoSpCertificateAdvanced(string signingAlgorithm = default(string), bool signAuthRequests = default(bool), bool signLogoutRequests = default(bool), bool signLogoutResponses = default(bool), string encryptAlgorithm = default(string), string decryptAlgorithm = default(string), bool encryptAssertions = default(bool))
        {
            this.SigningAlgorithm = signingAlgorithm;
            this.SignAuthRequests = signAuthRequests;
            this.SignLogoutRequests = signLogoutRequests;
            this.SignLogoutResponses = signLogoutResponses;
            this.EncryptAlgorithm = encryptAlgorithm;
            this.DecryptAlgorithm = decryptAlgorithm;
            this.EncryptAssertions = encryptAssertions;
        }

        /// <summary>
        /// Signing algorithm
        /// </summary>
        /// <value>Signing algorithm</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "signingAlgorithm", EmitDefaultValue = true)]
        public string SigningAlgorithm { get; set; }

        /// <summary>
        /// Specifies if SP will sign the SAML authentication requests sent to IdP or not
        /// </summary>
        /// <value>Specifies if SP will sign the SAML authentication requests sent to IdP or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "signAuthRequests", EmitDefaultValue = true)]
        public bool SignAuthRequests { get; set; }

        /// <summary>
        /// Specifies if SP will sign the SAML logout requests sent to IdP or not
        /// </summary>
        /// <value>Specifies if SP will sign the SAML logout requests sent to IdP or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "signLogoutRequests", EmitDefaultValue = true)]
        public bool SignLogoutRequests { get; set; }

        /// <summary>
        /// Specifies if sign the SAML logout responses sent to IdP or not
        /// </summary>
        /// <value>Specifies if sign the SAML logout responses sent to IdP or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "signLogoutResponses", EmitDefaultValue = true)]
        public bool SignLogoutResponses { get; set; }

        /// <summary>
        /// Encryption algorithm
        /// </summary>
        /// <value>Encryption algorithm</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "encryptAlgorithm", EmitDefaultValue = true)]
        public string EncryptAlgorithm { get; set; }

        /// <summary>
        /// Decryption algorithm
        /// </summary>
        /// <value>Decryption algorithm</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "decryptAlgorithm", EmitDefaultValue = true)]
        public string DecryptAlgorithm { get; set; }

        /// <summary>
        /// Specifies if the assertions will be encrypted or not
        /// </summary>
        /// <value>Specifies if the assertions will be encrypted or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "encryptAssertions", EmitDefaultValue = true)]
        public bool EncryptAssertions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SsoSpCertificateAdvanced {\n");
            sb.Append("  SigningAlgorithm: ").Append(SigningAlgorithm).Append("\n");
            sb.Append("  SignAuthRequests: ").Append(SignAuthRequests).Append("\n");
            sb.Append("  SignLogoutRequests: ").Append(SignLogoutRequests).Append("\n");
            sb.Append("  SignLogoutResponses: ").Append(SignLogoutResponses).Append("\n");
            sb.Append("  EncryptAlgorithm: ").Append(EncryptAlgorithm).Append("\n");
            sb.Append("  DecryptAlgorithm: ").Append(DecryptAlgorithm).Append("\n");
            sb.Append("  EncryptAssertions: ").Append(EncryptAssertions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
