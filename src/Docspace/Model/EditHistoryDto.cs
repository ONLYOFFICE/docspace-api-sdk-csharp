/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// EditHistoryDto
    /// </summary>
    [DataContract(Name = "EditHistoryDto")]
    public partial class EditHistoryDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditHistoryDto" /> class.
        /// </summary>
        /// <param name="id">File ID.</param>
        /// <param name="key">Key.</param>
        /// <param name="varVersion">File version.</param>
        /// <param name="versionGroup">Version group.</param>
        /// <param name="user">user.</param>
        /// <param name="created">created.</param>
        /// <param name="changesHistory">History changes in the string format.</param>
        /// <param name="changes">List of history changes.</param>
        /// <param name="serverVersion">Server version.</param>
        public EditHistoryDto(int id = default(int), string key = default(string), int varVersion = default(int), int versionGroup = default(int), EditHistoryAuthor user = default(EditHistoryAuthor), ApiDateTime created = default(ApiDateTime), string changesHistory = default(string), List<EditHistoryChangesWrapper> changes = default(List<EditHistoryChangesWrapper>), string serverVersion = default(string))
        {
            this.Id = id;
            this.Key = key;
            this.VarVersion = varVersion;
            this.VersionGroup = versionGroup;
            this.User = user;
            this.Created = created;
            this.ChangesHistory = changesHistory;
            this.Changes = changes;
            this.ServerVersion = serverVersion;
        }

        /// <summary>
        /// File ID
        /// </summary>
        /// <value>File ID</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Key
        /// </summary>
        /// <value>Key</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// File version
        /// </summary>
        /// <value>File version</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Version group
        /// </summary>
        /// <value>Version group</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "versionGroup", EmitDefaultValue = false)]
        public int VersionGroup { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public EditHistoryAuthor User { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public ApiDateTime Created { get; set; }

        /// <summary>
        /// History changes in the string format
        /// </summary>
        /// <value>History changes in the string format</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "changesHistory", EmitDefaultValue = true)]
        public string ChangesHistory { get; set; }

        /// <summary>
        /// List of history changes
        /// </summary>
        /// <value>List of history changes</value>
        [DataMember(Name = "changes", EmitDefaultValue = true)]
        public List<EditHistoryChangesWrapper> Changes { get; set; }

        /// <summary>
        /// Server version
        /// </summary>
        /// <value>Server version</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "serverVersion", EmitDefaultValue = true)]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditHistoryDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  VersionGroup: ").Append(VersionGroup).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ChangesHistory: ").Append(ChangesHistory).Append("\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
