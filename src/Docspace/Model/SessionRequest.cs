/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Session parameters
    /// </summary>
    [DataContract(Name = "SessionRequest")]
    public partial class SessionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionRequest" /> class.
        /// </summary>
        /// <param name="fileName">File name.</param>
        /// <param name="fileSize">File length in bytes.</param>
        /// <param name="relativePath">Relative path to the folder.</param>
        /// <param name="createOn">createOn.</param>
        /// <param name="encrypted">Specifies whether to encrypt a file or not.</param>
        /// <param name="createNewIfExist">Create new if exists.</param>
        public SessionRequest(string fileName = default(string), long fileSize = default(long), string relativePath = default(string), ApiDateTime createOn = default(ApiDateTime), bool encrypted = default(bool), bool createNewIfExist = default(bool))
        {
            this.FileName = fileName;
            this.FileSize = fileSize;
            this.RelativePath = relativePath;
            this.CreateOn = createOn;
            this.Encrypted = encrypted;
            this.CreateNewIfExist = createNewIfExist;
        }

        /// <summary>
        /// File name
        /// </summary>
        /// <value>File name</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileName", EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// File length in bytes
        /// </summary>
        /// <value>File length in bytes</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "fileSize", EmitDefaultValue = false)]
        public long FileSize { get; set; }

        /// <summary>
        /// Relative path to the folder
        /// </summary>
        /// <value>Relative path to the folder</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "relativePath", EmitDefaultValue = true)]
        public string RelativePath { get; set; }

        /// <summary>
        /// Gets or Sets CreateOn
        /// </summary>
        [DataMember(Name = "createOn", EmitDefaultValue = false)]
        public ApiDateTime CreateOn { get; set; }

        /// <summary>
        /// Specifies whether to encrypt a file or not
        /// </summary>
        /// <value>Specifies whether to encrypt a file or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "encrypted", EmitDefaultValue = true)]
        public bool Encrypted { get; set; }

        /// <summary>
        /// Create new if exists
        /// </summary>
        /// <value>Create new if exists</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "createNewIfExist", EmitDefaultValue = true)]
        public bool CreateNewIfExist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionRequest {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  RelativePath: ").Append(RelativePath).Append("\n");
            sb.Append("  CreateOn: ").Append(CreateOn).Append("\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  CreateNewIfExist: ").Append(CreateNewIfExist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
