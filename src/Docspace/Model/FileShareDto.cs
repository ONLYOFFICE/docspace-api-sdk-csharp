/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Represents file sharing information and access rights
    /// </summary>
    [DataContract(Name = "FileShareDto")]
    public partial class FileShareDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", EmitDefaultValue = false)]
        public FileShare? Access { get; set; }

        /// <summary>
        /// Gets or Sets SubjectType
        /// </summary>
        [DataMember(Name = "subjectType", EmitDefaultValue = false)]
        public SubjectType? SubjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileShareDto" /> class.
        /// </summary>
        /// <param name="access">access.</param>
        /// <param name="sharedTo">A user who has the access to the specified file.</param>
        /// <param name="isLocked">Specifies if the file is locked by this user or not.</param>
        /// <param name="isOwner">Specifies if this user is an owner of the specified file or not.</param>
        /// <param name="canEditAccess">Spceifies if this user can edit the access to the specified file or not.</param>
        /// <param name="subjectType">subjectType.</param>
        public FileShareDto(FileShare? access = default(FileShare?), Object sharedTo = default(Object), bool isLocked = default(bool), bool isOwner = default(bool), bool canEditAccess = default(bool), SubjectType? subjectType = default(SubjectType?))
        {
            this.Access = access;
            this.SharedTo = sharedTo;
            this.IsLocked = isLocked;
            this.IsOwner = isOwner;
            this.CanEditAccess = canEditAccess;
            this.SubjectType = subjectType;
        }

        /// <summary>
        /// A user who has the access to the specified file
        /// </summary>
        /// <value>A user who has the access to the specified file</value>
        /*
        <example>{&quot;int&quot;:1234,&quot;string&quot;:&quot;some text&quot;,&quot;boolean&quot;:true}</example>
        */
        [DataMember(Name = "sharedTo", EmitDefaultValue = true)]
        public Object SharedTo { get; set; }

        /// <summary>
        /// Specifies if the file is locked by this user or not
        /// </summary>
        /// <value>Specifies if the file is locked by this user or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "isLocked", EmitDefaultValue = true)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Specifies if this user is an owner of the specified file or not
        /// </summary>
        /// <value>Specifies if this user is an owner of the specified file or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isOwner", EmitDefaultValue = true)]
        public bool IsOwner { get; set; }

        /// <summary>
        /// Spceifies if this user can edit the access to the specified file or not
        /// </summary>
        /// <value>Spceifies if this user can edit the access to the specified file or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "canEditAccess", EmitDefaultValue = true)]
        public bool CanEditAccess { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileShareDto {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  SharedTo: ").Append(SharedTo).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  CanEditAccess: ").Append(CanEditAccess).Append("\n");
            sb.Append("  SubjectType: ").Append(SubjectType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
