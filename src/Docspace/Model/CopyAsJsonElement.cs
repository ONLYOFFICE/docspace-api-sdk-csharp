/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Parameters for copying a file
    /// </summary>
    [DataContract(Name = "CopyAsJsonElement")]
    public partial class CopyAsJsonElement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CopyAsJsonElement" /> class.
        /// </summary>
        /// <param name="destTitle">Destination file title.</param>
        /// <param name="destFolderId">destFolderId.</param>
        /// <param name="enableExternalExt">Specifies whether to allow the creation of external extension files or not.</param>
        /// <param name="password">Password.</param>
        /// <param name="toForm">Convert to form.</param>
        public CopyAsJsonElement(string destTitle = default(string), BatchRequestDtoDestFolderId destFolderId = default(BatchRequestDtoDestFolderId), bool enableExternalExt = default(bool), string password = default(string), bool toForm = default(bool))
        {
            this.DestTitle = destTitle;
            this.DestFolderId = destFolderId;
            this.EnableExternalExt = enableExternalExt;
            this.Password = password;
            this.ToForm = toForm;
        }

        /// <summary>
        /// Destination file title
        /// </summary>
        /// <value>Destination file title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "destTitle", EmitDefaultValue = true)]
        public string DestTitle { get; set; }

        /// <summary>
        /// Gets or Sets DestFolderId
        /// </summary>
        [DataMember(Name = "destFolderId", EmitDefaultValue = false)]
        public BatchRequestDtoDestFolderId DestFolderId { get; set; }

        /// <summary>
        /// Specifies whether to allow the creation of external extension files or not
        /// </summary>
        /// <value>Specifies whether to allow the creation of external extension files or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enableExternalExt", EmitDefaultValue = true)]
        public bool EnableExternalExt { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        /*
        <example>vfmf2vO1Kp</example>
        */
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Convert to form
        /// </summary>
        /// <value>Convert to form</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "toForm", EmitDefaultValue = true)]
        public bool ToForm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CopyAsJsonElement {\n");
            sb.Append("  DestTitle: ").Append(DestTitle).Append("\n");
            sb.Append("  DestFolderId: ").Append(DestFolderId).Append("\n");
            sb.Append("  EnableExternalExt: ").Append(EnableExternalExt).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ToForm: ").Append(ToForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
