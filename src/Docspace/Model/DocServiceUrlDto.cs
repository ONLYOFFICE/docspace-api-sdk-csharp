/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// DocServiceUrlDto
    /// </summary>
    [DataContract(Name = "DocServiceUrlDto")]
    public partial class DocServiceUrlDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocServiceUrlDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocServiceUrlDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocServiceUrlDto" /> class.
        /// </summary>
        /// <param name="varVersion">Version (required).</param>
        /// <param name="docServiceUrlApi">Doc service url api (required).</param>
        /// <param name="docServiceUrl">Doc service url (required).</param>
        /// <param name="docServiceUrlInternal">Doc service url internal (required).</param>
        /// <param name="docServicePortalUrl">Doc service portal url (required).</param>
        /// <param name="docServiceSignatureHeader">Doc service signature header.</param>
        /// <param name="docServiceSslVerification">Enable SSL verification.</param>
        /// <param name="isDefault">Is default (required).</param>
        public DocServiceUrlDto(string varVersion = default(string), string docServiceUrlApi = default(string), string docServiceUrl = default(string), string docServiceUrlInternal = default(string), string docServicePortalUrl = default(string), string docServiceSignatureHeader = default(string), bool docServiceSslVerification = default(bool), bool isDefault = default(bool))
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for DocServiceUrlDto and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "docServiceUrlApi" is required (not null)
            if (docServiceUrlApi == null)
            {
                throw new ArgumentNullException("docServiceUrlApi is a required property for DocServiceUrlDto and cannot be null");
            }
            this.DocServiceUrlApi = docServiceUrlApi;
            // to ensure "docServiceUrl" is required (not null)
            if (docServiceUrl == null)
            {
                throw new ArgumentNullException("docServiceUrl is a required property for DocServiceUrlDto and cannot be null");
            }
            this.DocServiceUrl = docServiceUrl;
            // to ensure "docServiceUrlInternal" is required (not null)
            if (docServiceUrlInternal == null)
            {
                throw new ArgumentNullException("docServiceUrlInternal is a required property for DocServiceUrlDto and cannot be null");
            }
            this.DocServiceUrlInternal = docServiceUrlInternal;
            // to ensure "docServicePortalUrl" is required (not null)
            if (docServicePortalUrl == null)
            {
                throw new ArgumentNullException("docServicePortalUrl is a required property for DocServiceUrlDto and cannot be null");
            }
            this.DocServicePortalUrl = docServicePortalUrl;
            this.IsDefault = isDefault;
            this.DocServiceSignatureHeader = docServiceSignatureHeader;
            this.DocServiceSslVerification = docServiceSslVerification;
        }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Doc service url api
        /// </summary>
        /// <value>Doc service url api</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "docServiceUrlApi", IsRequired = true, EmitDefaultValue = true)]
        public string DocServiceUrlApi { get; set; }

        /// <summary>
        /// Doc service url
        /// </summary>
        /// <value>Doc service url</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "docServiceUrl", IsRequired = true, EmitDefaultValue = true)]
        public string DocServiceUrl { get; set; }

        /// <summary>
        /// Doc service url internal
        /// </summary>
        /// <value>Doc service url internal</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "docServiceUrlInternal", IsRequired = true, EmitDefaultValue = true)]
        public string DocServiceUrlInternal { get; set; }

        /// <summary>
        /// Doc service portal url
        /// </summary>
        /// <value>Doc service portal url</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "docServicePortalUrl", IsRequired = true, EmitDefaultValue = true)]
        public string DocServicePortalUrl { get; set; }

        /// <summary>
        /// Doc service signature header
        /// </summary>
        /// <value>Doc service signature header</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "docServiceSignatureHeader", EmitDefaultValue = true)]
        public string DocServiceSignatureHeader { get; set; }

        /// <summary>
        /// Enable SSL verification
        /// </summary>
        /// <value>Enable SSL verification</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "docServiceSslVerification", EmitDefaultValue = true)]
        public bool DocServiceSslVerification { get; set; }

        /// <summary>
        /// Is default
        /// </summary>
        /// <value>Is default</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isDefault", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocServiceUrlDto {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  DocServiceUrlApi: ").Append(DocServiceUrlApi).Append("\n");
            sb.Append("  DocServiceUrl: ").Append(DocServiceUrl).Append("\n");
            sb.Append("  DocServiceUrlInternal: ").Append(DocServiceUrlInternal).Append("\n");
            sb.Append("  DocServicePortalUrl: ").Append(DocServicePortalUrl).Append("\n");
            sb.Append("  DocServiceSignatureHeader: ").Append(DocServiceSignatureHeader).Append("\n");
            sb.Append("  DocServiceSslVerification: ").Append(DocServiceSslVerification).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
