/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// InfoConfigDto
    /// </summary>
    [DataContract(Name = "InfoConfigDto")]
    public partial class InfoConfigDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public EditorType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InfoConfigDto" /> class.
        /// </summary>
        /// <param name="favorite">Favorite.</param>
        /// <param name="folder">Folder.</param>
        /// <param name="owner">Owner.</param>
        /// <param name="sharingSettings">Sharing settings.</param>
        /// <param name="type">type.</param>
        /// <param name="uploaded">Uploaded.</param>
        public InfoConfigDto(bool? favorite = default(bool?), string folder = default(string), string owner = default(string), List<AceShortWrapper> sharingSettings = default(List<AceShortWrapper>), EditorType? type = default(EditorType?), string uploaded = default(string))
        {
            this.Favorite = favorite;
            this.Folder = folder;
            this.Owner = owner;
            this.SharingSettings = sharingSettings;
            this.Type = type;
            this.Uploaded = uploaded;
        }

        /// <summary>
        /// Favorite
        /// </summary>
        /// <value>Favorite</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "favorite", EmitDefaultValue = true)]
        public bool? Favorite { get; set; }

        /// <summary>
        /// Folder
        /// </summary>
        /// <value>Folder</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "folder", EmitDefaultValue = true)]
        public string Folder { get; set; }

        /// <summary>
        /// Owner
        /// </summary>
        /// <value>Owner</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "owner", EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Sharing settings
        /// </summary>
        /// <value>Sharing settings</value>
        [DataMember(Name = "sharingSettings", EmitDefaultValue = true)]
        public List<AceShortWrapper> SharingSettings { get; set; }

        /// <summary>
        /// Uploaded
        /// </summary>
        /// <value>Uploaded</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "uploaded", EmitDefaultValue = true)]
        public string Uploaded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InfoConfigDto {\n");
            sb.Append("  Favorite: ").Append(Favorite).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  SharingSettings: ").Append(SharingSettings).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uploaded: ").Append(Uploaded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
