/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// SecurityDto
    /// </summary>
    [DataContract(Name = "SecurityDto")]
    public partial class SecurityDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityDto" /> class.
        /// </summary>
        /// <param name="webItemId">Module ID.</param>
        /// <param name="users">List of users with the access to the module.</param>
        /// <param name="groups">List of groups with the access to the module.</param>
        /// <param name="enabled">Specifies if the security settings are enabled or not.</param>
        /// <param name="isSubItem">Specifies if this module is a subitem or not.</param>
        public SecurityDto(string webItemId = default(string), List<EmployeeDto> users = default(List<EmployeeDto>), List<GroupSummaryDto> groups = default(List<GroupSummaryDto>), bool enabled = default(bool), bool isSubItem = default(bool))
        {
            this.WebItemId = webItemId;
            this.Users = users;
            this.Groups = groups;
            this.Enabled = enabled;
            this.IsSubItem = isSubItem;
        }

        /// <summary>
        /// Module ID
        /// </summary>
        /// <value>Module ID</value>
        /*
        <example>{00000000-0000-0000-0000-000000000000}</example>
        */
        [DataMember(Name = "webItemId", EmitDefaultValue = true)]
        public string WebItemId { get; set; }

        /// <summary>
        /// List of users with the access to the module
        /// </summary>
        /// <value>List of users with the access to the module</value>
        [DataMember(Name = "users", EmitDefaultValue = true)]
        public List<EmployeeDto> Users { get; set; }

        /// <summary>
        /// List of groups with the access to the module
        /// </summary>
        /// <value>List of groups with the access to the module</value>
        [DataMember(Name = "groups", EmitDefaultValue = true)]
        public List<GroupSummaryDto> Groups { get; set; }

        /// <summary>
        /// Specifies if the security settings are enabled or not
        /// </summary>
        /// <value>Specifies if the security settings are enabled or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Specifies if this module is a subitem or not
        /// </summary>
        /// <value>Specifies if this module is a subitem or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "isSubItem", EmitDefaultValue = true)]
        public bool IsSubItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityDto {\n");
            sb.Append("  WebItemId: ").Append(WebItemId).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IsSubItem: ").Append(IsSubItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
