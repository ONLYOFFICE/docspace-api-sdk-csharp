/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// ConfigurationDtoInteger
    /// </summary>
    [DataContract(Name = "ConfigurationDtoInteger")]
    public partial class ConfigurationDtoInteger : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EditorType
        /// </summary>
        [DataMember(Name = "editorType", EmitDefaultValue = false)]
        public EditorType? EditorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationDtoInteger" /> class.
        /// </summary>
        /// <param name="document">document.</param>
        /// <param name="documentType">Document type.</param>
        /// <param name="editorConfig">editorConfig.</param>
        /// <param name="editorType">editorType.</param>
        /// <param name="editorUrl">Editor URL.</param>
        /// <param name="token">Token.</param>
        /// <param name="type">Platform type.</param>
        /// <param name="file">file.</param>
        /// <param name="errorMessage">Error message.</param>
        /// <param name="startFilling">Specifies if the filling has started or not.</param>
        /// <param name="fillingSessionId">Filling session Id.</param>
        public ConfigurationDtoInteger(DocumentConfigDto document = default(DocumentConfigDto), string documentType = default(string), EditorConfigurationDto editorConfig = default(EditorConfigurationDto), EditorType? editorType = default(EditorType?), string editorUrl = default(string), string token = default(string), string type = default(string), FileDtoInteger file = default(FileDtoInteger), string errorMessage = default(string), bool? startFilling = default(bool?), string fillingSessionId = default(string))
        {
            this.Document = document;
            this.DocumentType = documentType;
            this.EditorConfig = editorConfig;
            this.EditorType = editorType;
            this.EditorUrl = editorUrl;
            this.Token = token;
            this.Type = type;
            this.File = file;
            this.ErrorMessage = errorMessage;
            this.StartFilling = startFilling;
            this.FillingSessionId = fillingSessionId;
        }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public DocumentConfigDto Document { get; set; }

        /// <summary>
        /// Document type
        /// </summary>
        /// <value>Document type</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "documentType", EmitDefaultValue = true)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets EditorConfig
        /// </summary>
        [DataMember(Name = "editorConfig", EmitDefaultValue = false)]
        public EditorConfigurationDto EditorConfig { get; set; }

        /// <summary>
        /// Editor URL
        /// </summary>
        /// <value>Editor URL</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "editorUrl", EmitDefaultValue = true)]
        public string EditorUrl { get; set; }

        /// <summary>
        /// Token
        /// </summary>
        /// <value>Token</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Platform type
        /// </summary>
        /// <value>Platform type</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public FileDtoInteger File { get; set; }

        /// <summary>
        /// Error message
        /// </summary>
        /// <value>Error message</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "errorMessage", EmitDefaultValue = true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Specifies if the filling has started or not
        /// </summary>
        /// <value>Specifies if the filling has started or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "startFilling", EmitDefaultValue = true)]
        public bool? StartFilling { get; set; }

        /// <summary>
        /// Filling session Id
        /// </summary>
        /// <value>Filling session Id</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fillingSessionId", EmitDefaultValue = true)]
        public string FillingSessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigurationDtoInteger {\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  EditorConfig: ").Append(EditorConfig).Append("\n");
            sb.Append("  EditorType: ").Append(EditorType).Append("\n");
            sb.Append("  EditorUrl: ").Append(EditorUrl).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  StartFilling: ").Append(StartFilling).Append("\n");
            sb.Append("  FillingSessionId: ").Append(FillingSessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
