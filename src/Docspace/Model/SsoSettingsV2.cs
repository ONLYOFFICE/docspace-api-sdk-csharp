/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// SsoSettingsV2
    /// </summary>
    [DataContract(Name = "SsoSettingsV2")]
    public partial class SsoSettingsV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SsoSettingsV2" /> class.
        /// </summary>
        /// <param name="enableSso">Specifies if SSO is enabled or not.</param>
        /// <param name="idpSettings">idpSettings.</param>
        /// <param name="idpCertificates">List of IDP certificates.</param>
        /// <param name="idpCertificateAdvanced">idpCertificateAdvanced.</param>
        /// <param name="spLoginLabel">SP login label.</param>
        /// <param name="spCertificates">List of SP certificates.</param>
        /// <param name="spCertificateAdvanced">spCertificateAdvanced.</param>
        /// <param name="fieldMapping">fieldMapping.</param>
        /// <param name="hideAuthPage">Specifies if the authentication page will be hidden or not.</param>
        /// <param name="usersType">Users type.</param>
        /// <param name="disableEmailVerification">Specifies if the email verification is disabled or not.</param>
        public SsoSettingsV2(bool? enableSso = default(bool?), SsoIdpSettings idpSettings = default(SsoIdpSettings), List<SsoCertificate> idpCertificates = default(List<SsoCertificate>), SsoIdpCertificateAdvanced idpCertificateAdvanced = default(SsoIdpCertificateAdvanced), string spLoginLabel = default(string), List<SsoCertificate> spCertificates = default(List<SsoCertificate>), SsoSpCertificateAdvanced spCertificateAdvanced = default(SsoSpCertificateAdvanced), SsoFieldMapping fieldMapping = default(SsoFieldMapping), bool hideAuthPage = default(bool), int usersType = default(int), bool disableEmailVerification = default(bool))
        {
            this.EnableSso = enableSso;
            this.IdpSettings = idpSettings;
            this.IdpCertificates = idpCertificates;
            this.IdpCertificateAdvanced = idpCertificateAdvanced;
            this.SpLoginLabel = spLoginLabel;
            this.SpCertificates = spCertificates;
            this.SpCertificateAdvanced = spCertificateAdvanced;
            this.FieldMapping = fieldMapping;
            this.HideAuthPage = hideAuthPage;
            this.UsersType = usersType;
            this.DisableEmailVerification = disableEmailVerification;
        }

        /// <summary>
        /// Specifies if SSO is enabled or not
        /// </summary>
        /// <value>Specifies if SSO is enabled or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enableSso", EmitDefaultValue = true)]
        public bool? EnableSso { get; set; }

        /// <summary>
        /// Gets or Sets IdpSettings
        /// </summary>
        [DataMember(Name = "idpSettings", EmitDefaultValue = false)]
        public SsoIdpSettings IdpSettings { get; set; }

        /// <summary>
        /// List of IDP certificates
        /// </summary>
        /// <value>List of IDP certificates</value>
        [DataMember(Name = "idpCertificates", EmitDefaultValue = true)]
        public List<SsoCertificate> IdpCertificates { get; set; }

        /// <summary>
        /// Gets or Sets IdpCertificateAdvanced
        /// </summary>
        [DataMember(Name = "idpCertificateAdvanced", EmitDefaultValue = false)]
        public SsoIdpCertificateAdvanced IdpCertificateAdvanced { get; set; }

        /// <summary>
        /// SP login label
        /// </summary>
        /// <value>SP login label</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "spLoginLabel", EmitDefaultValue = true)]
        public string SpLoginLabel { get; set; }

        /// <summary>
        /// List of SP certificates
        /// </summary>
        /// <value>List of SP certificates</value>
        [DataMember(Name = "spCertificates", EmitDefaultValue = true)]
        public List<SsoCertificate> SpCertificates { get; set; }

        /// <summary>
        /// Gets or Sets SpCertificateAdvanced
        /// </summary>
        [DataMember(Name = "spCertificateAdvanced", EmitDefaultValue = false)]
        public SsoSpCertificateAdvanced SpCertificateAdvanced { get; set; }

        /// <summary>
        /// Gets or Sets FieldMapping
        /// </summary>
        [DataMember(Name = "fieldMapping", EmitDefaultValue = false)]
        public SsoFieldMapping FieldMapping { get; set; }

        /// <summary>
        /// Specifies if the authentication page will be hidden or not
        /// </summary>
        /// <value>Specifies if the authentication page will be hidden or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hideAuthPage", EmitDefaultValue = true)]
        public bool HideAuthPage { get; set; }

        /// <summary>
        /// Users type
        /// </summary>
        /// <value>Users type</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "usersType", EmitDefaultValue = false)]
        public int UsersType { get; set; }

        /// <summary>
        /// Specifies if the email verification is disabled or not
        /// </summary>
        /// <value>Specifies if the email verification is disabled or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "disableEmailVerification", EmitDefaultValue = true)]
        public bool DisableEmailVerification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SsoSettingsV2 {\n");
            sb.Append("  EnableSso: ").Append(EnableSso).Append("\n");
            sb.Append("  IdpSettings: ").Append(IdpSettings).Append("\n");
            sb.Append("  IdpCertificates: ").Append(IdpCertificates).Append("\n");
            sb.Append("  IdpCertificateAdvanced: ").Append(IdpCertificateAdvanced).Append("\n");
            sb.Append("  SpLoginLabel: ").Append(SpLoginLabel).Append("\n");
            sb.Append("  SpCertificates: ").Append(SpCertificates).Append("\n");
            sb.Append("  SpCertificateAdvanced: ").Append(SpCertificateAdvanced).Append("\n");
            sb.Append("  FieldMapping: ").Append(FieldMapping).Append("\n");
            sb.Append("  HideAuthPage: ").Append(HideAuthPage).Append("\n");
            sb.Append("  UsersType: ").Append(UsersType).Append("\n");
            sb.Append("  DisableEmailVerification: ").Append(DisableEmailVerification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
