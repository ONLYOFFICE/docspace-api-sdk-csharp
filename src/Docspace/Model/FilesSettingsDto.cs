/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// FilesSettingsDto
    /// </summary>
    [DataContract(Name = "FilesSettingsDto")]
    public partial class FilesSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilesSettingsDto" /> class.
        /// </summary>
        /// <param name="extsImagePreviewed">Exts image previewed.</param>
        /// <param name="extsMediaPreviewed">Exts media previewed.</param>
        /// <param name="extsWebPreviewed">Exts web previewed.</param>
        /// <param name="extsWebEdited">Exts web edited.</param>
        /// <param name="extsWebEncrypt">Exts web encrypt.</param>
        /// <param name="extsWebReviewed">Exts web reviewed.</param>
        /// <param name="extsWebCustomFilterEditing">Exts web custom filter editing.</param>
        /// <param name="extsWebRestrictedEditing">Exts web restricted editing.</param>
        /// <param name="extsWebCommented">Exts web commented.</param>
        /// <param name="extsWebTemplate">Exts web template.</param>
        /// <param name="extsCoAuthoring">Exts co authoring.</param>
        /// <param name="extsMustConvert">Exts must convert.</param>
        /// <param name="extsConvertible">Exts convertible.</param>
        /// <param name="extsUploadable">Exts uploadable.</param>
        /// <param name="extsArchive">Exts archive.</param>
        /// <param name="extsVideo">Exts video.</param>
        /// <param name="extsAudio">Exts audio.</param>
        /// <param name="extsImage">Exts image.</param>
        /// <param name="extsSpreadsheet">Exts spreadsheet.</param>
        /// <param name="extsPresentation">Exts presentation.</param>
        /// <param name="extsDocument">Exts document.</param>
        /// <param name="internalFormats">internalFormats.</param>
        /// <param name="masterFormExtension">Master form extension.</param>
        /// <param name="paramVersion">Param version.</param>
        /// <param name="paramOutType">Param out type.</param>
        /// <param name="fileDownloadUrlString">File download url string.</param>
        /// <param name="fileWebViewerUrlString">File web viewer url string.</param>
        /// <param name="fileWebViewerExternalUrlString">File web viewer external url string.</param>
        /// <param name="fileWebEditorUrlString">File web editor url string.</param>
        /// <param name="fileWebEditorExternalUrlString">File web editor external url string.</param>
        /// <param name="fileRedirectPreviewUrlString">File redirect preview url string.</param>
        /// <param name="fileThumbnailUrlString">File thumbnail url string.</param>
        /// <param name="confirmDelete">Confirm delete.</param>
        /// <param name="enableThirdParty">EnableT third party.</param>
        /// <param name="externalShare">External share.</param>
        /// <param name="externalShareSocialMedia">External share social media.</param>
        /// <param name="storeOriginalFiles">Store original files.</param>
        /// <param name="keepNewFileName">Keep new file name.</param>
        /// <param name="displayFileExtension">Display file extension.</param>
        /// <param name="convertNotify">Convert notify.</param>
        /// <param name="hideConfirmCancelOperation">Hide confirm cancel operation.</param>
        /// <param name="hideConfirmConvertSave">HideC confirm convert save.</param>
        /// <param name="hideConfirmConvertOpen">Hide confirm convert open.</param>
        /// <param name="hideConfirmRoomLifetime">Hide confirm room lifetime.</param>
        /// <param name="defaultOrder">defaultOrder.</param>
        /// <param name="forcesave">Forcesave.</param>
        /// <param name="storeForcesave">Store forcesave.</param>
        /// <param name="recentSection">Recent section.</param>
        /// <param name="favoritesSection">Favorites section.</param>
        /// <param name="templatesSection">Templates section.</param>
        /// <param name="downloadTarGz">Download tar gz.</param>
        /// <param name="automaticallyCleanUp">automaticallyCleanUp.</param>
        /// <param name="canSearchByContent">Can search by content.</param>
        /// <param name="defaultSharingAccessRights">Default sharing access rights.</param>
        /// <param name="maxUploadThreadCount">Max upload thread count.</param>
        /// <param name="chunkUploadSize">Chunk upload size.</param>
        /// <param name="openEditorInSameTab">Open editor in same tab.</param>
        public FilesSettingsDto(List<string> extsImagePreviewed = default(List<string>), List<string> extsMediaPreviewed = default(List<string>), List<string> extsWebPreviewed = default(List<string>), List<string> extsWebEdited = default(List<string>), List<string> extsWebEncrypt = default(List<string>), List<string> extsWebReviewed = default(List<string>), List<string> extsWebCustomFilterEditing = default(List<string>), List<string> extsWebRestrictedEditing = default(List<string>), List<string> extsWebCommented = default(List<string>), List<string> extsWebTemplate = default(List<string>), List<string> extsCoAuthoring = default(List<string>), List<string> extsMustConvert = default(List<string>), Dictionary<string, List<string>> extsConvertible = default(Dictionary<string, List<string>>), List<string> extsUploadable = default(List<string>), List<string> extsArchive = default(List<string>), List<string> extsVideo = default(List<string>), List<string> extsAudio = default(List<string>), List<string> extsImage = default(List<string>), List<string> extsSpreadsheet = default(List<string>), List<string> extsPresentation = default(List<string>), List<string> extsDocument = default(List<string>), FilesSettingsDtoInternalFormats internalFormats = default(FilesSettingsDtoInternalFormats), string masterFormExtension = default(string), string paramVersion = default(string), string paramOutType = default(string), string fileDownloadUrlString = default(string), string fileWebViewerUrlString = default(string), string fileWebViewerExternalUrlString = default(string), string fileWebEditorUrlString = default(string), string fileWebEditorExternalUrlString = default(string), string fileRedirectPreviewUrlString = default(string), string fileThumbnailUrlString = default(string), bool confirmDelete = default(bool), bool enableThirdParty = default(bool), bool externalShare = default(bool), bool externalShareSocialMedia = default(bool), bool storeOriginalFiles = default(bool), bool keepNewFileName = default(bool), bool displayFileExtension = default(bool), bool convertNotify = default(bool), bool hideConfirmCancelOperation = default(bool), bool hideConfirmConvertSave = default(bool), bool hideConfirmConvertOpen = default(bool), bool hideConfirmRoomLifetime = default(bool), OrderBy defaultOrder = default(OrderBy), bool forcesave = default(bool), bool storeForcesave = default(bool), bool recentSection = default(bool), bool favoritesSection = default(bool), bool templatesSection = default(bool), bool downloadTarGz = default(bool), AutoCleanUpData automaticallyCleanUp = default(AutoCleanUpData), bool canSearchByContent = default(bool), List<FileShare> defaultSharingAccessRights = default(List<FileShare>), int maxUploadThreadCount = default(int), long chunkUploadSize = default(long), bool openEditorInSameTab = default(bool))
        {
            this.ExtsImagePreviewed = extsImagePreviewed;
            this.ExtsMediaPreviewed = extsMediaPreviewed;
            this.ExtsWebPreviewed = extsWebPreviewed;
            this.ExtsWebEdited = extsWebEdited;
            this.ExtsWebEncrypt = extsWebEncrypt;
            this.ExtsWebReviewed = extsWebReviewed;
            this.ExtsWebCustomFilterEditing = extsWebCustomFilterEditing;
            this.ExtsWebRestrictedEditing = extsWebRestrictedEditing;
            this.ExtsWebCommented = extsWebCommented;
            this.ExtsWebTemplate = extsWebTemplate;
            this.ExtsCoAuthoring = extsCoAuthoring;
            this.ExtsMustConvert = extsMustConvert;
            this.ExtsConvertible = extsConvertible;
            this.ExtsUploadable = extsUploadable;
            this.ExtsArchive = extsArchive;
            this.ExtsVideo = extsVideo;
            this.ExtsAudio = extsAudio;
            this.ExtsImage = extsImage;
            this.ExtsSpreadsheet = extsSpreadsheet;
            this.ExtsPresentation = extsPresentation;
            this.ExtsDocument = extsDocument;
            this.InternalFormats = internalFormats;
            this.MasterFormExtension = masterFormExtension;
            this.ParamVersion = paramVersion;
            this.ParamOutType = paramOutType;
            this.FileDownloadUrlString = fileDownloadUrlString;
            this.FileWebViewerUrlString = fileWebViewerUrlString;
            this.FileWebViewerExternalUrlString = fileWebViewerExternalUrlString;
            this.FileWebEditorUrlString = fileWebEditorUrlString;
            this.FileWebEditorExternalUrlString = fileWebEditorExternalUrlString;
            this.FileRedirectPreviewUrlString = fileRedirectPreviewUrlString;
            this.FileThumbnailUrlString = fileThumbnailUrlString;
            this.ConfirmDelete = confirmDelete;
            this.EnableThirdParty = enableThirdParty;
            this.ExternalShare = externalShare;
            this.ExternalShareSocialMedia = externalShareSocialMedia;
            this.StoreOriginalFiles = storeOriginalFiles;
            this.KeepNewFileName = keepNewFileName;
            this.DisplayFileExtension = displayFileExtension;
            this.ConvertNotify = convertNotify;
            this.HideConfirmCancelOperation = hideConfirmCancelOperation;
            this.HideConfirmConvertSave = hideConfirmConvertSave;
            this.HideConfirmConvertOpen = hideConfirmConvertOpen;
            this.HideConfirmRoomLifetime = hideConfirmRoomLifetime;
            this.DefaultOrder = defaultOrder;
            this.Forcesave = forcesave;
            this.StoreForcesave = storeForcesave;
            this.RecentSection = recentSection;
            this.FavoritesSection = favoritesSection;
            this.TemplatesSection = templatesSection;
            this.DownloadTarGz = downloadTarGz;
            this.AutomaticallyCleanUp = automaticallyCleanUp;
            this.CanSearchByContent = canSearchByContent;
            this.DefaultSharingAccessRights = defaultSharingAccessRights;
            this.MaxUploadThreadCount = maxUploadThreadCount;
            this.ChunkUploadSize = chunkUploadSize;
            this.OpenEditorInSameTab = openEditorInSameTab;
        }

        /// <summary>
        /// Exts image previewed
        /// </summary>
        /// <value>Exts image previewed</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsImagePreviewed", EmitDefaultValue = true)]
        public List<string> ExtsImagePreviewed { get; set; }

        /// <summary>
        /// Exts media previewed
        /// </summary>
        /// <value>Exts media previewed</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsMediaPreviewed", EmitDefaultValue = true)]
        public List<string> ExtsMediaPreviewed { get; set; }

        /// <summary>
        /// Exts web previewed
        /// </summary>
        /// <value>Exts web previewed</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebPreviewed", EmitDefaultValue = true)]
        public List<string> ExtsWebPreviewed { get; set; }

        /// <summary>
        /// Exts web edited
        /// </summary>
        /// <value>Exts web edited</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebEdited", EmitDefaultValue = true)]
        public List<string> ExtsWebEdited { get; set; }

        /// <summary>
        /// Exts web encrypt
        /// </summary>
        /// <value>Exts web encrypt</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebEncrypt", EmitDefaultValue = true)]
        public List<string> ExtsWebEncrypt { get; set; }

        /// <summary>
        /// Exts web reviewed
        /// </summary>
        /// <value>Exts web reviewed</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebReviewed", EmitDefaultValue = true)]
        public List<string> ExtsWebReviewed { get; set; }

        /// <summary>
        /// Exts web custom filter editing
        /// </summary>
        /// <value>Exts web custom filter editing</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebCustomFilterEditing", EmitDefaultValue = true)]
        public List<string> ExtsWebCustomFilterEditing { get; set; }

        /// <summary>
        /// Exts web restricted editing
        /// </summary>
        /// <value>Exts web restricted editing</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebRestrictedEditing", EmitDefaultValue = true)]
        public List<string> ExtsWebRestrictedEditing { get; set; }

        /// <summary>
        /// Exts web commented
        /// </summary>
        /// <value>Exts web commented</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebCommented", EmitDefaultValue = true)]
        public List<string> ExtsWebCommented { get; set; }

        /// <summary>
        /// Exts web template
        /// </summary>
        /// <value>Exts web template</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsWebTemplate", EmitDefaultValue = true)]
        public List<string> ExtsWebTemplate { get; set; }

        /// <summary>
        /// Exts co authoring
        /// </summary>
        /// <value>Exts co authoring</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsCoAuthoring", EmitDefaultValue = true)]
        public List<string> ExtsCoAuthoring { get; set; }

        /// <summary>
        /// Exts must convert
        /// </summary>
        /// <value>Exts must convert</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsMustConvert", EmitDefaultValue = true)]
        public List<string> ExtsMustConvert { get; set; }

        /// <summary>
        /// Exts convertible
        /// </summary>
        /// <value>Exts convertible</value>
        /*
        <example>[{&quot;key&quot;:&quot;some text&quot;,&quot;value&quot;:[&quot;some text&quot;]}]</example>
        */
        [DataMember(Name = "extsConvertible", EmitDefaultValue = true)]
        public Dictionary<string, List<string>> ExtsConvertible { get; set; }

        /// <summary>
        /// Exts uploadable
        /// </summary>
        /// <value>Exts uploadable</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsUploadable", EmitDefaultValue = true)]
        public List<string> ExtsUploadable { get; set; }

        /// <summary>
        /// Exts archive
        /// </summary>
        /// <value>Exts archive</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsArchive", EmitDefaultValue = true)]
        public List<string> ExtsArchive { get; set; }

        /// <summary>
        /// Exts video
        /// </summary>
        /// <value>Exts video</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsVideo", EmitDefaultValue = true)]
        public List<string> ExtsVideo { get; set; }

        /// <summary>
        /// Exts audio
        /// </summary>
        /// <value>Exts audio</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsAudio", EmitDefaultValue = true)]
        public List<string> ExtsAudio { get; set; }

        /// <summary>
        /// Exts image
        /// </summary>
        /// <value>Exts image</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsImage", EmitDefaultValue = true)]
        public List<string> ExtsImage { get; set; }

        /// <summary>
        /// Exts spreadsheet
        /// </summary>
        /// <value>Exts spreadsheet</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsSpreadsheet", EmitDefaultValue = true)]
        public List<string> ExtsSpreadsheet { get; set; }

        /// <summary>
        /// Exts presentation
        /// </summary>
        /// <value>Exts presentation</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsPresentation", EmitDefaultValue = true)]
        public List<string> ExtsPresentation { get; set; }

        /// <summary>
        /// Exts document
        /// </summary>
        /// <value>Exts document</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "extsDocument", EmitDefaultValue = true)]
        public List<string> ExtsDocument { get; set; }

        /// <summary>
        /// Gets or Sets InternalFormats
        /// </summary>
        [DataMember(Name = "internalFormats", EmitDefaultValue = true)]
        public FilesSettingsDtoInternalFormats InternalFormats { get; set; }

        /// <summary>
        /// Master form extension
        /// </summary>
        /// <value>Master form extension</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "masterFormExtension", EmitDefaultValue = true)]
        public string MasterFormExtension { get; set; }

        /// <summary>
        /// Param version
        /// </summary>
        /// <value>Param version</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "paramVersion", EmitDefaultValue = true)]
        public string ParamVersion { get; set; }

        /// <summary>
        /// Param out type
        /// </summary>
        /// <value>Param out type</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "paramOutType", EmitDefaultValue = true)]
        public string ParamOutType { get; set; }

        /// <summary>
        /// File download url string
        /// </summary>
        /// <value>File download url string</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileDownloadUrlString", EmitDefaultValue = true)]
        public string FileDownloadUrlString { get; set; }

        /// <summary>
        /// File web viewer url string
        /// </summary>
        /// <value>File web viewer url string</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileWebViewerUrlString", EmitDefaultValue = true)]
        public string FileWebViewerUrlString { get; set; }

        /// <summary>
        /// File web viewer external url string
        /// </summary>
        /// <value>File web viewer external url string</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileWebViewerExternalUrlString", EmitDefaultValue = true)]
        public string FileWebViewerExternalUrlString { get; set; }

        /// <summary>
        /// File web editor url string
        /// </summary>
        /// <value>File web editor url string</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileWebEditorUrlString", EmitDefaultValue = true)]
        public string FileWebEditorUrlString { get; set; }

        /// <summary>
        /// File web editor external url string
        /// </summary>
        /// <value>File web editor external url string</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileWebEditorExternalUrlString", EmitDefaultValue = true)]
        public string FileWebEditorExternalUrlString { get; set; }

        /// <summary>
        /// File redirect preview url string
        /// </summary>
        /// <value>File redirect preview url string</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileRedirectPreviewUrlString", EmitDefaultValue = true)]
        public string FileRedirectPreviewUrlString { get; set; }

        /// <summary>
        /// File thumbnail url string
        /// </summary>
        /// <value>File thumbnail url string</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileThumbnailUrlString", EmitDefaultValue = true)]
        public string FileThumbnailUrlString { get; set; }

        /// <summary>
        /// Confirm delete
        /// </summary>
        /// <value>Confirm delete</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "confirmDelete", EmitDefaultValue = true)]
        public bool ConfirmDelete { get; set; }

        /// <summary>
        /// EnableT third party
        /// </summary>
        /// <value>EnableT third party</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enableThirdParty", EmitDefaultValue = true)]
        public bool EnableThirdParty { get; set; }

        /// <summary>
        /// External share
        /// </summary>
        /// <value>External share</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "externalShare", EmitDefaultValue = true)]
        public bool ExternalShare { get; set; }

        /// <summary>
        /// External share social media
        /// </summary>
        /// <value>External share social media</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "externalShareSocialMedia", EmitDefaultValue = true)]
        public bool ExternalShareSocialMedia { get; set; }

        /// <summary>
        /// Store original files
        /// </summary>
        /// <value>Store original files</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "storeOriginalFiles", EmitDefaultValue = true)]
        public bool StoreOriginalFiles { get; set; }

        /// <summary>
        /// Keep new file name
        /// </summary>
        /// <value>Keep new file name</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "keepNewFileName", EmitDefaultValue = true)]
        public bool KeepNewFileName { get; set; }

        /// <summary>
        /// Display file extension
        /// </summary>
        /// <value>Display file extension</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "displayFileExtension", EmitDefaultValue = true)]
        public bool DisplayFileExtension { get; set; }

        /// <summary>
        /// Convert notify
        /// </summary>
        /// <value>Convert notify</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "convertNotify", EmitDefaultValue = true)]
        public bool ConvertNotify { get; set; }

        /// <summary>
        /// Hide confirm cancel operation
        /// </summary>
        /// <value>Hide confirm cancel operation</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hideConfirmCancelOperation", EmitDefaultValue = true)]
        public bool HideConfirmCancelOperation { get; set; }

        /// <summary>
        /// HideC confirm convert save
        /// </summary>
        /// <value>HideC confirm convert save</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hideConfirmConvertSave", EmitDefaultValue = true)]
        public bool HideConfirmConvertSave { get; set; }

        /// <summary>
        /// Hide confirm convert open
        /// </summary>
        /// <value>Hide confirm convert open</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hideConfirmConvertOpen", EmitDefaultValue = true)]
        public bool HideConfirmConvertOpen { get; set; }

        /// <summary>
        /// Hide confirm room lifetime
        /// </summary>
        /// <value>Hide confirm room lifetime</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hideConfirmRoomLifetime", EmitDefaultValue = true)]
        public bool HideConfirmRoomLifetime { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOrder
        /// </summary>
        [DataMember(Name = "defaultOrder", EmitDefaultValue = false)]
        public OrderBy DefaultOrder { get; set; }

        /// <summary>
        /// Forcesave
        /// </summary>
        /// <value>Forcesave</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "forcesave", EmitDefaultValue = true)]
        public bool Forcesave { get; set; }

        /// <summary>
        /// Store forcesave
        /// </summary>
        /// <value>Store forcesave</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "storeForcesave", EmitDefaultValue = true)]
        public bool StoreForcesave { get; set; }

        /// <summary>
        /// Recent section
        /// </summary>
        /// <value>Recent section</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "recentSection", EmitDefaultValue = true)]
        public bool RecentSection { get; set; }

        /// <summary>
        /// Favorites section
        /// </summary>
        /// <value>Favorites section</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "favoritesSection", EmitDefaultValue = true)]
        public bool FavoritesSection { get; set; }

        /// <summary>
        /// Templates section
        /// </summary>
        /// <value>Templates section</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "templatesSection", EmitDefaultValue = true)]
        public bool TemplatesSection { get; set; }

        /// <summary>
        /// Download tar gz
        /// </summary>
        /// <value>Download tar gz</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "downloadTarGz", EmitDefaultValue = true)]
        public bool DownloadTarGz { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticallyCleanUp
        /// </summary>
        [DataMember(Name = "automaticallyCleanUp", EmitDefaultValue = false)]
        public AutoCleanUpData AutomaticallyCleanUp { get; set; }

        /// <summary>
        /// Can search by content
        /// </summary>
        /// <value>Can search by content</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "canSearchByContent", EmitDefaultValue = true)]
        public bool CanSearchByContent { get; set; }

        /// <summary>
        /// Default sharing access rights
        /// </summary>
        /// <value>Default sharing access rights</value>
        /*
        <example>[0]</example>
        */
        [DataMember(Name = "defaultSharingAccessRights", EmitDefaultValue = true)]
        public List<FileShare> DefaultSharingAccessRights { get; set; }

        /// <summary>
        /// Max upload thread count
        /// </summary>
        /// <value>Max upload thread count</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "maxUploadThreadCount", EmitDefaultValue = false)]
        public int MaxUploadThreadCount { get; set; }

        /// <summary>
        /// Chunk upload size
        /// </summary>
        /// <value>Chunk upload size</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "chunkUploadSize", EmitDefaultValue = false)]
        public long ChunkUploadSize { get; set; }

        /// <summary>
        /// Open editor in same tab
        /// </summary>
        /// <value>Open editor in same tab</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "openEditorInSameTab", EmitDefaultValue = true)]
        public bool OpenEditorInSameTab { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilesSettingsDto {\n");
            sb.Append("  ExtsImagePreviewed: ").Append(ExtsImagePreviewed).Append("\n");
            sb.Append("  ExtsMediaPreviewed: ").Append(ExtsMediaPreviewed).Append("\n");
            sb.Append("  ExtsWebPreviewed: ").Append(ExtsWebPreviewed).Append("\n");
            sb.Append("  ExtsWebEdited: ").Append(ExtsWebEdited).Append("\n");
            sb.Append("  ExtsWebEncrypt: ").Append(ExtsWebEncrypt).Append("\n");
            sb.Append("  ExtsWebReviewed: ").Append(ExtsWebReviewed).Append("\n");
            sb.Append("  ExtsWebCustomFilterEditing: ").Append(ExtsWebCustomFilterEditing).Append("\n");
            sb.Append("  ExtsWebRestrictedEditing: ").Append(ExtsWebRestrictedEditing).Append("\n");
            sb.Append("  ExtsWebCommented: ").Append(ExtsWebCommented).Append("\n");
            sb.Append("  ExtsWebTemplate: ").Append(ExtsWebTemplate).Append("\n");
            sb.Append("  ExtsCoAuthoring: ").Append(ExtsCoAuthoring).Append("\n");
            sb.Append("  ExtsMustConvert: ").Append(ExtsMustConvert).Append("\n");
            sb.Append("  ExtsConvertible: ").Append(ExtsConvertible).Append("\n");
            sb.Append("  ExtsUploadable: ").Append(ExtsUploadable).Append("\n");
            sb.Append("  ExtsArchive: ").Append(ExtsArchive).Append("\n");
            sb.Append("  ExtsVideo: ").Append(ExtsVideo).Append("\n");
            sb.Append("  ExtsAudio: ").Append(ExtsAudio).Append("\n");
            sb.Append("  ExtsImage: ").Append(ExtsImage).Append("\n");
            sb.Append("  ExtsSpreadsheet: ").Append(ExtsSpreadsheet).Append("\n");
            sb.Append("  ExtsPresentation: ").Append(ExtsPresentation).Append("\n");
            sb.Append("  ExtsDocument: ").Append(ExtsDocument).Append("\n");
            sb.Append("  InternalFormats: ").Append(InternalFormats).Append("\n");
            sb.Append("  MasterFormExtension: ").Append(MasterFormExtension).Append("\n");
            sb.Append("  ParamVersion: ").Append(ParamVersion).Append("\n");
            sb.Append("  ParamOutType: ").Append(ParamOutType).Append("\n");
            sb.Append("  FileDownloadUrlString: ").Append(FileDownloadUrlString).Append("\n");
            sb.Append("  FileWebViewerUrlString: ").Append(FileWebViewerUrlString).Append("\n");
            sb.Append("  FileWebViewerExternalUrlString: ").Append(FileWebViewerExternalUrlString).Append("\n");
            sb.Append("  FileWebEditorUrlString: ").Append(FileWebEditorUrlString).Append("\n");
            sb.Append("  FileWebEditorExternalUrlString: ").Append(FileWebEditorExternalUrlString).Append("\n");
            sb.Append("  FileRedirectPreviewUrlString: ").Append(FileRedirectPreviewUrlString).Append("\n");
            sb.Append("  FileThumbnailUrlString: ").Append(FileThumbnailUrlString).Append("\n");
            sb.Append("  ConfirmDelete: ").Append(ConfirmDelete).Append("\n");
            sb.Append("  EnableThirdParty: ").Append(EnableThirdParty).Append("\n");
            sb.Append("  ExternalShare: ").Append(ExternalShare).Append("\n");
            sb.Append("  ExternalShareSocialMedia: ").Append(ExternalShareSocialMedia).Append("\n");
            sb.Append("  StoreOriginalFiles: ").Append(StoreOriginalFiles).Append("\n");
            sb.Append("  KeepNewFileName: ").Append(KeepNewFileName).Append("\n");
            sb.Append("  DisplayFileExtension: ").Append(DisplayFileExtension).Append("\n");
            sb.Append("  ConvertNotify: ").Append(ConvertNotify).Append("\n");
            sb.Append("  HideConfirmCancelOperation: ").Append(HideConfirmCancelOperation).Append("\n");
            sb.Append("  HideConfirmConvertSave: ").Append(HideConfirmConvertSave).Append("\n");
            sb.Append("  HideConfirmConvertOpen: ").Append(HideConfirmConvertOpen).Append("\n");
            sb.Append("  HideConfirmRoomLifetime: ").Append(HideConfirmRoomLifetime).Append("\n");
            sb.Append("  DefaultOrder: ").Append(DefaultOrder).Append("\n");
            sb.Append("  Forcesave: ").Append(Forcesave).Append("\n");
            sb.Append("  StoreForcesave: ").Append(StoreForcesave).Append("\n");
            sb.Append("  RecentSection: ").Append(RecentSection).Append("\n");
            sb.Append("  FavoritesSection: ").Append(FavoritesSection).Append("\n");
            sb.Append("  TemplatesSection: ").Append(TemplatesSection).Append("\n");
            sb.Append("  DownloadTarGz: ").Append(DownloadTarGz).Append("\n");
            sb.Append("  AutomaticallyCleanUp: ").Append(AutomaticallyCleanUp).Append("\n");
            sb.Append("  CanSearchByContent: ").Append(CanSearchByContent).Append("\n");
            sb.Append("  DefaultSharingAccessRights: ").Append(DefaultSharingAccessRights).Append("\n");
            sb.Append("  MaxUploadThreadCount: ").Append(MaxUploadThreadCount).Append("\n");
            sb.Append("  ChunkUploadSize: ").Append(ChunkUploadSize).Append("\n");
            sb.Append("  OpenEditorInSameTab: ").Append(OpenEditorInSameTab).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
