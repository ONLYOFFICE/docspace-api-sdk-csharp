/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Parameters for creating a room
    /// </summary>
    [DataContract(Name = "CreateThirdPartyRoom")]
    public partial class CreateThirdPartyRoom : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RoomType
        /// </summary>
        [DataMember(Name = "roomType", EmitDefaultValue = false)]
        public RoomType? RoomType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateThirdPartyRoom" /> class.
        /// </summary>
        /// <param name="createAsNewFolder">Create as new folder.</param>
        /// <param name="title">Room name.</param>
        /// <param name="roomType">roomType.</param>
        /// <param name="varPrivate">Private.</param>
        /// <param name="indexing">Indexing.</param>
        /// <param name="denyDownload">Deny download.</param>
        /// <param name="color">Color.</param>
        /// <param name="cover">Cover.</param>
        /// <param name="tags">Tags.</param>
        /// <param name="logo">logo.</param>
        public CreateThirdPartyRoom(bool createAsNewFolder = default(bool), string title = default(string), RoomType? roomType = default(RoomType?), bool varPrivate = default(bool), bool indexing = default(bool), bool denyDownload = default(bool), string color = default(string), string cover = default(string), List<string> tags = default(List<string>), LogoRequest logo = default(LogoRequest))
        {
            this.CreateAsNewFolder = createAsNewFolder;
            this.Title = title;
            this.RoomType = roomType;
            this.Private = varPrivate;
            this.Indexing = indexing;
            this.DenyDownload = denyDownload;
            this.Color = color;
            this.Cover = cover;
            this.Tags = tags;
            this.Logo = logo;
        }

        /// <summary>
        /// Create as new folder
        /// </summary>
        /// <value>Create as new folder</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "createAsNewFolder", EmitDefaultValue = true)]
        public bool CreateAsNewFolder { get; set; }

        /// <summary>
        /// Room name
        /// </summary>
        /// <value>Room name</value>
        /*
        <example>legacy_1080p_small_wooden_mouse</example>
        */
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Private
        /// </summary>
        /// <value>Private</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }

        /// <summary>
        /// Indexing
        /// </summary>
        /// <value>Indexing</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "indexing", EmitDefaultValue = true)]
        public bool Indexing { get; set; }

        /// <summary>
        /// Deny download
        /// </summary>
        /// <value>Deny download</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "denyDownload", EmitDefaultValue = true)]
        public bool DenyDownload { get; set; }

        /// <summary>
        /// Color
        /// </summary>
        /// <value>Color</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "color", EmitDefaultValue = true)]
        public string Color { get; set; }

        /// <summary>
        /// Cover
        /// </summary>
        /// <value>Cover</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "cover", EmitDefaultValue = true)]
        public string Cover { get; set; }

        /// <summary>
        /// Tags
        /// </summary>
        /// <value>Tags</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public LogoRequest Logo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateThirdPartyRoom {\n");
            sb.Append("  CreateAsNewFolder: ").Append(CreateAsNewFolder).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  RoomType: ").Append(RoomType).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Indexing: ").Append(Indexing).Append("\n");
            sb.Append("  DenyDownload: ").Append(DenyDownload).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Cover: ").Append(Cover).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
