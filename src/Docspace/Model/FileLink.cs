/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// The file link properties.
    /// </summary>
    [DataContract(Name = "FileLink")]
    public partial class FileLink : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileLink" /> class.
        /// </summary>
        /// <param name="filetype">The type of the file for the source viewed or edited document..</param>
        /// <param name="token">The encrypted signature added to the config in the form of a token..</param>
        /// <param name="url">The absolute URL where the source viewed or edited document is stored..</param>
        public FileLink(string filetype = default(string), string token = default(string), string url = default(string))
        {
            this.Filetype = filetype;
            this.Token = token;
            this.Url = url;
        }

        /// <summary>
        /// The type of the file for the source viewed or edited document.
        /// </summary>
        /// <value>The type of the file for the source viewed or edited document.</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "filetype", EmitDefaultValue = true)]
        public string Filetype { get; set; }

        /// <summary>
        /// The encrypted signature added to the config in the form of a token.
        /// </summary>
        /// <value>The encrypted signature added to the config in the form of a token.</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// The absolute URL where the source viewed or edited document is stored.
        /// </summary>
        /// <value>The absolute URL where the source viewed or edited document is stored.</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileLink {\n");
            sb.Append("  Filetype: ").Append(Filetype).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
