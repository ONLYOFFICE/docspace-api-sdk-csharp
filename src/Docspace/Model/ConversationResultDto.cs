/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Result of file conversation operation.
    /// </summary>
    [DataContract(Name = "ConversationResultDto")]
    public partial class ConversationResultDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name = "Operation", EmitDefaultValue = false)]
        public FileOperationType? Operation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationResultDto" /> class.
        /// </summary>
        /// <param name="id">Operation ID.</param>
        /// <param name="operation">operation.</param>
        /// <param name="progress">Operation progress.</param>
        /// <param name="source">Source file.</param>
        /// <param name="result">Resulting file.</param>
        /// <param name="error">Error.</param>
        /// <param name="processed">Specifies if the operation is processed or not.</param>
        public ConversationResultDto(string id = default(string), FileOperationType? operation = default(FileOperationType?), int progress = default(int), string source = default(string), Object result = default(Object), string error = default(string), string processed = default(string))
        {
            this.Id = id;
            this.Operation = operation;
            this.Progress = progress;
            this.Source = source;
            this.Result = result;
            this.Error = error;
            this.Processed = processed;
        }

        /// <summary>
        /// Operation ID
        /// </summary>
        /// <value>Operation ID</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Operation progress
        /// </summary>
        /// <value>Operation progress</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "progress", EmitDefaultValue = false)]
        public int Progress { get; set; }

        /// <summary>
        /// Source file
        /// </summary>
        /// <value>Source file</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Resulting file
        /// </summary>
        /// <value>Resulting file</value>
        /*
        <example>{&quot;int&quot;:1234,&quot;string&quot;:&quot;some text&quot;,&quot;boolean&quot;:true}</example>
        */
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public Object Result { get; set; }

        /// <summary>
        /// Error
        /// </summary>
        /// <value>Error</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Specifies if the operation is processed or not
        /// </summary>
        /// <value>Specifies if the operation is processed or not</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "processed", EmitDefaultValue = true)]
        public string Processed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversationResultDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
