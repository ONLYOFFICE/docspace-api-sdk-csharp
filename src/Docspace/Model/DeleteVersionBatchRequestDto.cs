/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// The request parameters for deleting file versions.
    /// </summary>
    [DataContract(Name = "DeleteVersionBatchRequestDto")]
    public partial class DeleteVersionBatchRequestDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteVersionBatchRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeleteVersionBatchRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteVersionBatchRequestDto" /> class.
        /// </summary>
        /// <param name="deleteAfter">Specifies whether to delete a file after the editing session is finished or not..</param>
        /// <param name="fileId">The file ID to delete. (required).</param>
        /// <param name="versions">The collection of file versions to be deleted. (required).</param>
        public DeleteVersionBatchRequestDto(bool deleteAfter = default(bool), int fileId = default(int), List<int> versions = default(List<int>))
        {
            this.FileId = fileId;
            // to ensure "versions" is required (not null)
            if (versions == null)
            {
                throw new ArgumentNullException("versions is a required property for DeleteVersionBatchRequestDto and cannot be null");
            }
            this.Versions = versions;
            this.DeleteAfter = deleteAfter;
        }

        /// <summary>
        /// Specifies whether to delete a file after the editing session is finished or not.
        /// </summary>
        /// <value>Specifies whether to delete a file after the editing session is finished or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "deleteAfter", EmitDefaultValue = true)]
        public bool DeleteAfter { get; set; }

        /// <summary>
        /// The file ID to delete.
        /// </summary>
        /// <value>The file ID to delete.</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "fileId", IsRequired = true, EmitDefaultValue = true)]
        public int FileId { get; set; }

        /// <summary>
        /// The collection of file versions to be deleted.
        /// </summary>
        /// <value>The collection of file versions to be deleted.</value>
        /*
        <example>[1234]</example>
        */
        [DataMember(Name = "versions", IsRequired = true, EmitDefaultValue = true)]
        public List<int> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteVersionBatchRequestDto {\n");
            sb.Append("  DeleteAfter: ").Append(DeleteAfter).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
