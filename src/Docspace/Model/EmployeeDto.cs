/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// EmployeeDto
    /// </summary>
    [DataContract(Name = "EmployeeDto")]
    public partial class EmployeeDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeDto" /> class.
        /// </summary>
        /// <param name="id">ID.</param>
        /// <param name="displayName">Display name.</param>
        /// <param name="title">Title.</param>
        /// <param name="avatar">Avatar.</param>
        /// <param name="avatarOriginal">Original size avatar.</param>
        /// <param name="avatarMax">Maximum size avatar.</param>
        /// <param name="avatarMedium">Medium size avatar.</param>
        /// <param name="avatarSmall">Small avatar.</param>
        /// <param name="profileUrl">Profile URL.</param>
        /// <param name="hasAvatar">Specifies if the user has an avatar or not.</param>
        /// <param name="isAnonim">Specifies if the user is an anonim or not.</param>
        public EmployeeDto(Guid id = default(Guid), string displayName = default(string), string title = default(string), string avatar = default(string), string avatarOriginal = default(string), string avatarMax = default(string), string avatarMedium = default(string), string avatarSmall = default(string), string profileUrl = default(string), bool hasAvatar = default(bool), bool isAnonim = default(bool))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.Title = title;
            this.Avatar = avatar;
            this.AvatarOriginal = avatarOriginal;
            this.AvatarMax = avatarMax;
            this.AvatarMedium = avatarMedium;
            this.AvatarSmall = avatarSmall;
            this.ProfileUrl = profileUrl;
            this.HasAvatar = hasAvatar;
            this.IsAnonim = isAnonim;
        }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        /*
        <example>Mike Zanyatski</example>
        */
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        /*
        <example>Manager</example>
        */
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Avatar
        /// </summary>
        /// <value>Avatar</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "avatar", EmitDefaultValue = true)]
        public string Avatar { get; set; }

        /// <summary>
        /// Original size avatar
        /// </summary>
        /// <value>Original size avatar</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "avatarOriginal", EmitDefaultValue = true)]
        public string AvatarOriginal { get; set; }

        /// <summary>
        /// Maximum size avatar
        /// </summary>
        /// <value>Maximum size avatar</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "avatarMax", EmitDefaultValue = true)]
        public string AvatarMax { get; set; }

        /// <summary>
        /// Medium size avatar
        /// </summary>
        /// <value>Medium size avatar</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "avatarMedium", EmitDefaultValue = true)]
        public string AvatarMedium { get; set; }

        /// <summary>
        /// Small avatar
        /// </summary>
        /// <value>Small avatar</value>
        /*
        <example>url to small avatar</example>
        */
        [DataMember(Name = "avatarSmall", EmitDefaultValue = true)]
        public string AvatarSmall { get; set; }

        /// <summary>
        /// Profile URL
        /// </summary>
        /// <value>Profile URL</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "profileUrl", EmitDefaultValue = true)]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// Specifies if the user has an avatar or not
        /// </summary>
        /// <value>Specifies if the user has an avatar or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hasAvatar", EmitDefaultValue = true)]
        public bool HasAvatar { get; set; }

        /// <summary>
        /// Specifies if the user is an anonim or not
        /// </summary>
        /// <value>Specifies if the user is an anonim or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isAnonim", EmitDefaultValue = true)]
        public bool IsAnonim { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmployeeDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  AvatarOriginal: ").Append(AvatarOriginal).Append("\n");
            sb.Append("  AvatarMax: ").Append(AvatarMax).Append("\n");
            sb.Append("  AvatarMedium: ").Append(AvatarMedium).Append("\n");
            sb.Append("  AvatarSmall: ").Append(AvatarSmall).Append("\n");
            sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
            sb.Append("  HasAvatar: ").Append(HasAvatar).Append("\n");
            sb.Append("  IsAnonim: ").Append(IsAnonim).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
