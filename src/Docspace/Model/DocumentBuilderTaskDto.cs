/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// DocumentBuilderTaskDto
    /// </summary>
    [DataContract(Name = "DocumentBuilderTaskDto")]
    public partial class DocumentBuilderTaskDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public DistributedTaskStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentBuilderTaskDto" /> class.
        /// </summary>
        /// <param name="id">Id.</param>
        /// <param name="error">Error.</param>
        /// <param name="percentage">Percentage.</param>
        /// <param name="isCompleted">Is completed.</param>
        /// <param name="status">status.</param>
        /// <param name="resultFileId">Result file id.</param>
        /// <param name="resultFileName">Result file name.</param>
        /// <param name="resultFileUrl">Result file url.</param>
        public DocumentBuilderTaskDto(string id = default(string), string error = default(string), int percentage = default(int), bool isCompleted = default(bool), DistributedTaskStatus? status = default(DistributedTaskStatus?), Object resultFileId = default(Object), string resultFileName = default(string), string resultFileUrl = default(string))
        {
            this.Id = id;
            this.Error = error;
            this.Percentage = percentage;
            this.IsCompleted = isCompleted;
            this.Status = status;
            this.ResultFileId = resultFileId;
            this.ResultFileName = resultFileName;
            this.ResultFileUrl = resultFileUrl;
        }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Error
        /// </summary>
        /// <value>Error</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Percentage
        /// </summary>
        /// <value>Percentage</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        public int Percentage { get; set; }

        /// <summary>
        /// Is completed
        /// </summary>
        /// <value>Is completed</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isCompleted", EmitDefaultValue = true)]
        public bool IsCompleted { get; set; }

        /// <summary>
        /// Result file id
        /// </summary>
        /// <value>Result file id</value>
        /*
        <example>{&quot;int&quot;:1234,&quot;string&quot;:&quot;some text&quot;,&quot;boolean&quot;:true}</example>
        */
        [DataMember(Name = "resultFileId", EmitDefaultValue = true)]
        public Object ResultFileId { get; set; }

        /// <summary>
        /// Result file name
        /// </summary>
        /// <value>Result file name</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "resultFileName", EmitDefaultValue = true)]
        public string ResultFileName { get; set; }

        /// <summary>
        /// Result file url
        /// </summary>
        /// <value>Result file url</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "resultFileUrl", EmitDefaultValue = true)]
        public string ResultFileUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentBuilderTaskDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  IsCompleted: ").Append(IsCompleted).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ResultFileId: ").Append(ResultFileId).Append("\n");
            sb.Append("  ResultFileName: ").Append(ResultFileName).Append("\n");
            sb.Append("  ResultFileUrl: ").Append(ResultFileUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
