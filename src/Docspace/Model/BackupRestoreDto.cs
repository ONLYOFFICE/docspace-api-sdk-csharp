/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// The backup restoring parameters.
    /// </summary>
    [DataContract(Name = "BackupRestoreDto")]
    public partial class BackupRestoreDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StorageType
        /// </summary>
        [DataMember(Name = "storageType", EmitDefaultValue = false)]
        public BackupStorageType? StorageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackupRestoreDto" /> class.
        /// </summary>
        /// <param name="backupId">The backup ID..</param>
        /// <param name="storageType">storageType.</param>
        /// <param name="storageParams">The backup storage parameters..</param>
        /// <param name="notify">Notifies users about the portal restoring process or not..</param>
        /// <param name="dump">Specifies if a dump will be created or not..</param>
        public BackupRestoreDto(string backupId = default(string), BackupStorageType? storageType = default(BackupStorageType?), List<ItemKeyValuePairObjectObject> storageParams = default(List<ItemKeyValuePairObjectObject>), bool notify = default(bool), bool dump = default(bool))
        {
            this.BackupId = backupId;
            this.StorageType = storageType;
            this.StorageParams = storageParams;
            this.Notify = notify;
            this.Dump = dump;
        }

        /// <summary>
        /// The backup ID.
        /// </summary>
        /// <value>The backup ID.</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "backupId", EmitDefaultValue = true)]
        public string BackupId { get; set; }

        /// <summary>
        /// The backup storage parameters.
        /// </summary>
        /// <value>The backup storage parameters.</value>
        [DataMember(Name = "storageParams", EmitDefaultValue = true)]
        public List<ItemKeyValuePairObjectObject> StorageParams { get; set; }

        /// <summary>
        /// Notifies users about the portal restoring process or not.
        /// </summary>
        /// <value>Notifies users about the portal restoring process or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "notify", EmitDefaultValue = true)]
        public bool Notify { get; set; }

        /// <summary>
        /// Specifies if a dump will be created or not.
        /// </summary>
        /// <value>Specifies if a dump will be created or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "dump", EmitDefaultValue = true)]
        public bool Dump { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BackupRestoreDto {\n");
            sb.Append("  BackupId: ").Append(BackupId).Append("\n");
            sb.Append("  StorageType: ").Append(StorageType).Append("\n");
            sb.Append("  StorageParams: ").Append(StorageParams).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  Dump: ").Append(Dump).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
