/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// SsoCertificate
    /// </summary>
    [DataContract(Name = "SsoCertificate")]
    public partial class SsoCertificate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SsoCertificate" /> class.
        /// </summary>
        /// <param name="selfSigned">Specifies if a certificate is self-signed or not.</param>
        /// <param name="crt">Certificate.</param>
        /// <param name="key">Key.</param>
        /// <param name="action">Action.</param>
        /// <param name="domainName">Domain name.</param>
        /// <param name="startDate">Start date.</param>
        /// <param name="expiredDate">Expiration date.</param>
        public SsoCertificate(bool selfSigned = default(bool), string crt = default(string), string key = default(string), string action = default(string), string domainName = default(string), DateTime startDate = default(DateTime), DateTime expiredDate = default(DateTime))
        {
            this.SelfSigned = selfSigned;
            this.Crt = crt;
            this.Key = key;
            this.Action = action;
            this.DomainName = domainName;
            this.StartDate = startDate;
            this.ExpiredDate = expiredDate;
        }

        /// <summary>
        /// Specifies if a certificate is self-signed or not
        /// </summary>
        /// <value>Specifies if a certificate is self-signed or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "selfSigned", EmitDefaultValue = true)]
        public bool SelfSigned { get; set; }

        /// <summary>
        /// Certificate
        /// </summary>
        /// <value>Certificate</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "crt", EmitDefaultValue = true)]
        public string Crt { get; set; }

        /// <summary>
        /// Key
        /// </summary>
        /// <value>Key</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Action
        /// </summary>
        /// <value>Action</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Domain name
        /// </summary>
        /// <value>Domain name</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "domainName", EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        /*
        <example>2008-04-10T06:30+04:00</example>
        */
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Expiration date
        /// </summary>
        /// <value>Expiration date</value>
        /*
        <example>2008-04-10T06:30+04:00</example>
        */
        [DataMember(Name = "expiredDate", EmitDefaultValue = false)]
        public DateTime ExpiredDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SsoCertificate {\n");
            sb.Append("  SelfSigned: ").Append(SelfSigned).Append("\n");
            sb.Append("  Crt: ").Append(Crt).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpiredDate: ").Append(ExpiredDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
