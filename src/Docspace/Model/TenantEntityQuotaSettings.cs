/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// The tenant entity quota settings.
    /// </summary>
    [DataContract(Name = "TenantEntityQuotaSettings")]
    public partial class TenantEntityQuotaSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantEntityQuotaSettings" /> class.
        /// </summary>
        /// <param name="enableQuota">Specifies if the quota is enabled for the tenant entity or not..</param>
        /// <param name="defaultQuota">The default quota of the tenant entity..</param>
        /// <param name="lastRecalculateDate">The date of the last quota recalculation..</param>
        public TenantEntityQuotaSettings(bool enableQuota = default(bool), long defaultQuota = default(long), DateTime? lastRecalculateDate = default(DateTime?))
        {
            this.EnableQuota = enableQuota;
            this.DefaultQuota = defaultQuota;
            this.LastRecalculateDate = lastRecalculateDate;
        }

        /// <summary>
        /// Specifies if the quota is enabled for the tenant entity or not.
        /// </summary>
        /// <value>Specifies if the quota is enabled for the tenant entity or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enableQuota", EmitDefaultValue = true)]
        public bool EnableQuota { get; set; }

        /// <summary>
        /// The default quota of the tenant entity.
        /// </summary>
        /// <value>The default quota of the tenant entity.</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "defaultQuota", EmitDefaultValue = false)]
        public long DefaultQuota { get; set; }

        /// <summary>
        /// The date of the last quota recalculation.
        /// </summary>
        /// <value>The date of the last quota recalculation.</value>
        /*
        <example>2008-04-10T06:30+04:00</example>
        */
        [DataMember(Name = "lastRecalculateDate", EmitDefaultValue = true)]
        public DateTime? LastRecalculateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TenantEntityQuotaSettings {\n");
            sb.Append("  EnableQuota: ").Append(EnableQuota).Append("\n");
            sb.Append("  DefaultQuota: ").Append(DefaultQuota).Append("\n");
            sb.Append("  LastRecalculateDate: ").Append(LastRecalculateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
