/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// The text run parameters.
    /// </summary>
    [DataContract(Name = "Run")]
    public partial class Run : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Run" /> class.
        /// </summary>
        /// <param name="fill">The fill color of the text run in RGB format..</param>
        /// <param name="text">The run text..</param>
        /// <param name="fontSize">The font size of the text run in points..</param>
        public Run(List<int> fill = default(List<int>), string text = default(string), string fontSize = default(string))
        {
            this.Fill = fill;
            this.Text = text;
            this.FontSize = fontSize;
        }

        /// <summary>
        /// The fill color of the text run in RGB format.
        /// </summary>
        /// <value>The fill color of the text run in RGB format.</value>
        /*
        <example>[1234]</example>
        */
        [DataMember(Name = "fill", EmitDefaultValue = true)]
        public List<int> Fill { get; set; }

        /// <summary>
        /// The run text.
        /// </summary>
        /// <value>The run text.</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// The font size of the text run in points.
        /// </summary>
        /// <value>The font size of the text run in points.</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "font-size", EmitDefaultValue = true)]
        public string FontSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Run {\n");
            sb.Append("  Fill: ").Append(Fill).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
