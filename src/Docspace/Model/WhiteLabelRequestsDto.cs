/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Request parameters for white label settings
    /// </summary>
    [DataContract(Name = "WhiteLabelRequestsDto")]
    public partial class WhiteLabelRequestsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhiteLabelRequestsDto" /> class.
        /// </summary>
        /// <param name="logoText">Logo text.</param>
        /// <param name="logo">Tenant IDs with their logos (light or dark).</param>
        public WhiteLabelRequestsDto(string logoText = default(string), List<ItemKeyValuePairStringLogoRequestsDto> logo = default(List<ItemKeyValuePairStringLogoRequestsDto>))
        {
            this.LogoText = logoText;
            this.Logo = logo;
        }

        /// <summary>
        /// Logo text
        /// </summary>
        /// <value>Logo text</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "logoText", EmitDefaultValue = true)]
        public string LogoText { get; set; }

        /// <summary>
        /// Tenant IDs with their logos (light or dark)
        /// </summary>
        /// <value>Tenant IDs with their logos (light or dark)</value>
        [DataMember(Name = "logo", EmitDefaultValue = true)]
        public List<ItemKeyValuePairStringLogoRequestsDto> Logo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhiteLabelRequestsDto {\n");
            sb.Append("  LogoText: ").Append(LogoText).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LogoText (string) maxLength
            if (this.LogoText != null && this.LogoText.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LogoText, length must be less than 40.", new [] { "LogoText" });
            }

            // LogoText (string) minLength
            if (this.LogoText != null && this.LogoText.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LogoText, length must be greater than 0.", new [] { "LogoText" });
            }

            yield break;
        }
    }

}
