/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// FolderDtoString
    /// </summary>
    [DataContract(Name = "FolderDtoString")]
    public partial class FolderDtoString : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", EmitDefaultValue = false)]
        public FileShare? Access { get; set; }

        /// <summary>
        /// Gets or Sets RootFolderType
        /// </summary>
        [DataMember(Name = "rootFolderType", EmitDefaultValue = false)]
        public FolderType? RootFolderType { get; set; }

        /// <summary>
        /// Gets or Sets ParentRoomType
        /// </summary>
        [DataMember(Name = "parentRoomType", EmitDefaultValue = false)]
        public FolderType? ParentRoomType { get; set; }

        /// <summary>
        /// Gets or Sets RoomType
        /// </summary>
        [DataMember(Name = "roomType", EmitDefaultValue = false)]
        public RoomType? RoomType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public FolderType? Type { get; set; }

        /// <summary>
        /// Gets or Sets FileEntryType
        /// </summary>
        [DataMember(Name = "fileEntryType", EmitDefaultValue = false)]
        public FileEntryType? FileEntryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderDtoString" /> class.
        /// </summary>
        /// <param name="title">Title.</param>
        /// <param name="access">access.</param>
        /// <param name="shared">Specifies if the file is shared or not.</param>
        /// <param name="created">created.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="updated">updated.</param>
        /// <param name="autoDelete">autoDelete.</param>
        /// <param name="rootFolderType">rootFolderType.</param>
        /// <param name="parentRoomType">parentRoomType.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="providerItem">Provider is specified or not.</param>
        /// <param name="providerKey">Provider key.</param>
        /// <param name="providerId">Provider ID.</param>
        /// <param name="order">Order.</param>
        /// <param name="id">Id.</param>
        /// <param name="rootFolderId">Root folder id.</param>
        /// <param name="originId">Origin id.</param>
        /// <param name="originRoomId">Origin room id.</param>
        /// <param name="originTitle">Origin title.</param>
        /// <param name="originRoomTitle">Origin room title.</param>
        /// <param name="canShare">Can share.</param>
        /// <param name="security">security.</param>
        /// <param name="requestToken">requestToken.</param>
        /// <param name="parentId">Parent folder ID.</param>
        /// <param name="filesCount">Number of files.</param>
        /// <param name="foldersCount">Number of folders.</param>
        /// <param name="isShareable">Specifies if a folder is shareable or not.</param>
        /// <param name="isFavorite">Specifies if a folder is favorite or not.</param>
        /// <param name="varNew">Number for a new folder.</param>
        /// <param name="mute">Specifies if a folder is muted or not.</param>
        /// <param name="tags">List of tags.</param>
        /// <param name="logo">logo.</param>
        /// <param name="pinned">Specifies if a folder is pinned or not.</param>
        /// <param name="roomType">roomType.</param>
        /// <param name="varPrivate">Specifies if a folder is private or not.</param>
        /// <param name="indexing">Indexing.</param>
        /// <param name="denyDownload">Deny download.</param>
        /// <param name="lifetime">lifetime.</param>
        /// <param name="watermark">watermark.</param>
        /// <param name="type">type.</param>
        /// <param name="inRoom">InRoom.</param>
        /// <param name="quotaLimit">Quota.</param>
        /// <param name="isCustomQuota">Specifies if the room has a custom quota or not.</param>
        /// <param name="usedSpace">Counter.</param>
        /// <param name="external">Specifies if the link external.</param>
        /// <param name="passwordProtected">Specifies if the password protected.</param>
        /// <param name="expired">Expired.</param>
        /// <param name="fileEntryType">fileEntryType.</param>
        public FolderDtoString(string title = default(string), FileShare? access = default(FileShare?), bool shared = default(bool), ApiDateTime created = default(ApiDateTime), EmployeeDto createdBy = default(EmployeeDto), ApiDateTime updated = default(ApiDateTime), ApiDateTime autoDelete = default(ApiDateTime), FolderType? rootFolderType = default(FolderType?), FolderType? parentRoomType = default(FolderType?), EmployeeDto updatedBy = default(EmployeeDto), bool? providerItem = default(bool?), string providerKey = default(string), int? providerId = default(int?), string order = default(string), string id = default(string), string rootFolderId = default(string), string originId = default(string), string originRoomId = default(string), string originTitle = default(string), string originRoomTitle = default(string), bool canShare = default(bool), FileDtoIntegerSecurity security = default(FileDtoIntegerSecurity), string requestToken = default(string), string parentId = default(string), int filesCount = default(int), int foldersCount = default(int), bool? isShareable = default(bool?), bool? isFavorite = default(bool?), int varNew = default(int), bool mute = default(bool), List<string> tags = default(List<string>), Logo logo = default(Logo), bool pinned = default(bool), RoomType? roomType = default(RoomType?), bool varPrivate = default(bool), bool indexing = default(bool), bool denyDownload = default(bool), RoomDataLifetimeDto lifetime = default(RoomDataLifetimeDto), WatermarkDto watermark = default(WatermarkDto), FolderType? type = default(FolderType?), bool? inRoom = default(bool?), long? quotaLimit = default(long?), bool? isCustomQuota = default(bool?), long? usedSpace = default(long?), bool? external = default(bool?), bool? passwordProtected = default(bool?), bool? expired = default(bool?), FileEntryType? fileEntryType = default(FileEntryType?))
        {
            this.Title = title;
            this.Access = access;
            this.Shared = shared;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.Updated = updated;
            this.AutoDelete = autoDelete;
            this.RootFolderType = rootFolderType;
            this.ParentRoomType = parentRoomType;
            this.UpdatedBy = updatedBy;
            this.ProviderItem = providerItem;
            this.ProviderKey = providerKey;
            this.ProviderId = providerId;
            this.Order = order;
            this.Id = id;
            this.RootFolderId = rootFolderId;
            this.OriginId = originId;
            this.OriginRoomId = originRoomId;
            this.OriginTitle = originTitle;
            this.OriginRoomTitle = originRoomTitle;
            this.CanShare = canShare;
            this.Security = security;
            this.RequestToken = requestToken;
            this.ParentId = parentId;
            this.FilesCount = filesCount;
            this.FoldersCount = foldersCount;
            this.IsShareable = isShareable;
            this.IsFavorite = isFavorite;
            this.New = varNew;
            this.Mute = mute;
            this.Tags = tags;
            this.Logo = logo;
            this.Pinned = pinned;
            this.RoomType = roomType;
            this.Private = varPrivate;
            this.Indexing = indexing;
            this.DenyDownload = denyDownload;
            this.Lifetime = lifetime;
            this.Watermark = watermark;
            this.Type = type;
            this.InRoom = inRoom;
            this.QuotaLimit = quotaLimit;
            this.IsCustomQuota = isCustomQuota;
            this.UsedSpace = usedSpace;
            this.External = external;
            this.PasswordProtected = passwordProtected;
            this.Expired = expired;
            this.FileEntryType = fileEntryType;
        }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        /*
        <example>Some titile.txt/ Some title</example>
        */
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Specifies if the file is shared or not
        /// </summary>
        /// <value>Specifies if the file is shared or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public bool Shared { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public ApiDateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public EmployeeDto CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public ApiDateTime Updated { get; set; }

        /// <summary>
        /// Gets or Sets AutoDelete
        /// </summary>
        [DataMember(Name = "autoDelete", EmitDefaultValue = false)]
        public ApiDateTime AutoDelete { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = false)]
        public EmployeeDto UpdatedBy { get; set; }

        /// <summary>
        /// Provider is specified or not
        /// </summary>
        /// <value>Provider is specified or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "providerItem", EmitDefaultValue = true)]
        public bool? ProviderItem { get; set; }

        /// <summary>
        /// Provider key
        /// </summary>
        /// <value>Provider key</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "providerKey", EmitDefaultValue = true)]
        public string ProviderKey { get; set; }

        /// <summary>
        /// Provider ID
        /// </summary>
        /// <value>Provider ID</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "providerId", EmitDefaultValue = true)]
        public int? ProviderId { get; set; }

        /// <summary>
        /// Order
        /// </summary>
        /// <value>Order</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public string Order { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Root folder id
        /// </summary>
        /// <value>Root folder id</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "rootFolderId", EmitDefaultValue = true)]
        public string RootFolderId { get; set; }

        /// <summary>
        /// Origin id
        /// </summary>
        /// <value>Origin id</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "originId", EmitDefaultValue = true)]
        public string OriginId { get; set; }

        /// <summary>
        /// Origin room id
        /// </summary>
        /// <value>Origin room id</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "originRoomId", EmitDefaultValue = true)]
        public string OriginRoomId { get; set; }

        /// <summary>
        /// Origin title
        /// </summary>
        /// <value>Origin title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "originTitle", EmitDefaultValue = true)]
        public string OriginTitle { get; set; }

        /// <summary>
        /// Origin room title
        /// </summary>
        /// <value>Origin room title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "originRoomTitle", EmitDefaultValue = true)]
        public string OriginRoomTitle { get; set; }

        /// <summary>
        /// Can share
        /// </summary>
        /// <value>Can share</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "canShare", EmitDefaultValue = true)]
        public bool CanShare { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name = "security", EmitDefaultValue = true)]
        public FileDtoIntegerSecurity Security { get; set; }

        /// <summary>
        /// Gets or Sets RequestToken
        /// </summary>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "requestToken", EmitDefaultValue = true)]
        public string RequestToken { get; set; }

        /// <summary>
        /// Parent folder ID
        /// </summary>
        /// <value>Parent folder ID</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "parentId", EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Number of files
        /// </summary>
        /// <value>Number of files</value>
        /*
        <example>5</example>
        */
        [DataMember(Name = "filesCount", EmitDefaultValue = false)]
        public int FilesCount { get; set; }

        /// <summary>
        /// Number of folders
        /// </summary>
        /// <value>Number of folders</value>
        /*
        <example>7</example>
        */
        [DataMember(Name = "foldersCount", EmitDefaultValue = false)]
        public int FoldersCount { get; set; }

        /// <summary>
        /// Specifies if a folder is shareable or not
        /// </summary>
        /// <value>Specifies if a folder is shareable or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isShareable", EmitDefaultValue = true)]
        public bool? IsShareable { get; set; }

        /// <summary>
        /// Specifies if a folder is favorite or not
        /// </summary>
        /// <value>Specifies if a folder is favorite or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isFavorite", EmitDefaultValue = true)]
        public bool? IsFavorite { get; set; }

        /// <summary>
        /// Number for a new folder
        /// </summary>
        /// <value>Number for a new folder</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "new", EmitDefaultValue = false)]
        public int New { get; set; }

        /// <summary>
        /// Specifies if a folder is muted or not
        /// </summary>
        /// <value>Specifies if a folder is muted or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "mute", EmitDefaultValue = true)]
        public bool Mute { get; set; }

        /// <summary>
        /// List of tags
        /// </summary>
        /// <value>List of tags</value>
        /*
        <example>[&quot;some text&quot;]</example>
        */
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public Logo Logo { get; set; }

        /// <summary>
        /// Specifies if a folder is pinned or not
        /// </summary>
        /// <value>Specifies if a folder is pinned or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "pinned", EmitDefaultValue = true)]
        public bool Pinned { get; set; }

        /// <summary>
        /// Specifies if a folder is private or not
        /// </summary>
        /// <value>Specifies if a folder is private or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }

        /// <summary>
        /// Indexing
        /// </summary>
        /// <value>Indexing</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "indexing", EmitDefaultValue = true)]
        public bool Indexing { get; set; }

        /// <summary>
        /// Deny download
        /// </summary>
        /// <value>Deny download</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "denyDownload", EmitDefaultValue = true)]
        public bool DenyDownload { get; set; }

        /// <summary>
        /// Gets or Sets Lifetime
        /// </summary>
        [DataMember(Name = "lifetime", EmitDefaultValue = false)]
        public RoomDataLifetimeDto Lifetime { get; set; }

        /// <summary>
        /// Gets or Sets Watermark
        /// </summary>
        [DataMember(Name = "watermark", EmitDefaultValue = false)]
        public WatermarkDto Watermark { get; set; }

        /// <summary>
        /// InRoom
        /// </summary>
        /// <value>InRoom</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "inRoom", EmitDefaultValue = true)]
        public bool? InRoom { get; set; }

        /// <summary>
        /// Quota
        /// </summary>
        /// <value>Quota</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "quotaLimit", EmitDefaultValue = true)]
        public long? QuotaLimit { get; set; }

        /// <summary>
        /// Specifies if the room has a custom quota or not
        /// </summary>
        /// <value>Specifies if the room has a custom quota or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isCustomQuota", EmitDefaultValue = true)]
        public bool? IsCustomQuota { get; set; }

        /// <summary>
        /// Counter
        /// </summary>
        /// <value>Counter</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "usedSpace", EmitDefaultValue = true)]
        public long? UsedSpace { get; set; }

        /// <summary>
        /// Specifies if the link external
        /// </summary>
        /// <value>Specifies if the link external</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "external", EmitDefaultValue = true)]
        public bool? External { get; set; }

        /// <summary>
        /// Specifies if the password protected
        /// </summary>
        /// <value>Specifies if the password protected</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "passwordProtected", EmitDefaultValue = true)]
        public bool? PasswordProtected { get; set; }

        /// <summary>
        /// Expired
        /// </summary>
        /// <value>Expired</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "expired", EmitDefaultValue = true)]
        public bool? Expired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FolderDtoString {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  AutoDelete: ").Append(AutoDelete).Append("\n");
            sb.Append("  RootFolderType: ").Append(RootFolderType).Append("\n");
            sb.Append("  ParentRoomType: ").Append(ParentRoomType).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  ProviderItem: ").Append(ProviderItem).Append("\n");
            sb.Append("  ProviderKey: ").Append(ProviderKey).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RootFolderId: ").Append(RootFolderId).Append("\n");
            sb.Append("  OriginId: ").Append(OriginId).Append("\n");
            sb.Append("  OriginRoomId: ").Append(OriginRoomId).Append("\n");
            sb.Append("  OriginTitle: ").Append(OriginTitle).Append("\n");
            sb.Append("  OriginRoomTitle: ").Append(OriginRoomTitle).Append("\n");
            sb.Append("  CanShare: ").Append(CanShare).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  RequestToken: ").Append(RequestToken).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  FilesCount: ").Append(FilesCount).Append("\n");
            sb.Append("  FoldersCount: ").Append(FoldersCount).Append("\n");
            sb.Append("  IsShareable: ").Append(IsShareable).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("  Mute: ").Append(Mute).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  RoomType: ").Append(RoomType).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Indexing: ").Append(Indexing).Append("\n");
            sb.Append("  DenyDownload: ").Append(DenyDownload).Append("\n");
            sb.Append("  Lifetime: ").Append(Lifetime).Append("\n");
            sb.Append("  Watermark: ").Append(Watermark).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InRoom: ").Append(InRoom).Append("\n");
            sb.Append("  QuotaLimit: ").Append(QuotaLimit).Append("\n");
            sb.Append("  IsCustomQuota: ").Append(IsCustomQuota).Append("\n");
            sb.Append("  UsedSpace: ").Append(UsedSpace).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  PasswordProtected: ").Append(PasswordProtected).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  FileEntryType: ").Append(FileEntryType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
