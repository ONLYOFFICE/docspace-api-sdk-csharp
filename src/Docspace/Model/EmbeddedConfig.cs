/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// EmbeddedConfig
    /// </summary>
    [DataContract(Name = "EmbeddedConfig")]
    public partial class EmbeddedConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedConfig" /> class.
        /// </summary>
        /// <param name="shareLinkParam">Share link param.</param>
        public EmbeddedConfig(string shareLinkParam = default(string))
        {
            this.ShareLinkParam = shareLinkParam;
        }

        /// <summary>
        /// Embed url
        /// </summary>
        /// <value>Embed url</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "embedUrl", EmitDefaultValue = true)]
        public string EmbedUrl { get; private set; }

        /// <summary>
        /// Returns false as EmbedUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmbedUrl()
        {
            return false;
        }
        /// <summary>
        /// Save url
        /// </summary>
        /// <value>Save url</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "saveUrl", EmitDefaultValue = true)]
        public string SaveUrl { get; private set; }

        /// <summary>
        /// Returns false as SaveUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSaveUrl()
        {
            return false;
        }
        /// <summary>
        /// Share link param
        /// </summary>
        /// <value>Share link param</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "shareLinkParam", EmitDefaultValue = true)]
        public string ShareLinkParam { get; set; }

        /// <summary>
        /// Share url
        /// </summary>
        /// <value>Share url</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "shareUrl", EmitDefaultValue = true)]
        public string ShareUrl { get; private set; }

        /// <summary>
        /// Returns false as ShareUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShareUrl()
        {
            return false;
        }
        /// <summary>
        /// Toolbar docked
        /// </summary>
        /// <value>Toolbar docked</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "toolbarDocked", EmitDefaultValue = true)]
        public string ToolbarDocked { get; private set; }

        /// <summary>
        /// Returns false as ToolbarDocked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToolbarDocked()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmbeddedConfig {\n");
            sb.Append("  EmbedUrl: ").Append(EmbedUrl).Append("\n");
            sb.Append("  SaveUrl: ").Append(SaveUrl).Append("\n");
            sb.Append("  ShareLinkParam: ").Append(ShareLinkParam).Append("\n");
            sb.Append("  ShareUrl: ").Append(ShareUrl).Append("\n");
            sb.Append("  ToolbarDocked: ").Append(ToolbarDocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
