/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// SMTP settings
    /// </summary>
    [DataContract(Name = "SmtpSettingsDto")]
    public partial class SmtpSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpSettingsDto" /> class.
        /// </summary>
        /// <param name="host">Host.</param>
        /// <param name="port">Port.</param>
        /// <param name="senderAddress">Sender address.</param>
        /// <param name="senderDisplayName">Sender display name.</param>
        /// <param name="credentialsUserName">Credentials username.</param>
        /// <param name="credentialsUserPassword">Credentials user password.</param>
        /// <param name="enableSSL">Enables SSL or not.</param>
        /// <param name="enableAuth">Enables authentication or not.</param>
        /// <param name="useNtlm">Specifies whether to use NTLM or not.</param>
        /// <param name="isDefaultSettings">Specifies if the current settings are default or not.</param>
        public SmtpSettingsDto(string host = default(string), int? port = default(int?), string senderAddress = default(string), string senderDisplayName = default(string), string credentialsUserName = default(string), string credentialsUserPassword = default(string), bool enableSSL = default(bool), bool enableAuth = default(bool), bool useNtlm = default(bool), bool isDefaultSettings = default(bool))
        {
            this.Host = host;
            this.Port = port;
            this.SenderAddress = senderAddress;
            this.SenderDisplayName = senderDisplayName;
            this.CredentialsUserName = credentialsUserName;
            this.CredentialsUserPassword = credentialsUserPassword;
            this.EnableSSL = enableSSL;
            this.EnableAuth = enableAuth;
            this.UseNtlm = useNtlm;
            this.IsDefaultSettings = isDefaultSettings;
        }

        /// <summary>
        /// Host
        /// </summary>
        /// <value>Host</value>
        /*
        <example>mail.example.com</example>
        */
        [DataMember(Name = "host", EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Port
        /// </summary>
        /// <value>Port</value>
        /*
        <example>25</example>
        */
        [DataMember(Name = "port", EmitDefaultValue = true)]
        public int? Port { get; set; }

        /// <summary>
        /// Sender address
        /// </summary>
        /// <value>Sender address</value>
        /*
        <example>notify@example.com</example>
        */
        [DataMember(Name = "senderAddress", EmitDefaultValue = true)]
        public string SenderAddress { get; set; }

        /// <summary>
        /// Sender display name
        /// </summary>
        /// <value>Sender display name</value>
        /*
        <example>Postman</example>
        */
        [DataMember(Name = "senderDisplayName", EmitDefaultValue = true)]
        public string SenderDisplayName { get; set; }

        /// <summary>
        /// Credentials username
        /// </summary>
        /// <value>Credentials username</value>
        /*
        <example>notify@example.com</example>
        */
        [DataMember(Name = "credentialsUserName", EmitDefaultValue = true)]
        public string CredentialsUserName { get; set; }

        /// <summary>
        /// Credentials user password
        /// </summary>
        /// <value>Credentials user password</value>
        /*
        <example>{password}</example>
        */
        [DataMember(Name = "credentialsUserPassword", EmitDefaultValue = true)]
        public string CredentialsUserPassword { get; set; }

        /// <summary>
        /// Enables SSL or not
        /// </summary>
        /// <value>Enables SSL or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "enableSSL", EmitDefaultValue = true)]
        public bool EnableSSL { get; set; }

        /// <summary>
        /// Enables authentication or not
        /// </summary>
        /// <value>Enables authentication or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enableAuth", EmitDefaultValue = true)]
        public bool EnableAuth { get; set; }

        /// <summary>
        /// Specifies whether to use NTLM or not
        /// </summary>
        /// <value>Specifies whether to use NTLM or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "useNtlm", EmitDefaultValue = true)]
        public bool UseNtlm { get; set; }

        /// <summary>
        /// Specifies if the current settings are default or not
        /// </summary>
        /// <value>Specifies if the current settings are default or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "isDefaultSettings", EmitDefaultValue = true)]
        public bool IsDefaultSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmtpSettingsDto {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  SenderAddress: ").Append(SenderAddress).Append("\n");
            sb.Append("  SenderDisplayName: ").Append(SenderDisplayName).Append("\n");
            sb.Append("  CredentialsUserName: ").Append(CredentialsUserName).Append("\n");
            sb.Append("  CredentialsUserPassword: ").Append(CredentialsUserPassword).Append("\n");
            sb.Append("  EnableSSL: ").Append(EnableSSL).Append("\n");
            sb.Append("  EnableAuth: ").Append(EnableAuth).Append("\n");
            sb.Append("  UseNtlm: ").Append(UseNtlm).Append("\n");
            sb.Append("  IsDefaultSettings: ").Append(IsDefaultSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Port (int?) maximum
            if (this.Port > (int?)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Port, must be a value less than or equal to 65535.", new [] { "Port" });
            }

            // Port (int?) minimum
            if (this.Port < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Port, must be a value greater than or equal to 1.", new [] { "Port" });
            }

            // CredentialsUserName (string) maxLength
            if (this.CredentialsUserName != null && this.CredentialsUserName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CredentialsUserName, length must be less than 255.", new [] { "CredentialsUserName" });
            }

            // CredentialsUserName (string) minLength
            if (this.CredentialsUserName != null && this.CredentialsUserName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CredentialsUserName, length must be greater than 0.", new [] { "CredentialsUserName" });
            }

            yield break;
        }
    }

}
