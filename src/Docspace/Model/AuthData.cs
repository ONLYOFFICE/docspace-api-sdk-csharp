/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// AuthData
    /// </summary>
    [DataContract(Name = "AuthData")]
    public partial class AuthData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthData" /> class.
        /// </summary>
        /// <param name="login">Login.</param>
        /// <param name="password">Password.</param>
        /// <param name="rawToken">Raw token.</param>
        /// <param name="url">Url.</param>
        /// <param name="provider">Provider.</param>
        /// <param name="token">token.</param>
        public AuthData(string login = default(string), string password = default(string), string rawToken = default(string), string url = default(string), string provider = default(string), OAuth20Token token = default(OAuth20Token))
        {
            this.Login = login;
            this.Password = password;
            this.RawToken = rawToken;
            this.Url = url;
            this.Provider = provider;
            this.Token = token;
        }

        /// <summary>
        /// Login
        /// </summary>
        /// <value>Login</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "login", EmitDefaultValue = true)]
        public string Login { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        /*
        <example>vfmf2vO1Kp</example>
        */
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Raw token
        /// </summary>
        /// <value>Raw token</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "rawToken", EmitDefaultValue = true)]
        public string RawToken { get; set; }

        /// <summary>
        /// Url
        /// </summary>
        /// <value>Url</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Provider
        /// </summary>
        /// <value>Provider</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "provider", EmitDefaultValue = true)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public OAuth20Token Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthData {\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RawToken: ").Append(RawToken).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
