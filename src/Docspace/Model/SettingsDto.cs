/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// SettingsDto
    /// </summary>
    [DataContract(Name = "SettingsDto")]
    public partial class SettingsDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TrustedDomainsType
        /// </summary>
        [DataMember(Name = "trustedDomainsType", EmitDefaultValue = false)]
        public TenantTrustedDomainsType? TrustedDomainsType { get; set; }

        /// <summary>
        /// Gets or Sets RecaptchaType
        /// </summary>
        [DataMember(Name = "recaptchaType", EmitDefaultValue = false)]
        public RecaptchaType? RecaptchaType { get; set; }

        /// <summary>
        /// Gets or Sets TenantStatus
        /// </summary>
        [DataMember(Name = "tenantStatus", EmitDefaultValue = false)]
        public TenantStatus? TenantStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsDto" /> class.
        /// </summary>
        /// <param name="timezone">Time zone.</param>
        /// <param name="trustedDomains">List of trusted domains.</param>
        /// <param name="trustedDomainsType">trustedDomainsType.</param>
        /// <param name="culture">Language.</param>
        /// <param name="utcOffset">UTC offset.</param>
        /// <param name="utcHoursOffset">UTC hours offset.</param>
        /// <param name="greetingSettings">Greeting settings.</param>
        /// <param name="ownerId">Owner ID.</param>
        /// <param name="nameSchemaId">Team template ID.</param>
        /// <param name="enabledJoin">Specifies if a user can join to the portal or not.</param>
        /// <param name="enableAdmMess">Specifies if a user can send a message to the administrator or not.</param>
        /// <param name="thirdpartyEnable">Specifies if a user can connect third-party providers or not.</param>
        /// <param name="docSpace">Specifies if this is a DocSpace portal or not.</param>
        /// <param name="standalone">Specifies if this is a standalone portal or not.</param>
        /// <param name="isAmi">Specifies if this is a AMI instance or not.</param>
        /// <param name="baseDomain">Base domain.</param>
        /// <param name="wizardToken">Wizard token.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="firebase">firebase.</param>
        /// <param name="varVersion">Version.</param>
        /// <param name="recaptchaType">recaptchaType.</param>
        /// <param name="recaptchaPublicKey">ReCAPTCHA public key.</param>
        /// <param name="debugInfo">Specifies if the debug information will be sent or not.</param>
        /// <param name="socketUrl">Socket URL.</param>
        /// <param name="tenantStatus">tenantStatus.</param>
        /// <param name="tenantAlias">Tenant alias.</param>
        /// <param name="displayAbout">Specifies whether to display the About section.</param>
        /// <param name="domainValidator">domainValidator.</param>
        /// <param name="zendeskKey">Zendesk key.</param>
        /// <param name="tagManagerId">Tag manager ID.</param>
        /// <param name="cookieSettingsEnabled">Specifies whether the cookie settings are enabled.</param>
        /// <param name="limitedAccessSpace">Limited access space.</param>
        /// <param name="userNameRegex">User name validation regex.</param>
        /// <param name="invitationLimit">Invitation limit.</param>
        /// <param name="plugins">plugins.</param>
        /// <param name="deepLink">deepLink.</param>
        /// <param name="formGallery">formGallery.</param>
        /// <param name="maxImageUploadSize">Max image upload size.</param>
        /// <param name="logoText">White label logo text.</param>
        /// <param name="externalResources">externalResources.</param>
        public SettingsDto(string timezone = default(string), List<string> trustedDomains = default(List<string>), TenantTrustedDomainsType? trustedDomainsType = default(TenantTrustedDomainsType?), string culture = default(string), string utcOffset = default(string), double utcHoursOffset = default(double), string greetingSettings = default(string), Guid ownerId = default(Guid), string nameSchemaId = default(string), bool? enabledJoin = default(bool?), bool? enableAdmMess = default(bool?), bool? thirdpartyEnable = default(bool?), bool docSpace = default(bool), bool standalone = default(bool), bool isAmi = default(bool), string baseDomain = default(string), string wizardToken = default(string), PasswordHasher passwordHash = default(PasswordHasher), FirebaseDto firebase = default(FirebaseDto), string varVersion = default(string), RecaptchaType? recaptchaType = default(RecaptchaType?), string recaptchaPublicKey = default(string), bool debugInfo = default(bool), string socketUrl = default(string), TenantStatus? tenantStatus = default(TenantStatus?), string tenantAlias = default(string), bool displayAbout = default(bool), TenantDomainValidator domainValidator = default(TenantDomainValidator), string zendeskKey = default(string), string tagManagerId = default(string), bool cookieSettingsEnabled = default(bool), bool limitedAccessSpace = default(bool), string userNameRegex = default(string), int? invitationLimit = default(int?), PluginsDto plugins = default(PluginsDto), DeepLinkDto deepLink = default(DeepLinkDto), FormGalleryDto formGallery = default(FormGalleryDto), long maxImageUploadSize = default(long), string logoText = default(string), CultureSpecificExternalResources externalResources = default(CultureSpecificExternalResources))
        {
            this.Timezone = timezone;
            this.TrustedDomains = trustedDomains;
            this.TrustedDomainsType = trustedDomainsType;
            this.Culture = culture;
            this.UtcOffset = utcOffset;
            this.UtcHoursOffset = utcHoursOffset;
            this.GreetingSettings = greetingSettings;
            this.OwnerId = ownerId;
            this.NameSchemaId = nameSchemaId;
            this.EnabledJoin = enabledJoin;
            this.EnableAdmMess = enableAdmMess;
            this.ThirdpartyEnable = thirdpartyEnable;
            this.DocSpace = docSpace;
            this.Standalone = standalone;
            this.IsAmi = isAmi;
            this.BaseDomain = baseDomain;
            this.WizardToken = wizardToken;
            this.PasswordHash = passwordHash;
            this.Firebase = firebase;
            this.VarVersion = varVersion;
            this.RecaptchaType = recaptchaType;
            this.RecaptchaPublicKey = recaptchaPublicKey;
            this.DebugInfo = debugInfo;
            this.SocketUrl = socketUrl;
            this.TenantStatus = tenantStatus;
            this.TenantAlias = tenantAlias;
            this.DisplayAbout = displayAbout;
            this.DomainValidator = domainValidator;
            this.ZendeskKey = zendeskKey;
            this.TagManagerId = tagManagerId;
            this.CookieSettingsEnabled = cookieSettingsEnabled;
            this.LimitedAccessSpace = limitedAccessSpace;
            this.UserNameRegex = userNameRegex;
            this.InvitationLimit = invitationLimit;
            this.Plugins = plugins;
            this.DeepLink = deepLink;
            this.FormGallery = formGallery;
            this.MaxImageUploadSize = maxImageUploadSize;
            this.LogoText = logoText;
            this.ExternalResources = externalResources;
        }

        /// <summary>
        /// Time zone
        /// </summary>
        /// <value>Time zone</value>
        /*
        <example>UTC</example>
        */
        [DataMember(Name = "timezone", EmitDefaultValue = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// List of trusted domains
        /// </summary>
        /// <value>List of trusted domains</value>
        /*
        <example>mydomain.com</example>
        */
        [DataMember(Name = "trustedDomains", EmitDefaultValue = true)]
        public List<string> TrustedDomains { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        /*
        <example>en-US</example>
        */
        [DataMember(Name = "culture", EmitDefaultValue = true)]
        public string Culture { get; set; }

        /// <summary>
        /// UTC offset
        /// </summary>
        /// <value>UTC offset</value>
        /*
        <example>-8.5</example>
        */
        [DataMember(Name = "utcOffset", EmitDefaultValue = false)]
        public string UtcOffset { get; set; }

        /// <summary>
        /// UTC hours offset
        /// </summary>
        /// <value>UTC hours offset</value>
        /*
        <example>-8.5</example>
        */
        [DataMember(Name = "utcHoursOffset", EmitDefaultValue = false)]
        public double UtcHoursOffset { get; set; }

        /// <summary>
        /// Greeting settings
        /// </summary>
        /// <value>Greeting settings</value>
        /*
        <example>Web Office Applications</example>
        */
        [DataMember(Name = "greetingSettings", EmitDefaultValue = true)]
        public string GreetingSettings { get; set; }

        /// <summary>
        /// Owner ID
        /// </summary>
        /// <value>Owner ID</value>
        /*
        <example>75a5f745-f697-4418-b38d-0fe0d277e258</example>
        */
        [DataMember(Name = "ownerId", EmitDefaultValue = false)]
        public Guid OwnerId { get; set; }

        /// <summary>
        /// Team template ID
        /// </summary>
        /// <value>Team template ID</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "nameSchemaId", EmitDefaultValue = true)]
        public string NameSchemaId { get; set; }

        /// <summary>
        /// Specifies if a user can join to the portal or not
        /// </summary>
        /// <value>Specifies if a user can join to the portal or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enabledJoin", EmitDefaultValue = true)]
        public bool? EnabledJoin { get; set; }

        /// <summary>
        /// Specifies if a user can send a message to the administrator or not
        /// </summary>
        /// <value>Specifies if a user can send a message to the administrator or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enableAdmMess", EmitDefaultValue = true)]
        public bool? EnableAdmMess { get; set; }

        /// <summary>
        /// Specifies if a user can connect third-party providers or not
        /// </summary>
        /// <value>Specifies if a user can connect third-party providers or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "thirdpartyEnable", EmitDefaultValue = true)]
        public bool? ThirdpartyEnable { get; set; }

        /// <summary>
        /// Specifies if this is a DocSpace portal or not
        /// </summary>
        /// <value>Specifies if this is a DocSpace portal or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "docSpace", EmitDefaultValue = true)]
        public bool DocSpace { get; set; }

        /// <summary>
        /// Specifies if this is a standalone portal or not
        /// </summary>
        /// <value>Specifies if this is a standalone portal or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "standalone", EmitDefaultValue = true)]
        public bool Standalone { get; set; }

        /// <summary>
        /// Specifies if this is a AMI instance or not
        /// </summary>
        /// <value>Specifies if this is a AMI instance or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "isAmi", EmitDefaultValue = true)]
        public bool IsAmi { get; set; }

        /// <summary>
        /// Base domain
        /// </summary>
        /// <value>Base domain</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "baseDomain", EmitDefaultValue = true)]
        public string BaseDomain { get; set; }

        /// <summary>
        /// Wizard token
        /// </summary>
        /// <value>Wizard token</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "wizardToken", EmitDefaultValue = true)]
        public string WizardToken { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name = "passwordHash", EmitDefaultValue = false)]
        public PasswordHasher PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets Firebase
        /// </summary>
        [DataMember(Name = "firebase", EmitDefaultValue = false)]
        public FirebaseDto Firebase { get; set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// ReCAPTCHA public key
        /// </summary>
        /// <value>ReCAPTCHA public key</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "recaptchaPublicKey", EmitDefaultValue = true)]
        public string RecaptchaPublicKey { get; set; }

        /// <summary>
        /// Specifies if the debug information will be sent or not
        /// </summary>
        /// <value>Specifies if the debug information will be sent or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "debugInfo", EmitDefaultValue = true)]
        public bool DebugInfo { get; set; }

        /// <summary>
        /// Socket URL
        /// </summary>
        /// <value>Socket URL</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "socketUrl", EmitDefaultValue = true)]
        public string SocketUrl { get; set; }

        /// <summary>
        /// Tenant alias
        /// </summary>
        /// <value>Tenant alias</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "tenantAlias", EmitDefaultValue = true)]
        public string TenantAlias { get; set; }

        /// <summary>
        /// Specifies whether to display the About section
        /// </summary>
        /// <value>Specifies whether to display the About section</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "displayAbout", EmitDefaultValue = true)]
        public bool DisplayAbout { get; set; }

        /// <summary>
        /// Gets or Sets DomainValidator
        /// </summary>
        [DataMember(Name = "domainValidator", EmitDefaultValue = false)]
        public TenantDomainValidator DomainValidator { get; set; }

        /// <summary>
        /// Zendesk key
        /// </summary>
        /// <value>Zendesk key</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "zendeskKey", EmitDefaultValue = true)]
        public string ZendeskKey { get; set; }

        /// <summary>
        /// Tag manager ID
        /// </summary>
        /// <value>Tag manager ID</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "tagManagerId", EmitDefaultValue = true)]
        public string TagManagerId { get; set; }

        /// <summary>
        /// Specifies whether the cookie settings are enabled
        /// </summary>
        /// <value>Specifies whether the cookie settings are enabled</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "cookieSettingsEnabled", EmitDefaultValue = true)]
        public bool CookieSettingsEnabled { get; set; }

        /// <summary>
        /// Limited access space
        /// </summary>
        /// <value>Limited access space</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "limitedAccessSpace", EmitDefaultValue = true)]
        public bool LimitedAccessSpace { get; set; }

        /// <summary>
        /// User name validation regex
        /// </summary>
        /// <value>User name validation regex</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "userNameRegex", EmitDefaultValue = true)]
        public string UserNameRegex { get; set; }

        /// <summary>
        /// Invitation limit
        /// </summary>
        /// <value>Invitation limit</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "invitationLimit", EmitDefaultValue = true)]
        public int? InvitationLimit { get; set; }

        /// <summary>
        /// Gets or Sets Plugins
        /// </summary>
        [DataMember(Name = "plugins", EmitDefaultValue = false)]
        public PluginsDto Plugins { get; set; }

        /// <summary>
        /// Gets or Sets DeepLink
        /// </summary>
        [DataMember(Name = "deepLink", EmitDefaultValue = false)]
        public DeepLinkDto DeepLink { get; set; }

        /// <summary>
        /// Gets or Sets FormGallery
        /// </summary>
        [DataMember(Name = "formGallery", EmitDefaultValue = false)]
        public FormGalleryDto FormGallery { get; set; }

        /// <summary>
        /// Max image upload size
        /// </summary>
        /// <value>Max image upload size</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "maxImageUploadSize", EmitDefaultValue = false)]
        public long MaxImageUploadSize { get; set; }

        /// <summary>
        /// White label logo text
        /// </summary>
        /// <value>White label logo text</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "logoText", EmitDefaultValue = true)]
        public string LogoText { get; set; }

        /// <summary>
        /// Gets or Sets ExternalResources
        /// </summary>
        [DataMember(Name = "externalResources", EmitDefaultValue = false)]
        public CultureSpecificExternalResources ExternalResources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettingsDto {\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  TrustedDomains: ").Append(TrustedDomains).Append("\n");
            sb.Append("  TrustedDomainsType: ").Append(TrustedDomainsType).Append("\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  UtcOffset: ").Append(UtcOffset).Append("\n");
            sb.Append("  UtcHoursOffset: ").Append(UtcHoursOffset).Append("\n");
            sb.Append("  GreetingSettings: ").Append(GreetingSettings).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  NameSchemaId: ").Append(NameSchemaId).Append("\n");
            sb.Append("  EnabledJoin: ").Append(EnabledJoin).Append("\n");
            sb.Append("  EnableAdmMess: ").Append(EnableAdmMess).Append("\n");
            sb.Append("  ThirdpartyEnable: ").Append(ThirdpartyEnable).Append("\n");
            sb.Append("  DocSpace: ").Append(DocSpace).Append("\n");
            sb.Append("  Standalone: ").Append(Standalone).Append("\n");
            sb.Append("  IsAmi: ").Append(IsAmi).Append("\n");
            sb.Append("  BaseDomain: ").Append(BaseDomain).Append("\n");
            sb.Append("  WizardToken: ").Append(WizardToken).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  Firebase: ").Append(Firebase).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  RecaptchaType: ").Append(RecaptchaType).Append("\n");
            sb.Append("  RecaptchaPublicKey: ").Append(RecaptchaPublicKey).Append("\n");
            sb.Append("  DebugInfo: ").Append(DebugInfo).Append("\n");
            sb.Append("  SocketUrl: ").Append(SocketUrl).Append("\n");
            sb.Append("  TenantStatus: ").Append(TenantStatus).Append("\n");
            sb.Append("  TenantAlias: ").Append(TenantAlias).Append("\n");
            sb.Append("  DisplayAbout: ").Append(DisplayAbout).Append("\n");
            sb.Append("  DomainValidator: ").Append(DomainValidator).Append("\n");
            sb.Append("  ZendeskKey: ").Append(ZendeskKey).Append("\n");
            sb.Append("  TagManagerId: ").Append(TagManagerId).Append("\n");
            sb.Append("  CookieSettingsEnabled: ").Append(CookieSettingsEnabled).Append("\n");
            sb.Append("  LimitedAccessSpace: ").Append(LimitedAccessSpace).Append("\n");
            sb.Append("  UserNameRegex: ").Append(UserNameRegex).Append("\n");
            sb.Append("  InvitationLimit: ").Append(InvitationLimit).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("  DeepLink: ").Append(DeepLink).Append("\n");
            sb.Append("  FormGallery: ").Append(FormGallery).Append("\n");
            sb.Append("  MaxImageUploadSize: ").Append(MaxImageUploadSize).Append("\n");
            sb.Append("  LogoText: ").Append(LogoText).Append("\n");
            sb.Append("  ExternalResources: ").Append(ExternalResources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
