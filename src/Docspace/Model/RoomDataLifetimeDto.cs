/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// RoomDataLifetimeDto
    /// </summary>
    [DataContract(Name = "RoomDataLifetimeDto")]
    public partial class RoomDataLifetimeDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public RoomDataLifetimePeriod? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomDataLifetimeDto" /> class.
        /// </summary>
        /// <param name="deletePermanently">Specifies action.</param>
        /// <param name="period">period.</param>
        /// <param name="value">Specifies time period value.</param>
        /// <param name="enabled">Enabled.</param>
        public RoomDataLifetimeDto(bool deletePermanently = default(bool), RoomDataLifetimePeriod? period = default(RoomDataLifetimePeriod?), int? value = default(int?), bool? enabled = default(bool?))
        {
            this.DeletePermanently = deletePermanently;
            this.Period = period;
            this.Value = value;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Specifies action
        /// </summary>
        /// <value>Specifies action</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "deletePermanently", EmitDefaultValue = true)]
        public bool DeletePermanently { get; set; }

        /// <summary>
        /// Specifies time period value
        /// </summary>
        /// <value>Specifies time period value</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public int? Value { get; set; }

        /// <summary>
        /// Enabled
        /// </summary>
        /// <value>Enabled</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoomDataLifetimeDto {\n");
            sb.Append("  DeletePermanently: ").Append(DeletePermanently).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (int?) maximum
            if (this.Value > (int?)999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value less than or equal to 999.", new [] { "Value" });
            }

            // Value (int?) minimum
            if (this.Value < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value greater than or equal to 1.", new [] { "Value" });
            }

            yield break;
        }
    }

}
