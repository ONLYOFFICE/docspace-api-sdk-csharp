/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// SmtpOperationStatusRequestsDto
    /// </summary>
    [DataContract(Name = "SmtpOperationStatusRequestsDto")]
    public partial class SmtpOperationStatusRequestsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpOperationStatusRequestsDto" /> class.
        /// </summary>
        /// <param name="completed">Specifies if the SMTP operation is completed or not.</param>
        /// <param name="id">SMTP operation ID.</param>
        /// <param name="error">SMTP operation error.</param>
        /// <param name="status">SMTP operation status.</param>
        /// <param name="percents">Percentage of SMTP operation completion.</param>
        public SmtpOperationStatusRequestsDto(bool completed = default(bool), string id = default(string), string error = default(string), string status = default(string), int percents = default(int))
        {
            this.Completed = completed;
            this.Id = id;
            this.Error = error;
            this.Status = status;
            this.Percents = percents;
        }

        /// <summary>
        /// Specifies if the SMTP operation is completed or not
        /// </summary>
        /// <value>Specifies if the SMTP operation is completed or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "completed", EmitDefaultValue = true)]
        public bool Completed { get; set; }

        /// <summary>
        /// SMTP operation ID
        /// </summary>
        /// <value>SMTP operation ID</value>
        /*
        <example>{some-random-guid}</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// SMTP operation error
        /// </summary>
        /// <value>SMTP operation error</value>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// SMTP operation status
        /// </summary>
        /// <value>SMTP operation status</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Percentage of SMTP operation completion
        /// </summary>
        /// <value>Percentage of SMTP operation completion</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "percents", EmitDefaultValue = false)]
        public int Percents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmtpOperationStatusRequestsDto {\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Percents: ").Append(Percents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
