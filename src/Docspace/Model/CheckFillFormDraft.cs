/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Parameters for checking a form draft
    /// </summary>
    [DataContract(Name = "CheckFillFormDraft")]
    public partial class CheckFillFormDraft : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckFillFormDraft" /> class.
        /// </summary>
        /// <param name="varVersion">File version.</param>
        /// <param name="action">Action with a form.</param>
        public CheckFillFormDraft(int varVersion = default(int), string action = default(string))
        {
            this.VarVersion = varVersion;
            this.Action = action;
        }

        /// <summary>
        /// File version
        /// </summary>
        /// <value>File version</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Action with a form
        /// </summary>
        /// <value>Action with a form</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Specifies whether to request a form for viewing or not
        /// </summary>
        /// <value>Specifies whether to request a form for viewing or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "requestView", EmitDefaultValue = true)]
        public bool RequestView { get; private set; }

        /// <summary>
        /// Returns false as RequestView should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequestView()
        {
            return false;
        }
        /// <summary>
        /// Specifies whether to request an embedded form or not
        /// </summary>
        /// <value>Specifies whether to request an embedded form or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "requestEmbedded", EmitDefaultValue = true)]
        public bool RequestEmbedded { get; private set; }

        /// <summary>
        /// Returns false as RequestEmbedded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequestEmbedded()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckFillFormDraft {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  RequestView: ").Append(RequestView).Append("\n");
            sb.Append("  RequestEmbedded: ").Append(RequestEmbedded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
