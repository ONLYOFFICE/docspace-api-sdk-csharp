/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// FileDtoInteger
    /// </summary>
    [DataContract(Name = "FileDtoInteger")]
    public partial class FileDtoInteger : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", EmitDefaultValue = false)]
        public FileShare? Access { get; set; }

        /// <summary>
        /// Gets or Sets RootFolderType
        /// </summary>
        [DataMember(Name = "rootFolderType", EmitDefaultValue = false)]
        public FolderType? RootFolderType { get; set; }

        /// <summary>
        /// Gets or Sets ParentRoomType
        /// </summary>
        [DataMember(Name = "parentRoomType", EmitDefaultValue = false)]
        public FolderType? ParentRoomType { get; set; }

        /// <summary>
        /// Gets or Sets FileStatus
        /// </summary>
        [DataMember(Name = "fileStatus", EmitDefaultValue = false)]
        public FileStatus? FileStatus { get; set; }

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name = "fileType", EmitDefaultValue = false)]
        public FileType? FileType { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailStatus
        /// </summary>
        [DataMember(Name = "thumbnailStatus", EmitDefaultValue = false)]
        public Thumbnail? ThumbnailStatus { get; set; }

        /// <summary>
        /// Gets or Sets FileEntryType
        /// </summary>
        [DataMember(Name = "fileEntryType", EmitDefaultValue = false)]
        public FileEntryType? FileEntryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileDtoInteger" /> class.
        /// </summary>
        /// <param name="title">Title.</param>
        /// <param name="access">access.</param>
        /// <param name="shared">Specifies if the file is shared or not.</param>
        /// <param name="created">created.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="updated">updated.</param>
        /// <param name="autoDelete">autoDelete.</param>
        /// <param name="rootFolderType">rootFolderType.</param>
        /// <param name="parentRoomType">parentRoomType.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="providerItem">Provider is specified or not.</param>
        /// <param name="providerKey">Provider key.</param>
        /// <param name="providerId">Provider ID.</param>
        /// <param name="order">Order.</param>
        /// <param name="id">Id.</param>
        /// <param name="rootFolderId">Root folder id.</param>
        /// <param name="originId">Origin id.</param>
        /// <param name="originRoomId">Origin room id.</param>
        /// <param name="originTitle">Origin title.</param>
        /// <param name="originRoomTitle">Origin room title.</param>
        /// <param name="canShare">Can share.</param>
        /// <param name="security">security.</param>
        /// <param name="requestToken">requestToken.</param>
        /// <param name="folderId">Folder ID.</param>
        /// <param name="varVersion">Version.</param>
        /// <param name="versionGroup">Version group.</param>
        /// <param name="contentLength">Content length.</param>
        /// <param name="pureContentLength">Pure content length.</param>
        /// <param name="fileStatus">fileStatus.</param>
        /// <param name="mute">Muted or not.</param>
        /// <param name="viewUrl">URL to view a file.</param>
        /// <param name="webUrl">Web URL.</param>
        /// <param name="fileType">fileType.</param>
        /// <param name="fileExst">File extension.</param>
        /// <param name="comment">Comment.</param>
        /// <param name="encrypted">Encrypted or not.</param>
        /// <param name="thumbnailUrl">Thumbnail URL.</param>
        /// <param name="thumbnailStatus">thumbnailStatus.</param>
        /// <param name="locked">Locked or not.</param>
        /// <param name="lockedBy">User ID who locked a file.</param>
        /// <param name="hasDraft">Is there a draft or not.</param>
        /// <param name="isForm">Is there a form or not.</param>
        /// <param name="startFilling">Specifies if the filling has started or not.</param>
        /// <param name="inProcessFolderId">InProcess folder ID.</param>
        /// <param name="inProcessFolderTitle">InProcess folder title.</param>
        /// <param name="draftLocation">draftLocation.</param>
        /// <param name="viewAccessibility">viewAccessibility.</param>
        /// <param name="availableExternalRights">Available external rights.</param>
        /// <param name="lastOpened">lastOpened.</param>
        /// <param name="expired">expired.</param>
        /// <param name="fileEntryType">fileEntryType.</param>
        public FileDtoInteger(string title = default(string), FileShare? access = default(FileShare?), bool shared = default(bool), ApiDateTime created = default(ApiDateTime), EmployeeDto createdBy = default(EmployeeDto), ApiDateTime updated = default(ApiDateTime), ApiDateTime autoDelete = default(ApiDateTime), FolderType? rootFolderType = default(FolderType?), FolderType? parentRoomType = default(FolderType?), EmployeeDto updatedBy = default(EmployeeDto), bool? providerItem = default(bool?), string providerKey = default(string), int? providerId = default(int?), string order = default(string), int id = default(int), int rootFolderId = default(int), int originId = default(int), int originRoomId = default(int), string originTitle = default(string), string originRoomTitle = default(string), bool canShare = default(bool), FileDtoIntegerSecurity security = default(FileDtoIntegerSecurity), string requestToken = default(string), int folderId = default(int), int varVersion = default(int), int versionGroup = default(int), string contentLength = default(string), long? pureContentLength = default(long?), FileStatus? fileStatus = default(FileStatus?), bool mute = default(bool), string viewUrl = default(string), string webUrl = default(string), FileType? fileType = default(FileType?), string fileExst = default(string), string comment = default(string), bool? encrypted = default(bool?), string thumbnailUrl = default(string), Thumbnail? thumbnailStatus = default(Thumbnail?), bool? locked = default(bool?), string lockedBy = default(string), bool? hasDraft = default(bool?), bool? isForm = default(bool?), bool? startFilling = default(bool?), int? inProcessFolderId = default(int?), string inProcessFolderTitle = default(string), DraftLocationInteger draftLocation = default(DraftLocationInteger), FileDtoIntegerViewAccessibility viewAccessibility = default(FileDtoIntegerViewAccessibility), Dictionary<string, bool> availableExternalRights = default(Dictionary<string, bool>), ApiDateTime lastOpened = default(ApiDateTime), ApiDateTime expired = default(ApiDateTime), FileEntryType? fileEntryType = default(FileEntryType?))
        {
            this.Title = title;
            this.Access = access;
            this.Shared = shared;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.Updated = updated;
            this.AutoDelete = autoDelete;
            this.RootFolderType = rootFolderType;
            this.ParentRoomType = parentRoomType;
            this.UpdatedBy = updatedBy;
            this.ProviderItem = providerItem;
            this.ProviderKey = providerKey;
            this.ProviderId = providerId;
            this.Order = order;
            this.Id = id;
            this.RootFolderId = rootFolderId;
            this.OriginId = originId;
            this.OriginRoomId = originRoomId;
            this.OriginTitle = originTitle;
            this.OriginRoomTitle = originRoomTitle;
            this.CanShare = canShare;
            this.Security = security;
            this.RequestToken = requestToken;
            this.FolderId = folderId;
            this.VarVersion = varVersion;
            this.VersionGroup = versionGroup;
            this.ContentLength = contentLength;
            this.PureContentLength = pureContentLength;
            this.FileStatus = fileStatus;
            this.Mute = mute;
            this.ViewUrl = viewUrl;
            this.WebUrl = webUrl;
            this.FileType = fileType;
            this.FileExst = fileExst;
            this.Comment = comment;
            this.Encrypted = encrypted;
            this.ThumbnailUrl = thumbnailUrl;
            this.ThumbnailStatus = thumbnailStatus;
            this.Locked = locked;
            this.LockedBy = lockedBy;
            this.HasDraft = hasDraft;
            this.IsForm = isForm;
            this.StartFilling = startFilling;
            this.InProcessFolderId = inProcessFolderId;
            this.InProcessFolderTitle = inProcessFolderTitle;
            this.DraftLocation = draftLocation;
            this.ViewAccessibility = viewAccessibility;
            this.AvailableExternalRights = availableExternalRights;
            this.LastOpened = lastOpened;
            this.Expired = expired;
            this.FileEntryType = fileEntryType;
        }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        /*
        <example>Some titile.txt/ Some title</example>
        */
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Specifies if the file is shared or not
        /// </summary>
        /// <value>Specifies if the file is shared or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public bool Shared { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public ApiDateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public EmployeeDto CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public ApiDateTime Updated { get; set; }

        /// <summary>
        /// Gets or Sets AutoDelete
        /// </summary>
        [DataMember(Name = "autoDelete", EmitDefaultValue = false)]
        public ApiDateTime AutoDelete { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = false)]
        public EmployeeDto UpdatedBy { get; set; }

        /// <summary>
        /// Provider is specified or not
        /// </summary>
        /// <value>Provider is specified or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "providerItem", EmitDefaultValue = true)]
        public bool? ProviderItem { get; set; }

        /// <summary>
        /// Provider key
        /// </summary>
        /// <value>Provider key</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "providerKey", EmitDefaultValue = true)]
        public string ProviderKey { get; set; }

        /// <summary>
        /// Provider ID
        /// </summary>
        /// <value>Provider ID</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "providerId", EmitDefaultValue = true)]
        public int? ProviderId { get; set; }

        /// <summary>
        /// Order
        /// </summary>
        /// <value>Order</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public string Order { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Root folder id
        /// </summary>
        /// <value>Root folder id</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "rootFolderId", EmitDefaultValue = false)]
        public int RootFolderId { get; set; }

        /// <summary>
        /// Origin id
        /// </summary>
        /// <value>Origin id</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "originId", EmitDefaultValue = false)]
        public int OriginId { get; set; }

        /// <summary>
        /// Origin room id
        /// </summary>
        /// <value>Origin room id</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "originRoomId", EmitDefaultValue = false)]
        public int OriginRoomId { get; set; }

        /// <summary>
        /// Origin title
        /// </summary>
        /// <value>Origin title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "originTitle", EmitDefaultValue = true)]
        public string OriginTitle { get; set; }

        /// <summary>
        /// Origin room title
        /// </summary>
        /// <value>Origin room title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "originRoomTitle", EmitDefaultValue = true)]
        public string OriginRoomTitle { get; set; }

        /// <summary>
        /// Can share
        /// </summary>
        /// <value>Can share</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "canShare", EmitDefaultValue = true)]
        public bool CanShare { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name = "security", EmitDefaultValue = true)]
        public FileDtoIntegerSecurity Security { get; set; }

        /// <summary>
        /// Gets or Sets RequestToken
        /// </summary>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "requestToken", EmitDefaultValue = true)]
        public string RequestToken { get; set; }

        /// <summary>
        /// Folder ID
        /// </summary>
        /// <value>Folder ID</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "folderId", EmitDefaultValue = false)]
        public int FolderId { get; set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        /*
        <example>3</example>
        */
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Version group
        /// </summary>
        /// <value>Version group</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "versionGroup", EmitDefaultValue = false)]
        public int VersionGroup { get; set; }

        /// <summary>
        /// Content length
        /// </summary>
        /// <value>Content length</value>
        /*
        <example>12345</example>
        */
        [DataMember(Name = "contentLength", EmitDefaultValue = true)]
        public string ContentLength { get; set; }

        /// <summary>
        /// Pure content length
        /// </summary>
        /// <value>Pure content length</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "pureContentLength", EmitDefaultValue = true)]
        public long? PureContentLength { get; set; }

        /// <summary>
        /// Muted or not
        /// </summary>
        /// <value>Muted or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "mute", EmitDefaultValue = true)]
        public bool Mute { get; set; }

        /// <summary>
        /// URL to view a file
        /// </summary>
        /// <value>URL to view a file</value>
        /*
        <example>https://www.onlyoffice.com/viewfile?fileid&#x3D;2221</example>
        */
        [DataMember(Name = "viewUrl", EmitDefaultValue = true)]
        public string ViewUrl { get; set; }

        /// <summary>
        /// Web URL
        /// </summary>
        /// <value>Web URL</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "webUrl", EmitDefaultValue = true)]
        public string WebUrl { get; set; }

        /// <summary>
        /// File extension
        /// </summary>
        /// <value>File extension</value>
        /*
        <example>.txt</example>
        */
        [DataMember(Name = "fileExst", EmitDefaultValue = true)]
        public string FileExst { get; set; }

        /// <summary>
        /// Comment
        /// </summary>
        /// <value>Comment</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Encrypted or not
        /// </summary>
        /// <value>Encrypted or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "encrypted", EmitDefaultValue = true)]
        public bool? Encrypted { get; set; }

        /// <summary>
        /// Thumbnail URL
        /// </summary>
        /// <value>Thumbnail URL</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "thumbnailUrl", EmitDefaultValue = true)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// Locked or not
        /// </summary>
        /// <value>Locked or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool? Locked { get; set; }

        /// <summary>
        /// User ID who locked a file
        /// </summary>
        /// <value>User ID who locked a file</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "lockedBy", EmitDefaultValue = true)]
        public string LockedBy { get; set; }

        /// <summary>
        /// Is there a draft or not
        /// </summary>
        /// <value>Is there a draft or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "hasDraft", EmitDefaultValue = true)]
        public bool? HasDraft { get; set; }

        /// <summary>
        /// Is there a form or not
        /// </summary>
        /// <value>Is there a form or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "isForm", EmitDefaultValue = true)]
        public bool? IsForm { get; set; }

        /// <summary>
        /// Specifies if the filling has started or not
        /// </summary>
        /// <value>Specifies if the filling has started or not</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "startFilling", EmitDefaultValue = true)]
        public bool? StartFilling { get; set; }

        /// <summary>
        /// InProcess folder ID
        /// </summary>
        /// <value>InProcess folder ID</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "inProcessFolderId", EmitDefaultValue = true)]
        public int? InProcessFolderId { get; set; }

        /// <summary>
        /// InProcess folder title
        /// </summary>
        /// <value>InProcess folder title</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "inProcessFolderTitle", EmitDefaultValue = true)]
        public string InProcessFolderTitle { get; set; }

        /// <summary>
        /// Gets or Sets DraftLocation
        /// </summary>
        [DataMember(Name = "draftLocation", EmitDefaultValue = false)]
        public DraftLocationInteger DraftLocation { get; set; }

        /// <summary>
        /// Gets or Sets ViewAccessibility
        /// </summary>
        [DataMember(Name = "viewAccessibility", EmitDefaultValue = true)]
        public FileDtoIntegerViewAccessibility ViewAccessibility { get; set; }

        /// <summary>
        /// Available external rights
        /// </summary>
        /// <value>Available external rights</value>
        /*
        <example>[{&quot;key&quot;:&quot;some text&quot;,&quot;value&quot;:true}]</example>
        */
        [DataMember(Name = "availableExternalRights", EmitDefaultValue = true)]
        public Dictionary<string, bool> AvailableExternalRights { get; set; }

        /// <summary>
        /// Gets or Sets LastOpened
        /// </summary>
        [DataMember(Name = "lastOpened", EmitDefaultValue = false)]
        public ApiDateTime LastOpened { get; set; }

        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name = "expired", EmitDefaultValue = false)]
        public ApiDateTime Expired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileDtoInteger {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  AutoDelete: ").Append(AutoDelete).Append("\n");
            sb.Append("  RootFolderType: ").Append(RootFolderType).Append("\n");
            sb.Append("  ParentRoomType: ").Append(ParentRoomType).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  ProviderItem: ").Append(ProviderItem).Append("\n");
            sb.Append("  ProviderKey: ").Append(ProviderKey).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RootFolderId: ").Append(RootFolderId).Append("\n");
            sb.Append("  OriginId: ").Append(OriginId).Append("\n");
            sb.Append("  OriginRoomId: ").Append(OriginRoomId).Append("\n");
            sb.Append("  OriginTitle: ").Append(OriginTitle).Append("\n");
            sb.Append("  OriginRoomTitle: ").Append(OriginRoomTitle).Append("\n");
            sb.Append("  CanShare: ").Append(CanShare).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  RequestToken: ").Append(RequestToken).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  VersionGroup: ").Append(VersionGroup).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  PureContentLength: ").Append(PureContentLength).Append("\n");
            sb.Append("  FileStatus: ").Append(FileStatus).Append("\n");
            sb.Append("  Mute: ").Append(Mute).Append("\n");
            sb.Append("  ViewUrl: ").Append(ViewUrl).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  FileExst: ").Append(FileExst).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  ThumbnailStatus: ").Append(ThumbnailStatus).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  LockedBy: ").Append(LockedBy).Append("\n");
            sb.Append("  HasDraft: ").Append(HasDraft).Append("\n");
            sb.Append("  IsForm: ").Append(IsForm).Append("\n");
            sb.Append("  StartFilling: ").Append(StartFilling).Append("\n");
            sb.Append("  InProcessFolderId: ").Append(InProcessFolderId).Append("\n");
            sb.Append("  InProcessFolderTitle: ").Append(InProcessFolderTitle).Append("\n");
            sb.Append("  DraftLocation: ").Append(DraftLocation).Append("\n");
            sb.Append("  ViewAccessibility: ").Append(ViewAccessibility).Append("\n");
            sb.Append("  AvailableExternalRights: ").Append(AvailableExternalRights).Append("\n");
            sb.Append("  LastOpened: ").Append(LastOpened).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  FileEntryType: ").Append(FileEntryType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
