/*
 * ASC.Web.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Docspace.Client.FileParameter;
using OpenAPIDateConverter = Docspace.Client.OpenAPIDateConverter;

namespace Docspace.Model
{
    /// <summary>
    /// Wizard settings request parameters
    /// </summary>
    [DataContract(Name = "WizardRequestsDto")]
    public partial class WizardRequestsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WizardRequestsDto" /> class.
        /// </summary>
        /// <param name="email">Email.</param>
        /// <param name="passwordHash">Password hash.</param>
        /// <param name="lng">Language.</param>
        /// <param name="varTimeZone">Time zone.</param>
        /// <param name="amiId">AMI ID.</param>
        /// <param name="subscribeFromSite">Subscribed from the site or not.</param>
        public WizardRequestsDto(string email = default(string), string passwordHash = default(string), string lng = default(string), string varTimeZone = default(string), string amiId = default(string), bool subscribeFromSite = default(bool))
        {
            this.Email = email;
            this.PasswordHash = passwordHash;
            this.Lng = lng;
            this.VarTimeZone = varTimeZone;
            this.AmiId = amiId;
            this.SubscribeFromSite = subscribeFromSite;
        }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        /*
        <example>Sydney_Roberts4@hotmail.com</example>
        */
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Password hash
        /// </summary>
        /// <value>Password hash</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "passwordHash", EmitDefaultValue = true)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "lng", EmitDefaultValue = true)]
        public string Lng { get; set; }

        /// <summary>
        /// Time zone
        /// </summary>
        /// <value>Time zone</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "timeZone", EmitDefaultValue = true)]
        public string VarTimeZone { get; set; }

        /// <summary>
        /// AMI ID
        /// </summary>
        /// <value>AMI ID</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "amiId", EmitDefaultValue = true)]
        public string AmiId { get; set; }

        /// <summary>
        /// Subscribed from the site or not
        /// </summary>
        /// <value>Subscribed from the site or not</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "subscribeFromSite", EmitDefaultValue = true)]
        public bool SubscribeFromSite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WizardRequestsDto {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  Lng: ").Append(Lng).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("  AmiId: ").Append(AmiId).Append("\n");
            sb.Append("  SubscribeFromSite: ").Append(SubscribeFromSite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
