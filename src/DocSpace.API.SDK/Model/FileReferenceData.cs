// (c) Copyright Ascensio System SIA 2025
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

 
 using DocSpace.API.SDK.Client;
 

namespace DocSpace.API.SDK.Model
{
    /// <summary>
    /// An object that is generated by the integrator to uniquely identify a file in its system.
    /// </summary>
    [DataContract(Name = "FileReferenceData")]
    public partial class FileReferenceData : IValidatableObject
    {
    
        /// <summary>
        /// Initializes a new instance of the <see cref="FileReferenceData" /> class.
        /// </summary>
        /// <param name="fileKey">The unique document identifier used by the service to get a link to the file..</param>
        /// <param name="instanceId">The unique system identifier..</param>
        /// <param name="roomId">Room ID.</param>
        /// <param name="canEditRoom">Specifies if the room can be edited out or not..</param>
        public FileReferenceData(string fileKey = default, string instanceId = default, string roomId = default, bool canEditRoom = default)
        {
            this.FileKey = fileKey;
            this.InstanceId = instanceId;
            this.RoomId = roomId;
            this.CanEditRoom = canEditRoom;
        }

        /// <summary>
        /// The unique document identifier used by the service to get a link to the file.
        /// </summary>
        /// <value>The unique document identifier used by the service to get a link to the file.</value>
        /*
        <example>some text</example>
        */
        [DataMember(Name = "fileKey", EmitDefaultValue = true)]
        public string FileKey { get; set; }

        /// <summary>
        /// The unique system identifier.
        /// </summary>
        /// <value>The unique system identifier.</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "instanceId", EmitDefaultValue = true)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Room ID
        /// </summary>
        /// <value>Room ID</value>
        /*
        <example>9846</example>
        */
        [DataMember(Name = "roomId", EmitDefaultValue = true)]
        public string RoomId { get; set; }

        /// <summary>
        /// Specifies if the room can be edited out or not.
        /// </summary>
        /// <value>Specifies if the room can be edited out or not.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "canEditRoom", EmitDefaultValue = true)]
        public bool CanEditRoom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileReferenceData {\n");
            sb.Append("  FileKey: ").Append(FileKey).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  CanEditRoom: ").Append(CanEditRoom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }


}
