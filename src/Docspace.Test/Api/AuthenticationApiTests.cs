/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Docspace.Client;
using Docspace.Api;
// uncomment below to import models
//using Docspace.Model;

namespace Docspace.Test.Api
{
    /// <summary>
    ///  Class for testing AuthenticationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthenticationApiTests : IDisposable
    {
        private AuthenticationApi instance;

        public AuthenticationApiTests()
        {
            instance = new AuthenticationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AuthenticationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AuthenticationApi
            //Assert.IsType<AuthenticationApi>(instance);
        }

        /// <summary>
        /// Test AuthenticateMe
        /// </summary>
        [Fact]
        public void AuthenticateMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthRequestsDto? authRequestsDto = null;
            //var response = instance.AuthenticateMe(authRequestsDto);
            //Assert.IsType<AuthenticationTokenWrapper>(response);
        }

        /// <summary>
        /// Test AuthenticateMeFromBodyWithCode
        /// </summary>
        [Fact]
        public void AuthenticateMeFromBodyWithCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //AuthRequestsDto? authRequestsDto = null;
            //var response = instance.AuthenticateMeFromBodyWithCode(code, authRequestsDto);
            //Assert.IsType<AuthenticationTokenWrapper>(response);
        }

        /// <summary>
        /// Test CheckConfirm
        /// </summary>
        [Fact]
        public void CheckConfirmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmailValidationKeyModel? emailValidationKeyModel = null;
            //var response = instance.CheckConfirm(emailValidationKeyModel);
            //Assert.IsType<ConfirmWrapper>(response);
        }

        /// <summary>
        /// Test GetIsAuthentificated
        /// </summary>
        [Fact]
        public void GetIsAuthentificatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetIsAuthentificated();
            //Assert.IsType<BooleanWrapper>(response);
        }

        /// <summary>
        /// Test Logout
        /// </summary>
        [Fact]
        public void LogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Logout();
            //Assert.IsType<StringWrapper>(response);
        }

        /// <summary>
        /// Test SaveMobilePhone
        /// </summary>
        [Fact]
        public void SaveMobilePhoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MobileRequestsDto? mobileRequestsDto = null;
            //var response = instance.SaveMobilePhone(mobileRequestsDto);
            //Assert.IsType<AuthenticationTokenWrapper>(response);
        }

        /// <summary>
        /// Test SendSmsCode
        /// </summary>
        [Fact]
        public void SendSmsCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthRequestsDto? authRequestsDto = null;
            //var response = instance.SendSmsCode(authRequestsDto);
            //Assert.IsType<AuthenticationTokenWrapper>(response);
        }
    }
}
