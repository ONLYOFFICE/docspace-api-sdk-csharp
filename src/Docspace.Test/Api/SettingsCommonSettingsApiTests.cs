/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Docspace.Client;
using Docspace.Api;
// uncomment below to import models
//using Docspace.Model;

namespace Docspace.Test.Api
{
    /// <summary>
    ///  Class for testing SettingsCommonSettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SettingsCommonSettingsApiTests : IDisposable
    {
        private SettingsCommonSettingsApi instance;

        public SettingsCommonSettingsApiTests()
        {
            instance = new SettingsCommonSettingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SettingsCommonSettingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SettingsCommonSettingsApi
            //Assert.IsType<SettingsCommonSettingsApi>(instance);
        }

        /// <summary>
        /// Test CloseAdminHelper
        /// </summary>
        [Fact]
        public void CloseAdminHelperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.CloseAdminHelper();
        }

        /// <summary>
        /// Test CompleteWizard
        /// </summary>
        [Fact]
        public void CompleteWizardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WizardRequestsDto? wizardRequestsDto = null;
            //var response = instance.CompleteWizard(wizardRequestsDto);
            //Assert.IsType<WizardSettingsWrapper>(response);
        }

        /// <summary>
        /// Test DeleteColorTheme
        /// </summary>
        [Fact]
        public void DeleteColorThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.DeleteColorTheme(id);
            //Assert.IsType<CustomColorThemesSettingsWrapper>(response);
        }

        /// <summary>
        /// Test GetColorTheme
        /// </summary>
        [Fact]
        public void GetColorThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetColorTheme();
            //Assert.IsType<CustomColorThemesSettingsWrapper>(response);
        }

        /// <summary>
        /// Test GetLogo
        /// </summary>
        [Fact]
        public void GetLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLogo();
            //Assert.IsType<StringWrapper>(response);
        }

        /// <summary>
        /// Test GetMachineName
        /// </summary>
        [Fact]
        public void GetMachineNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMachineName();
            //Assert.IsType<ObjectWrapper>(response);
        }

        /// <summary>
        /// Test GetSettings
        /// </summary>
        [Fact]
        public void GetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? withpassword = null;
            //var response = instance.GetSettings(withpassword);
            //Assert.IsType<SettingsWrapper>(response);
        }

        /// <summary>
        /// Test GetSocketSettings
        /// </summary>
        [Fact]
        public void GetSocketSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSocketSettings();
            //Assert.IsType<ObjectWrapper>(response);
        }

        /// <summary>
        /// Test GetSupportedCultures
        /// </summary>
        [Fact]
        public void GetSupportedCulturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSupportedCultures();
            //Assert.IsType<STRINGArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetTimeZonesAsync
        /// </summary>
        [Fact]
        public void GetTimeZonesAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTimeZonesAsync();
            //Assert.IsType<TimezonesRequestsArrayWrapper>(response);
        }

        /// <summary>
        /// Test GettDeepLinkSettings
        /// </summary>
        [Fact]
        public void GettDeepLinkSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GettDeepLinkSettings();
            //Assert.IsType<TenantDeepLinkSettingsWrapper>(response);
        }

        /// <summary>
        /// Test PaymentSettings
        /// </summary>
        [Fact]
        public void PaymentSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PaymentSettings();
            //Assert.IsType<PaymentSettingsWrapper>(response);
        }

        /// <summary>
        /// Test SaveColorTheme
        /// </summary>
        [Fact]
        public void SaveColorThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomColorThemesSettingsRequestsDto? customColorThemesSettingsRequestsDto = null;
            //var response = instance.SaveColorTheme(customColorThemesSettingsRequestsDto);
            //Assert.IsType<CustomColorThemesSettingsWrapper>(response);
        }

        /// <summary>
        /// Test SaveConfigureDeepLink
        /// </summary>
        [Fact]
        public void SaveConfigureDeepLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeepLinkConfigurationRequestsDto? deepLinkConfigurationRequestsDto = null;
            //var response = instance.SaveConfigureDeepLink(deepLinkConfigurationRequestsDto);
            //Assert.IsType<TenantDeepLinkSettingsWrapper>(response);
        }

        /// <summary>
        /// Test SaveDnsSettings
        /// </summary>
        [Fact]
        public void SaveDnsSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DnsSettingsRequestsDto? dnsSettingsRequestsDto = null;
            //var response = instance.SaveDnsSettings(dnsSettingsRequestsDto);
            //Assert.IsType<StringWrapper>(response);
        }

        /// <summary>
        /// Test SaveMailDomainSettings
        /// </summary>
        [Fact]
        public void SaveMailDomainSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MailDomainSettingsRequestsDto? mailDomainSettingsRequestsDto = null;
            //var response = instance.SaveMailDomainSettings(mailDomainSettingsRequestsDto);
            //Assert.IsType<StringWrapper>(response);
        }

        /// <summary>
        /// Test UpdateEmailActivationSettings
        /// </summary>
        [Fact]
        public void UpdateEmailActivationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmailActivationSettings? emailActivationSettings = null;
            //var response = instance.UpdateEmailActivationSettings(emailActivationSettings);
            //Assert.IsType<EmailActivationSettingsWrapper>(response);
        }
    }
}
