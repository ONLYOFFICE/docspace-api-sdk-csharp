/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Docspace.Client;
using Docspace.Api;
// uncomment below to import models
//using Docspace.Model;

namespace Docspace.Test.Api
{
    /// <summary>
    ///  Class for testing PeopleSearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PeopleSearchApiTests : IDisposable
    {
        private PeopleSearchApi instance;

        public PeopleSearchApiTests()
        {
            instance = new PeopleSearchApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PeopleSearchApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PeopleSearchApi
            //Assert.IsType<PeopleSearchApi>(instance);
        }

        /// <summary>
        /// Test GetAccountsEntriesWithShared
        /// </summary>
        [Fact]
        public void GetAccountsEntriesWithSharedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //EmployeeStatus? employeeStatus = null;
            //EmployeeActivationStatus? activationStatus = null;
            //bool? excludeShared = null;
            //bool? includeShared = null;
            //bool? invitedByMe = null;
            //Guid? inviterId = null;
            //Area? area = null;
            //List<EmployeeType>? employeeTypes = null;
            //var response = instance.GetAccountsEntriesWithShared(id, employeeStatus, activationStatus, excludeShared, includeShared, invitedByMe, inviterId, area, employeeTypes);
            //Assert.IsType<ObjectArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetAdvanced
        /// </summary>
        [Fact]
        public void GetAdvancedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmployeeStatus status = null;
            //string? query = null;
            //var response = instance.GetAdvanced(status, query);
            //Assert.IsType<EmployeeFullArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetFullByFilter
        /// </summary>
        [Fact]
        public void GetFullByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmployeeStatus? employeeStatus = null;
            //Guid? groupId = null;
            //EmployeeActivationStatus? activationStatus = null;
            //EmployeeType? employeeType = null;
            //List<int>? employeeTypes = null;
            //bool? isAdministrator = null;
            //Payments? payments = null;
            //AccountLoginType? accountLoginType = null;
            //QuotaFilter? quotaFilter = null;
            //bool? withoutGroup = null;
            //bool? excludeGroup = null;
            //bool? invitedByMe = null;
            //Guid? inviterId = null;
            //Area? area = null;
            //var response = instance.GetFullByFilter(employeeStatus, groupId, activationStatus, employeeType, employeeTypes, isAdministrator, payments, accountLoginType, quotaFilter, withoutGroup, excludeGroup, invitedByMe, inviterId, area);
            //Assert.IsType<EmployeeFullArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetPeopleSearch
        /// </summary>
        [Fact]
        public void GetPeopleSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? query = null;
            //var response = instance.GetPeopleSearch(query);
            //Assert.IsType<EmployeeArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetSearch
        /// </summary>
        [Fact]
        public void GetSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //var response = instance.GetSearch(query);
            //Assert.IsType<EmployeeFullArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetSimpleByFilter
        /// </summary>
        [Fact]
        public void GetSimpleByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmployeeStatus? employeeStatus = null;
            //Guid? groupId = null;
            //EmployeeActivationStatus? activationStatus = null;
            //EmployeeType? employeeType = null;
            //List<int>? employeeTypes = null;
            //bool? isAdministrator = null;
            //Payments? payments = null;
            //AccountLoginType? accountLoginType = null;
            //QuotaFilter? quotaFilter = null;
            //bool? withoutGroup = null;
            //bool? excludeGroup = null;
            //bool? invitedByMe = null;
            //Guid? inviterId = null;
            //Area? area = null;
            //var response = instance.GetSimpleByFilter(employeeStatus, groupId, activationStatus, employeeType, employeeTypes, isAdministrator, payments, accountLoginType, quotaFilter, withoutGroup, excludeGroup, invitedByMe, inviterId, area);
            //Assert.IsType<EmployeeArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetUsersWithRoomShared
        /// </summary>
        [Fact]
        public void GetUsersWithRoomSharedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //EmployeeStatus? employeeStatus = null;
            //EmployeeActivationStatus? activationStatus = null;
            //bool? excludeShared = null;
            //bool? includeShared = null;
            //bool? invitedByMe = null;
            //Guid? inviterId = null;
            //Area? area = null;
            //List<EmployeeType>? employeeTypes = null;
            //var response = instance.GetUsersWithRoomShared(id, employeeStatus, activationStatus, excludeShared, includeShared, invitedByMe, inviterId, area, employeeTypes);
            //Assert.IsType<EmployeeFullArrayWrapper>(response);
        }
    }
}
