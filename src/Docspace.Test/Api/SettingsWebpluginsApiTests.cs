/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Docspace.Client;
using Docspace.Api;
// uncomment below to import models
//using Docspace.Model;

namespace Docspace.Test.Api
{
    /// <summary>
    ///  Class for testing SettingsWebpluginsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SettingsWebpluginsApiTests : IDisposable
    {
        private SettingsWebpluginsApi instance;

        public SettingsWebpluginsApiTests()
        {
            instance = new SettingsWebpluginsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SettingsWebpluginsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SettingsWebpluginsApi
            //Assert.IsType<SettingsWebpluginsApi>(instance);
        }

        /// <summary>
        /// Test AddWebPluginFromFile
        /// </summary>
        [Fact]
        public void AddWebPluginFromFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? varSystem = null;
            //var response = instance.AddWebPluginFromFile(varSystem);
            //Assert.IsType<WebPluginWrapper>(response);
        }

        /// <summary>
        /// Test DeleteWebPlugin
        /// </summary>
        [Fact]
        public void DeleteWebPluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteWebPlugin(name);
        }

        /// <summary>
        /// Test GetWebPlugin
        /// </summary>
        [Fact]
        public void GetWebPluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetWebPlugin(name);
            //Assert.IsType<WebPluginWrapper>(response);
        }

        /// <summary>
        /// Test GetWebPlugins
        /// </summary>
        [Fact]
        public void GetWebPluginsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? enabled = null;
            //var response = instance.GetWebPlugins(enabled);
            //Assert.IsType<WebPluginArrayWrapper>(response);
        }

        /// <summary>
        /// Test UpdateWebPlugin
        /// </summary>
        [Fact]
        public void UpdateWebPluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //WebPluginRequests? webPluginRequests = null;
            //instance.UpdateWebPlugin(name, webPluginRequests);
        }
    }
}
