/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Docspace.Client;
using Docspace.Api;
// uncomment below to import models
//using Docspace.Model;

namespace Docspace.Test.Api
{
    /// <summary>
    ///  Class for testing GroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupApiTests : IDisposable
    {
        private GroupApi instance;

        public GroupApiTests()
        {
            instance = new GroupApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GroupApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GroupApi
            //Assert.IsType<GroupApi>(instance);
        }

        /// <summary>
        /// Test AddGroup
        /// </summary>
        [Fact]
        public void AddGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupRequestDto? groupRequestDto = null;
            //var response = instance.AddGroup(groupRequestDto);
            //Assert.IsType<GroupWrapper>(response);
        }

        /// <summary>
        /// Test AddMembersTo
        /// </summary>
        [Fact]
        public void AddMembersToTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //MembersRequest? membersRequest = null;
            //var response = instance.AddMembersTo(id, membersRequest);
            //Assert.IsType<GroupWrapper>(response);
        }

        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Fact]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DeleteGroup(id);
            //Assert.IsType<NoContentResultWrapper>(response);
        }

        /// <summary>
        /// Test GetByUserId
        /// </summary>
        [Fact]
        public void GetByUserIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userid = null;
            //var response = instance.GetByUserId(userid);
            //Assert.IsType<GroupSummaryArrayWrapper>(response);
        }

        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Fact]
        public void GetGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //bool? includeMembers = null;
            //var response = instance.GetGroup(id, includeMembers);
            //Assert.IsType<GroupWrapper>(response);
        }

        /// <summary>
        /// Test GetGroups
        /// </summary>
        [Fact]
        public void GetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? userId = null;
            //bool? manager = null;
            //var response = instance.GetGroups(userId, manager);
            //Assert.IsType<GroupArrayWrapper>(response);
        }

        /// <summary>
        /// Test RemoveMembersFrom
        /// </summary>
        [Fact]
        public void RemoveMembersFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //MembersRequest? membersRequest = null;
            //var response = instance.RemoveMembersFrom(id, membersRequest);
            //Assert.IsType<GroupWrapper>(response);
        }

        /// <summary>
        /// Test SetManager
        /// </summary>
        [Fact]
        public void SetManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //SetManagerRequest? setManagerRequest = null;
            //var response = instance.SetManager(id, setManagerRequest);
            //Assert.IsType<GroupWrapper>(response);
        }

        /// <summary>
        /// Test SetMembersTo
        /// </summary>
        [Fact]
        public void SetMembersToTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //MembersRequest? membersRequest = null;
            //var response = instance.SetMembersTo(id, membersRequest);
            //Assert.IsType<GroupWrapper>(response);
        }

        /// <summary>
        /// Test TransferMembersTo
        /// </summary>
        [Fact]
        public void TransferMembersToTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid fromId = null;
            //Guid toId = null;
            //var response = instance.TransferMembersTo(fromId, toId);
            //Assert.IsType<GroupWrapper>(response);
        }

        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Fact]
        public void UpdateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //UpdateGroupRequest? updateGroupRequest = null;
            //var response = instance.UpdateGroup(id, updateGroupRequest);
            //Assert.IsType<GroupWrapper>(response);
        }
    }
}
