/*
 * Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Docspace.Client;
using Docspace.Api;
// uncomment below to import models
//using Docspace.Model;

namespace Docspace.Test.Api
{
    /// <summary>
    ///  Class for testing SecurityActiveConnectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SecurityActiveConnectionsApiTests : IDisposable
    {
        private SecurityActiveConnectionsApi instance;

        public SecurityActiveConnectionsApiTests()
        {
            instance = new SecurityActiveConnectionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SecurityActiveConnectionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SecurityActiveConnectionsApi
            //Assert.IsType<SecurityActiveConnectionsApi>(instance);
        }

        /// <summary>
        /// Test GetAllActiveConnections
        /// </summary>
        [Fact]
        public void GetAllActiveConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllActiveConnections();
            //Assert.IsType<ActiveConnectionsWrapper>(response);
        }

        /// <summary>
        /// Test LogOutActiveConnection
        /// </summary>
        [Fact]
        public void LogOutActiveConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int loginEventId = null;
            //var response = instance.LogOutActiveConnection(loginEventId);
            //Assert.IsType<BooleanWrapper>(response);
        }

        /// <summary>
        /// Test LogOutAllActiveConnectionsChangePassword
        /// </summary>
        [Fact]
        public void LogOutAllActiveConnectionsChangePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LogOutAllActiveConnectionsChangePassword();
            //Assert.IsType<StringWrapper>(response);
        }

        /// <summary>
        /// Test LogOutAllActiveConnectionsForUser
        /// </summary>
        [Fact]
        public void LogOutAllActiveConnectionsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //instance.LogOutAllActiveConnectionsForUser(userId);
        }

        /// <summary>
        /// Test LogOutAllExceptThisConnection
        /// </summary>
        [Fact]
        public void LogOutAllExceptThisConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LogOutAllExceptThisConnection();
            //Assert.IsType<StringWrapper>(response);
        }
    }
}
