// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Data.Backup
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BackupAjaxHandler_Schedule : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The backupsStored property</summary>
        public int? BackupsStored { get; set; }
        /// <summary>The cronParams property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_CronParams? CronParams { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_CronParams CronParams { get; set; }
#endif
        /// <summary>The dump property</summary>
        public bool? Dump { get; set; }
        /// <summary>The lastBackupTime property</summary>
        public DateTimeOffset? LastBackupTime { get; set; }
        /// <summary>The storageParams property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule_storageParams? StorageParams { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule_storageParams StorageParams { get; set; }
#endif
        /// <summary>[0 - Documents, 1 - Thridparty documents, 2 - Custom cloud, 3 - Local, 4 - Data store, 5 - Thirdparty consumer]</summary>
        public int? StorageType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backupsStored", n => { BackupsStored = n.GetIntValue(); } },
                { "cronParams", n => { CronParams = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_CronParams>(global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_CronParams.CreateFromDiscriminatorValue); } },
                { "dump", n => { Dump = n.GetBoolValue(); } },
                { "lastBackupTime", n => { LastBackupTime = n.GetDateTimeOffsetValue(); } },
                { "storageParams", n => { StorageParams = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule_storageParams>(global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule_storageParams.CreateFromDiscriminatorValue); } },
                { "storageType", n => { StorageType = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("backupsStored", BackupsStored);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_CronParams>("cronParams", CronParams);
            writer.WriteBoolValue("dump", Dump);
            writer.WriteDateTimeOffsetValue("lastBackupTime", LastBackupTime);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Data.Backup.BackupAjaxHandler_Schedule_storageParams>("storageParams", StorageParams);
            writer.WriteIntValue("storageType", StorageType);
        }
    }
}
#pragma warning restore CS0618
