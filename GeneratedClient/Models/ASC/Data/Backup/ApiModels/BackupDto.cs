// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.Api.Collections.ItemKeyValuePair.System.ObjectNamespace.System;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Data.Backup.ApiModels
{
    /// <summary>
    /// Backup parameters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BackupDto : IParsable
    {
        /// <summary>Specifies if a dump will be created or not</summary>
        public bool? Dump { get; set; }
        /// <summary>Storage parameters</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Api.Collections.ItemKeyValuePair.System.ObjectNamespace.System.ObjectObject>? StorageParams { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Api.Collections.ItemKeyValuePair.System.ObjectNamespace.System.ObjectObject> StorageParams { get; set; }
#endif
        /// <summary>[0 - Documents, 1 - Thridparty documents, 2 - Custom cloud, 3 - Local, 4 - Data store, 5 - Thirdparty consumer]</summary>
        public int? StorageType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Data.Backup.ApiModels.BackupDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Data.Backup.ApiModels.BackupDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Data.Backup.ApiModels.BackupDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dump", n => { Dump = n.GetBoolValue(); } },
                { "storageParams", n => { StorageParams = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Api.Collections.ItemKeyValuePair.System.ObjectNamespace.System.ObjectObject>(global::KiotaPosts.Client.Models.ASC.Api.Collections.ItemKeyValuePair.System.ObjectNamespace.System.ObjectObject.CreateFromDiscriminatorValue)?.AsList(); } },
                { "storageType", n => { StorageType = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("dump", Dump);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Api.Collections.ItemKeyValuePair.System.ObjectNamespace.System.ObjectObject>("storageParams", StorageParams);
            writer.WriteIntValue("storageType", StorageType);
        }
    }
}
#pragma warning restore CS0618
