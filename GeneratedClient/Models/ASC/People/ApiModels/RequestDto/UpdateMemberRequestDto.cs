// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.Api.Core;
using KiotaPosts.Client.Models.ASC.Web.Api.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto
{
    /// <summary>
    /// Request parameters for updating user information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UpdateMemberRequestDto : IParsable
    {
        /// <summary>The birthday property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? Birthday { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime Birthday { get; set; }
#endif
        /// <summary>Comment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>List of user contacts</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact>? Contacts { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact> Contacts { get; set; }
#endif
        /// <summary>Language</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CultureName { get; set; }
#nullable restore
#else
        public string CultureName { get; set; }
#endif
        /// <summary>List of user departments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Department { get; set; }
#nullable restore
#else
        public List<Guid?> Department { get; set; }
#endif
        /// <summary>Specifies whether to disable a user or not</summary>
        public bool? Disable { get; set; }
        /// <summary>Email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Avatar photo URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Files { get; set; }
#nullable restore
#else
        public string Files { get; set; }
#endif
        /// <summary>First name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>Specifies if the user is added via the invitation link or not</summary>
        public bool? FromInviteLink { get; set; }
        /// <summary>Specifies if this is a guest or a user</summary>
        public bool? IsUser { get; set; }
        /// <summary>Key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>Last name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>Location</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>Password</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>Password hash</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PasswordHash { get; set; }
#nullable restore
#else
        public string PasswordHash { get; set; }
#endif
        /// <summary>[0 - Female, 1 - Male]</summary>
        public int? Sex { get; set; }
        /// <summary>Spam</summary>
        public bool? Spam { get; set; }
        /// <summary>Target</summary>
        public Guid? Target { get; set; }
        /// <summary>Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>[0 - All, 1 - Room admin, 2 - Guest, 3 - DocSpace admin, 4 - User]</summary>
        public int? Type { get; set; }
        /// <summary>User ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>The worksfrom property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? Worksfrom { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime Worksfrom { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "birthday", n => { Birthday = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
                { "comment", n => { Comment = n.GetStringValue(); } },
                { "contacts", n => { Contacts = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact>(global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cultureName", n => { CultureName = n.GetStringValue(); } },
                { "department", n => { Department = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "disable", n => { Disable = n.GetBoolValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "files", n => { Files = n.GetStringValue(); } },
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "fromInviteLink", n => { FromInviteLink = n.GetBoolValue(); } },
                { "isUser", n => { IsUser = n.GetBoolValue(); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "passwordHash", n => { PasswordHash = n.GetStringValue(); } },
                { "sex", n => { Sex = n.GetIntValue(); } },
                { "spam", n => { Spam = n.GetBoolValue(); } },
                { "target", n => { Target = n.GetGuidValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "type", n => { Type = n.GetIntValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "worksfrom", n => { Worksfrom = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("birthday", Birthday);
            writer.WriteStringValue("comment", Comment);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact>("contacts", Contacts);
            writer.WriteStringValue("cultureName", CultureName);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("department", Department);
            writer.WriteBoolValue("disable", Disable);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("files", Files);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteBoolValue("fromInviteLink", FromInviteLink);
            writer.WriteBoolValue("isUser", IsUser);
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteStringValue("location", Location);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("passwordHash", PasswordHash);
            writer.WriteIntValue("sex", Sex);
            writer.WriteBoolValue("spam", Spam);
            writer.WriteGuidValue("target", Target);
            writer.WriteStringValue("title", Title);
            writer.WriteIntValue("type", Type);
            writer.WriteStringValue("userId", UserId);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("worksfrom", Worksfrom);
        }
    }
}
#pragma warning restore CS0618
