// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto
{
    /// <summary>
    /// Request parameters for starting the reassignment process
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StartReassignRequestDto : IParsable
    {
        /// <summary>Specifies whether to delete a profile when the data reassignment will be finished or not</summary>
        public bool? DeleteProfile { get; set; }
        /// <summary>User ID whose data will be reassigned to another user</summary>
        public Guid? FromUserId { get; set; }
        /// <summary>User ID to whom all the data will be reassigned</summary>
        public Guid? ToUserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto.StartReassignRequestDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto.StartReassignRequestDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.People.ApiModels.RequestDto.StartReassignRequestDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "deleteProfile", n => { DeleteProfile = n.GetBoolValue(); } },
                { "fromUserId", n => { FromUserId = n.GetGuidValue(); } },
                { "toUserId", n => { ToUserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("deleteProfile", DeleteProfile);
            writer.WriteGuidValue("fromUserId", FromUserId);
            writer.WriteGuidValue("toUserId", ToUserId);
        }
    }
}
#pragma warning restore CS0618
