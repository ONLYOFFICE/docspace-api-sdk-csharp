// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatermarkOnDraw : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The fill property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fill { get; set; }
#nullable restore
#else
        public string Fill { get; set; }
#endif
        /// <summary>Defines the watermark height measured in millimeters.</summary>
        public double? Height { get; set; }
        /// <summary>The margins property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Margins { get; set; }
#nullable restore
#else
        public List<int?> Margins { get; set; }
#endif
        /// <summary>The paragraphs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.Paragraph>? Paragraphs { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.Paragraph> Paragraphs { get; set; }
#endif
        /// <summary>The rotate property</summary>
        public int? Rotate { get; set; }
        /// <summary>The transparent property</summary>
        public double? Transparent { get; set; }
        /// <summary>Defines the watermark width measured in millimeters.</summary>
        public double? Width { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.WatermarkOnDraw"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.WatermarkOnDraw CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.WatermarkOnDraw();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "fill", n => { Fill = n.GetStringValue(); } },
                { "height", n => { Height = n.GetDoubleValue(); } },
                { "margins", n => { Margins = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "paragraphs", n => { Paragraphs = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.Paragraph>(global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.Paragraph.CreateFromDiscriminatorValue)?.AsList(); } },
                { "rotate", n => { Rotate = n.GetIntValue(); } },
                { "transparent", n => { Transparent = n.GetDoubleValue(); } },
                { "width", n => { Width = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("fill", Fill);
            writer.WriteDoubleValue("height", Height);
            writer.WriteCollectionOfPrimitiveValues<int?>("margins", Margins);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Files.Services.DocumentService.Paragraph>("paragraphs", Paragraphs);
            writer.WriteIntValue("rotate", Rotate);
            writer.WriteDoubleValue("transparent", Transparent);
            writer.WriteDoubleValue("width", Width);
        }
    }
}
#pragma warning restore CS0618
