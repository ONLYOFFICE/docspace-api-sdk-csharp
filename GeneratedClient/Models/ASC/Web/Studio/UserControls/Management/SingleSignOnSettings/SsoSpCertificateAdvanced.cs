// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SsoSpCertificateAdvanced : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Decryption algorithm</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DecryptAlgorithm { get; set; }
#nullable restore
#else
        public string DecryptAlgorithm { get; set; }
#endif
        /// <summary>Encryption algorithm</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EncryptAlgorithm { get; set; }
#nullable restore
#else
        public string EncryptAlgorithm { get; set; }
#endif
        /// <summary>Specifies if the assertions will be encrypted or not</summary>
        public bool? EncryptAssertions { get; set; }
        /// <summary>Specifies if SP will sign the SAML authentication requests sent to IdP or not</summary>
        public bool? SignAuthRequests { get; set; }
        /// <summary>Signing algorithm</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SigningAlgorithm { get; set; }
#nullable restore
#else
        public string SigningAlgorithm { get; set; }
#endif
        /// <summary>Specifies if SP will sign the SAML logout requests sent to IdP or not</summary>
        public bool? SignLogoutRequests { get; set; }
        /// <summary>Specifies if sign the SAML logout responses sent to IdP or not</summary>
        public bool? SignLogoutResponses { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "decryptAlgorithm", n => { DecryptAlgorithm = n.GetStringValue(); } },
                { "encryptAlgorithm", n => { EncryptAlgorithm = n.GetStringValue(); } },
                { "encryptAssertions", n => { EncryptAssertions = n.GetBoolValue(); } },
                { "signAuthRequests", n => { SignAuthRequests = n.GetBoolValue(); } },
                { "signLogoutRequests", n => { SignLogoutRequests = n.GetBoolValue(); } },
                { "signLogoutResponses", n => { SignLogoutResponses = n.GetBoolValue(); } },
                { "signingAlgorithm", n => { SigningAlgorithm = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("decryptAlgorithm", DecryptAlgorithm);
            writer.WriteStringValue("encryptAlgorithm", EncryptAlgorithm);
            writer.WriteBoolValue("encryptAssertions", EncryptAssertions);
            writer.WriteBoolValue("signAuthRequests", SignAuthRequests);
            writer.WriteStringValue("signingAlgorithm", SigningAlgorithm);
            writer.WriteBoolValue("signLogoutRequests", SignLogoutRequests);
            writer.WriteBoolValue("signLogoutResponses", SignLogoutResponses);
        }
    }
}
#pragma warning restore CS0618
