// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SsoIdpCertificateAdvanced : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Decryption algorithm</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DecryptAlgorithm { get; set; }
#nullable restore
#else
        public string DecryptAlgorithm { get; set; }
#endif
        /// <summary>Specifies if the assertions will be decrypted or not</summary>
        public bool? DecryptAssertions { get; set; }
        /// <summary>Verification algorithm</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerifyAlgorithm { get; set; }
#nullable restore
#else
        public string VerifyAlgorithm { get; set; }
#endif
        /// <summary>Specifies if the signatures of the SAML authentication responses sent to SP will be verified or not</summary>
        public bool? VerifyAuthResponsesSign { get; set; }
        /// <summary>Specifies if the signatures of the SAML logout requests sent to SP will be verified or not</summary>
        public bool? VerifyLogoutRequestsSign { get; set; }
        /// <summary>Specifies if the signatures of the SAML logout responses sent to SP will be verified or not</summary>
        public bool? VerifyLogoutResponsesSign { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "decryptAlgorithm", n => { DecryptAlgorithm = n.GetStringValue(); } },
                { "decryptAssertions", n => { DecryptAssertions = n.GetBoolValue(); } },
                { "verifyAlgorithm", n => { VerifyAlgorithm = n.GetStringValue(); } },
                { "verifyAuthResponsesSign", n => { VerifyAuthResponsesSign = n.GetBoolValue(); } },
                { "verifyLogoutRequestsSign", n => { VerifyLogoutRequestsSign = n.GetBoolValue(); } },
                { "verifyLogoutResponsesSign", n => { VerifyLogoutResponsesSign = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("decryptAlgorithm", DecryptAlgorithm);
            writer.WriteBoolValue("decryptAssertions", DecryptAssertions);
            writer.WriteStringValue("verifyAlgorithm", VerifyAlgorithm);
            writer.WriteBoolValue("verifyAuthResponsesSign", VerifyAuthResponsesSign);
            writer.WriteBoolValue("verifyLogoutRequestsSign", VerifyLogoutRequestsSign);
            writer.WriteBoolValue("verifyLogoutResponsesSign", VerifyLogoutResponsesSign);
        }
    }
}
#pragma warning restore CS0618
