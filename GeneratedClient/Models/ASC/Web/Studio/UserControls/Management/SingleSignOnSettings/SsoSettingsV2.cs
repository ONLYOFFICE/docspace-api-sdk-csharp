// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SsoSettingsV2 : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Specifies if SSO is enabled or not</summary>
        public bool? EnableSso { get; set; }
        /// <summary>The fieldMapping property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoFieldMapping? FieldMapping { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoFieldMapping FieldMapping { get; set; }
#endif
        /// <summary>Specifies if the authentication page will be hidden or not</summary>
        public bool? HideAuthPage { get; set; }
        /// <summary>The idpCertificateAdvanced property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced? IdpCertificateAdvanced { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced IdpCertificateAdvanced { get; set; }
#endif
        /// <summary>List of IDP certificates</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate>? IdpCertificates { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate> IdpCertificates { get; set; }
#endif
        /// <summary>The idpSettings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpSettings? IdpSettings { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpSettings IdpSettings { get; set; }
#endif
        /// <summary>The spCertificateAdvanced property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced? SpCertificateAdvanced { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced SpCertificateAdvanced { get; set; }
#endif
        /// <summary>List of SP certificates</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate>? SpCertificates { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate> SpCertificates { get; set; }
#endif
        /// <summary>SP login label</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpLoginLabel { get; set; }
#nullable restore
#else
        public string SpLoginLabel { get; set; }
#endif
        /// <summary>Users type (RoomAdmin, User, DocSpaceAdmin)</summary>
        public int? UsersType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enableSso", n => { EnableSso = n.GetBoolValue(); } },
                { "fieldMapping", n => { FieldMapping = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoFieldMapping>(global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoFieldMapping.CreateFromDiscriminatorValue); } },
                { "hideAuthPage", n => { HideAuthPage = n.GetBoolValue(); } },
                { "idpCertificateAdvanced", n => { IdpCertificateAdvanced = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced>(global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced.CreateFromDiscriminatorValue); } },
                { "idpCertificates", n => { IdpCertificates = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate>(global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "idpSettings", n => { IdpSettings = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpSettings>(global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpSettings.CreateFromDiscriminatorValue); } },
                { "spCertificateAdvanced", n => { SpCertificateAdvanced = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced>(global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced.CreateFromDiscriminatorValue); } },
                { "spCertificates", n => { SpCertificates = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate>(global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "spLoginLabel", n => { SpLoginLabel = n.GetStringValue(); } },
                { "usersType", n => { UsersType = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enableSso", EnableSso);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoFieldMapping>("fieldMapping", FieldMapping);
            writer.WriteBoolValue("hideAuthPage", HideAuthPage);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced>("idpCertificateAdvanced", IdpCertificateAdvanced);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate>("idpCertificates", IdpCertificates);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpSettings>("idpSettings", IdpSettings);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced>("spCertificateAdvanced", SpCertificateAdvanced);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate>("spCertificates", SpCertificates);
            writer.WriteStringValue("spLoginLabel", SpLoginLabel);
            writer.WriteIntValue("usersType", UsersType);
        }
    }
}
#pragma warning restore CS0618
