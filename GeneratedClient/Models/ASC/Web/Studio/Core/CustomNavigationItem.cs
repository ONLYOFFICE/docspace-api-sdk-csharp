// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Studio.Core
{
    /// <summary>
    /// Custom navigation parameters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CustomNavigationItem : IParsable
    {
        /// <summary>Big image</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BigImg { get; set; }
#nullable restore
#else
        public string BigImg { get; set; }
#endif
        /// <summary>Id</summary>
        public Guid? Id { get; set; }
        /// <summary>Label</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>Show in menu or not</summary>
        public bool? ShowInMenu { get; set; }
        /// <summary>Show on home page or not</summary>
        public bool? ShowOnHomePage { get; set; }
        /// <summary>Small image</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SmallImg { get; set; }
#nullable restore
#else
        public string SmallImg { get; set; }
#endif
        /// <summary>URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Studio.Core.CustomNavigationItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Studio.Core.CustomNavigationItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Studio.Core.CustomNavigationItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bigImg", n => { BigImg = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "label", n => { Label = n.GetStringValue(); } },
                { "showInMenu", n => { ShowInMenu = n.GetBoolValue(); } },
                { "showOnHomePage", n => { ShowOnHomePage = n.GetBoolValue(); } },
                { "smallImg", n => { SmallImg = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bigImg", BigImg);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("label", Label);
            writer.WriteBoolValue("showInMenu", ShowInMenu);
            writer.WriteBoolValue("showOnHomePage", ShowOnHomePage);
            writer.WriteStringValue("smallImg", SmallImg);
            writer.WriteStringValue("url", Url);
        }
    }
}
#pragma warning restore CS0618
