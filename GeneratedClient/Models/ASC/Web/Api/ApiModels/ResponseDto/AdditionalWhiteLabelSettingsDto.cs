// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.ApiModels.ResponseDto
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AdditionalWhiteLabelSettingsDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>URL to pay for the portal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuyUrl { get; set; }
#nullable restore
#else
        public string BuyUrl { get; set; }
#endif
        /// <summary>Specifies if feedback and support are available or not</summary>
        public bool? FeedbackAndSupportEnabled { get; set; }
        /// <summary>Feedback and support URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FeedbackAndSupportUrl { get; set; }
#nullable restore
#else
        public string FeedbackAndSupportUrl { get; set; }
#endif
        /// <summary>Specifies if the help center is enabled or not</summary>
        public bool? HelpCenterEnabled { get; set; }
        /// <summary>Specifies if these settings are default or not</summary>
        public bool? IsDefault { get; set; }
        /// <summary>Specifies if the license agreements are enabled or not</summary>
        public bool? LicenseAgreementsEnabled { get; set; }
        /// <summary>License agreements URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LicenseAgreementsUrl { get; set; }
#nullable restore
#else
        public string LicenseAgreementsUrl { get; set; }
#endif
        /// <summary>Sales email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SalesEmail { get; set; }
#nullable restore
#else
        public string SalesEmail { get; set; }
#endif
        /// <summary>Specifies if the start document is enabled or not</summary>
        public bool? StartDocsEnabled { get; set; }
        /// <summary>Specifies if the user forum is enabled or not</summary>
        public bool? UserForumEnabled { get; set; }
        /// <summary>User forum URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserForumUrl { get; set; }
#nullable restore
#else
        public string UserForumUrl { get; set; }
#endif
        /// <summary>Specifies if the video guides are enabled or not</summary>
        public bool? VideoGuidesEnabled { get; set; }
        /// <summary>Video guides URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoGuidesUrl { get; set; }
#nullable restore
#else
        public string VideoGuidesUrl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModels.ResponseDto.AdditionalWhiteLabelSettingsDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModels.ResponseDto.AdditionalWhiteLabelSettingsDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModels.ResponseDto.AdditionalWhiteLabelSettingsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "buyUrl", n => { BuyUrl = n.GetStringValue(); } },
                { "feedbackAndSupportEnabled", n => { FeedbackAndSupportEnabled = n.GetBoolValue(); } },
                { "feedbackAndSupportUrl", n => { FeedbackAndSupportUrl = n.GetStringValue(); } },
                { "helpCenterEnabled", n => { HelpCenterEnabled = n.GetBoolValue(); } },
                { "isDefault", n => { IsDefault = n.GetBoolValue(); } },
                { "licenseAgreementsEnabled", n => { LicenseAgreementsEnabled = n.GetBoolValue(); } },
                { "licenseAgreementsUrl", n => { LicenseAgreementsUrl = n.GetStringValue(); } },
                { "salesEmail", n => { SalesEmail = n.GetStringValue(); } },
                { "startDocsEnabled", n => { StartDocsEnabled = n.GetBoolValue(); } },
                { "userForumEnabled", n => { UserForumEnabled = n.GetBoolValue(); } },
                { "userForumUrl", n => { UserForumUrl = n.GetStringValue(); } },
                { "videoGuidesEnabled", n => { VideoGuidesEnabled = n.GetBoolValue(); } },
                { "videoGuidesUrl", n => { VideoGuidesUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("buyUrl", BuyUrl);
            writer.WriteBoolValue("feedbackAndSupportEnabled", FeedbackAndSupportEnabled);
            writer.WriteStringValue("feedbackAndSupportUrl", FeedbackAndSupportUrl);
            writer.WriteBoolValue("helpCenterEnabled", HelpCenterEnabled);
            writer.WriteBoolValue("isDefault", IsDefault);
            writer.WriteBoolValue("licenseAgreementsEnabled", LicenseAgreementsEnabled);
            writer.WriteStringValue("licenseAgreementsUrl", LicenseAgreementsUrl);
            writer.WriteStringValue("salesEmail", SalesEmail);
            writer.WriteBoolValue("startDocsEnabled", StartDocsEnabled);
            writer.WriteBoolValue("userForumEnabled", UserForumEnabled);
            writer.WriteStringValue("userForumUrl", UserForumUrl);
            writer.WriteBoolValue("videoGuidesEnabled", VideoGuidesEnabled);
            writer.WriteStringValue("videoGuidesUrl", VideoGuidesUrl);
        }
    }
}
#pragma warning restore CS0618
