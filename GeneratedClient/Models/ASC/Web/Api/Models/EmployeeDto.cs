// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class EmployeeDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Avatar { get; set; }
#nullable restore
#else
        public string Avatar { get; set; }
#endif
        /// <summary>Maximum size avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarMax { get; set; }
#nullable restore
#else
        public string AvatarMax { get; set; }
#endif
        /// <summary>Medium size avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarMedium { get; set; }
#nullable restore
#else
        public string AvatarMedium { get; set; }
#endif
        /// <summary>Original size avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarOriginal { get; set; }
#nullable restore
#else
        public string AvatarOriginal { get; set; }
#endif
        /// <summary>Small avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarSmall { get; set; }
#nullable restore
#else
        public string AvatarSmall { get; set; }
#endif
        /// <summary>Display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Specifies if the user has an avatar or not</summary>
        public bool? HasAvatar { get; set; }
        /// <summary>ID</summary>
        public Guid? Id { get; set; }
        /// <summary>Specifies if the user is an anonim or not</summary>
        public bool? IsAnonim { get; set; }
        /// <summary>Profile URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileUrl { get; set; }
#nullable restore
#else
        public string ProfileUrl { get; set; }
#endif
        /// <summary>Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "avatar", n => { Avatar = n.GetStringValue(); } },
                { "avatarMax", n => { AvatarMax = n.GetStringValue(); } },
                { "avatarMedium", n => { AvatarMedium = n.GetStringValue(); } },
                { "avatarOriginal", n => { AvatarOriginal = n.GetStringValue(); } },
                { "avatarSmall", n => { AvatarSmall = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "hasAvatar", n => { HasAvatar = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "isAnonim", n => { IsAnonim = n.GetBoolValue(); } },
                { "profileUrl", n => { ProfileUrl = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("avatar", Avatar);
            writer.WriteStringValue("avatarMax", AvatarMax);
            writer.WriteStringValue("avatarMedium", AvatarMedium);
            writer.WriteStringValue("avatarOriginal", AvatarOriginal);
            writer.WriteStringValue("avatarSmall", AvatarSmall);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("hasAvatar", HasAvatar);
            writer.WriteGuidValue("id", Id);
            writer.WriteBoolValue("isAnonim", IsAnonim);
            writer.WriteStringValue("profileUrl", ProfileUrl);
            writer.WriteStringValue("title", Title);
        }
    }
}
#pragma warning restore CS0618
