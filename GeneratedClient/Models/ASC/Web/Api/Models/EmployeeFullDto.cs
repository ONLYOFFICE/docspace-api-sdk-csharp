// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.Api.Core;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class EmployeeFullDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>[0 - Not activated, 1 - Activated, 2 - Pending, 4 - Auto generated]</summary>
        public int? ActivationStatus { get; set; }
        /// <summary>Avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Avatar { get; set; }
#nullable restore
#else
        public string Avatar { get; set; }
#endif
        /// <summary>Maximum size avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarMax { get; set; }
#nullable restore
#else
        public string AvatarMax { get; set; }
#endif
        /// <summary>Medium size avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarMedium { get; set; }
#nullable restore
#else
        public string AvatarMedium { get; set; }
#endif
        /// <summary>Original size avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarOriginal { get; set; }
#nullable restore
#else
        public string AvatarOriginal { get; set; }
#endif
        /// <summary>Small avatar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvatarSmall { get; set; }
#nullable restore
#else
        public string AvatarSmall { get; set; }
#endif
        /// <summary>The birthday property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? Birthday { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime Birthday { get; set; }
#endif
        /// <summary>List of contacts</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact>? Contacts { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact> Contacts { get; set; }
#endif
        /// <summary>The createdBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto? CreatedBy { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto CreatedBy { get; set; }
#endif
        /// <summary>Language</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CultureName { get; set; }
#nullable restore
#else
        public string CultureName { get; set; }
#endif
        /// <summary>Department</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Department { get; set; }
#nullable restore
#else
        public string Department { get; set; }
#endif
        /// <summary>Display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>First name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>List of groups</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.GroupSummaryDto>? Groups { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.GroupSummaryDto> Groups { get; set; }
#endif
        /// <summary>Specifies if the user has an avatar or not</summary>
        public bool? HasAvatar { get; set; }
        /// <summary>ID</summary>
        public Guid? Id { get; set; }
        /// <summary>Specifies if the user is an administrator or not</summary>
        public bool? IsAdmin { get; set; }
        /// <summary>Specifies if the user is an anonim or not</summary>
        public bool? IsAnonim { get; set; }
        /// <summary>Specifies if the user is a portal collaborator or not</summary>
        public bool? IsCollaborator { get; set; }
        /// <summary>Specifies if the user has a custom quota or not</summary>
        public bool? IsCustomQuota { get; set; }
        /// <summary>Specifies if the LDAP settings are enabled for the user or not</summary>
        public bool? IsLDAP { get; set; }
        /// <summary>Specifies if the user is a portal owner or not</summary>
        public bool? IsOwner { get; set; }
        /// <summary>Specifies if the user is a room administrator or not</summary>
        public bool? IsRoomAdmin { get; set; }
        /// <summary>Specifies if the SSO settings are enabled for the user or not</summary>
        public bool? IsSSO { get; set; }
        /// <summary>Specifies if the user is a portal visitor or not</summary>
        public bool? IsVisitor { get; set; }
        /// <summary>Last name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>List of administrator modules</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ListAdminModules { get; set; }
#nullable restore
#else
        public List<string> ListAdminModules { get; set; }
#endif
        /// <summary>Location</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>Current login event ID</summary>
        public int? LoginEventId { get; set; }
        /// <summary>Mobile phone number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>[0 - Not activated, 1 - Activated]</summary>
        public int? MobilePhoneActivationStatus { get; set; }
        /// <summary>Notes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Profile URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileUrl { get; set; }
#nullable restore
#else
        public string ProfileUrl { get; set; }
#endif
        /// <summary>Quota limit</summary>
        public long? QuotaLimit { get; set; }
        /// <summary>The registrationDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? RegistrationDate { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime RegistrationDate { get; set; }
#endif
        /// <summary>Sex</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sex { get; set; }
#nullable restore
#else
        public string Sex { get; set; }
#endif
        /// <summary>Shared</summary>
        public bool? Shared { get; set; }
        /// <summary>[1 - Active, 2 - Terminated, 4 - Pending, 5 - Default, 7 - All]</summary>
        public int? Status { get; set; }
        /// <summary>The terminated property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? Terminated { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime Terminated { get; set; }
#endif
        /// <summary>[0 - Base, 1 - Dark, 2 - System]</summary>
        public int? Theme { get; set; }
        /// <summary>Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Portal used space</summary>
        public double? UsedSpace { get; set; }
        /// <summary>Username</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>The workFrom property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? WorkFrom { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime WorkFrom { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeFullDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeFullDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeFullDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activationStatus", n => { ActivationStatus = n.GetIntValue(); } },
                { "avatar", n => { Avatar = n.GetStringValue(); } },
                { "avatarMax", n => { AvatarMax = n.GetStringValue(); } },
                { "avatarMedium", n => { AvatarMedium = n.GetStringValue(); } },
                { "avatarOriginal", n => { AvatarOriginal = n.GetStringValue(); } },
                { "avatarSmall", n => { AvatarSmall = n.GetStringValue(); } },
                { "birthday", n => { Birthday = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
                { "contacts", n => { Contacts = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact>(global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact.CreateFromDiscriminatorValue)?.AsList(); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto>(global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto.CreateFromDiscriminatorValue); } },
                { "cultureName", n => { CultureName = n.GetStringValue(); } },
                { "department", n => { Department = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "groups", n => { Groups = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.GroupSummaryDto>(global::KiotaPosts.Client.Models.ASC.Web.Api.Models.GroupSummaryDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "hasAvatar", n => { HasAvatar = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "isAdmin", n => { IsAdmin = n.GetBoolValue(); } },
                { "isAnonim", n => { IsAnonim = n.GetBoolValue(); } },
                { "isCollaborator", n => { IsCollaborator = n.GetBoolValue(); } },
                { "isCustomQuota", n => { IsCustomQuota = n.GetBoolValue(); } },
                { "isLDAP", n => { IsLDAP = n.GetBoolValue(); } },
                { "isOwner", n => { IsOwner = n.GetBoolValue(); } },
                { "isRoomAdmin", n => { IsRoomAdmin = n.GetBoolValue(); } },
                { "isSSO", n => { IsSSO = n.GetBoolValue(); } },
                { "isVisitor", n => { IsVisitor = n.GetBoolValue(); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "listAdminModules", n => { ListAdminModules = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "loginEventId", n => { LoginEventId = n.GetIntValue(); } },
                { "mobilePhone", n => { MobilePhone = n.GetStringValue(); } },
                { "mobilePhoneActivationStatus", n => { MobilePhoneActivationStatus = n.GetIntValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "profileUrl", n => { ProfileUrl = n.GetStringValue(); } },
                { "quotaLimit", n => { QuotaLimit = n.GetLongValue(); } },
                { "registrationDate", n => { RegistrationDate = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
                { "sex", n => { Sex = n.GetStringValue(); } },
                { "shared", n => { Shared = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetIntValue(); } },
                { "terminated", n => { Terminated = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
                { "theme", n => { Theme = n.GetIntValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "usedSpace", n => { UsedSpace = n.GetDoubleValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
                { "workFrom", n => { WorkFrom = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("activationStatus", ActivationStatus);
            writer.WriteStringValue("avatar", Avatar);
            writer.WriteStringValue("avatarMax", AvatarMax);
            writer.WriteStringValue("avatarMedium", AvatarMedium);
            writer.WriteStringValue("avatarOriginal", AvatarOriginal);
            writer.WriteStringValue("avatarSmall", AvatarSmall);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("birthday", Birthday);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.Contact>("contacts", Contacts);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.EmployeeDto>("createdBy", CreatedBy);
            writer.WriteStringValue("cultureName", CultureName);
            writer.WriteStringValue("department", Department);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Web.Api.Models.GroupSummaryDto>("groups", Groups);
            writer.WriteBoolValue("hasAvatar", HasAvatar);
            writer.WriteGuidValue("id", Id);
            writer.WriteBoolValue("isAdmin", IsAdmin);
            writer.WriteBoolValue("isAnonim", IsAnonim);
            writer.WriteBoolValue("isCollaborator", IsCollaborator);
            writer.WriteBoolValue("isCustomQuota", IsCustomQuota);
            writer.WriteBoolValue("isLDAP", IsLDAP);
            writer.WriteBoolValue("isOwner", IsOwner);
            writer.WriteBoolValue("isRoomAdmin", IsRoomAdmin);
            writer.WriteBoolValue("isSSO", IsSSO);
            writer.WriteBoolValue("isVisitor", IsVisitor);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteCollectionOfPrimitiveValues<string>("listAdminModules", ListAdminModules);
            writer.WriteStringValue("location", Location);
            writer.WriteIntValue("loginEventId", LoginEventId);
            writer.WriteStringValue("mobilePhone", MobilePhone);
            writer.WriteIntValue("mobilePhoneActivationStatus", MobilePhoneActivationStatus);
            writer.WriteStringValue("notes", Notes);
            writer.WriteStringValue("profileUrl", ProfileUrl);
            writer.WriteLongValue("quotaLimit", QuotaLimit);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("registrationDate", RegistrationDate);
            writer.WriteStringValue("sex", Sex);
            writer.WriteBoolValue("shared", Shared);
            writer.WriteIntValue("status", Status);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("terminated", Terminated);
            writer.WriteIntValue("theme", Theme);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("usedSpace", UsedSpace);
            writer.WriteStringValue("userName", UserName);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("workFrom", WorkFrom);
        }
    }
}
#pragma warning restore CS0618
