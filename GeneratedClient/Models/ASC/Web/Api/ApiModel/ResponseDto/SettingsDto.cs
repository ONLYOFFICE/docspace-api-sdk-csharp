// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.Core.Tenants;
using KiotaPosts.Client.Models.ASC.Security.Cryptography;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SettingsDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>API documentation link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiDocsLink { get; set; }
#nullable restore
#else
        public string ApiDocsLink { get; set; }
#endif
        /// <summary>Base domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseDomain { get; set; }
#nullable restore
#else
        public string BaseDomain { get; set; }
#endif
        /// <summary>Email for training booking</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BookTrainingEmail { get; set; }
#nullable restore
#else
        public string BookTrainingEmail { get; set; }
#endif
        /// <summary>Specifies whether the cookie settings are enabled</summary>
        public bool? CookieSettingsEnabled { get; set; }
        /// <summary>Language</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Culture { get; set; }
#nullable restore
#else
        public string Culture { get; set; }
#endif
        /// <summary>Specifies if the debug information will be sent or not</summary>
        public bool? DebugInfo { get; set; }
        /// <summary>The deepLink property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.DeepLinkDto? DeepLink { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.DeepLinkDto DeepLink { get; set; }
#endif
        /// <summary>Specifies whether to display the About section</summary>
        public bool? DisplayAbout { get; set; }
        /// <summary>Specifies if this is a DocSpace portal or not</summary>
        public bool? DocSpace { get; set; }
        /// <summary>Documentation email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentationEmail { get; set; }
#nullable restore
#else
        public string DocumentationEmail { get; set; }
#endif
        /// <summary>The domainValidator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantDomainValidator? DomainValidator { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantDomainValidator DomainValidator { get; set; }
#endif
        /// <summary>Specifies if a user can send a message to the administrator or not</summary>
        public bool? EnableAdmMess { get; set; }
        /// <summary>Specifies if a user can join to the portal or not</summary>
        public bool? EnabledJoin { get; set; }
        /// <summary>The firebase property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FirebaseDto? Firebase { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FirebaseDto Firebase { get; set; }
#endif
        /// <summary>The formGallery property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto? FormGallery { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto FormGallery { get; set; }
#endif
        /// <summary>Link to the forum</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForumLink { get; set; }
#nullable restore
#else
        public string ForumLink { get; set; }
#endif
        /// <summary>Greeting settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GreetingSettings { get; set; }
#nullable restore
#else
        public string GreetingSettings { get; set; }
#endif
        /// <summary>Link to the help</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HelpLink { get; set; }
#nullable restore
#else
        public string HelpLink { get; set; }
#endif
        /// <summary>Invitation limit</summary>
        public int? InvitationLimit { get; set; }
        /// <summary>Specifies if this is a AMI instance or not</summary>
        public bool? IsAmi { get; set; }
        /// <summary>Legal terms</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegalTerms { get; set; }
#nullable restore
#else
        public string LegalTerms { get; set; }
#endif
        /// <summary>License url</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LicenseUrl { get; set; }
#nullable restore
#else
        public string LicenseUrl { get; set; }
#endif
        /// <summary>Limited access space</summary>
        public bool? LimitedAccessSpace { get; set; }
        /// <summary>Max image upload size</summary>
        public long? MaxImageUploadSize { get; set; }
        /// <summary>Team template ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameSchemaId { get; set; }
#nullable restore
#else
        public string NameSchemaId { get; set; }
#endif
        /// <summary>Owner ID</summary>
        public Guid? OwnerId { get; set; }
        /// <summary>The passwordHash property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Security.Cryptography.PasswordHasher? PasswordHash { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Security.Cryptography.PasswordHasher PasswordHash { get; set; }
#endif
        /// <summary>The plugins property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.PluginsDto? Plugins { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.PluginsDto Plugins { get; set; }
#endif
        /// <summary>ReCAPTCHA public key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecaptchaPublicKey { get; set; }
#nullable restore
#else
        public string RecaptchaPublicKey { get; set; }
#endif
        /// <summary>[0 - Default, 1 - AndroidV2, 2 - iOSV2, 3 - hCaptcha]</summary>
        public int? RecaptchaType { get; set; }
        /// <summary>Socket URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SocketUrl { get; set; }
#nullable restore
#else
        public string SocketUrl { get; set; }
#endif
        /// <summary>Specifies if this is a standalone portal or not</summary>
        public bool? Standalone { get; set; }
        /// <summary>Tag manager ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TagManagerId { get; set; }
#nullable restore
#else
        public string TagManagerId { get; set; }
#endif
        /// <summary>Tenant alias</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantAlias { get; set; }
#nullable restore
#else
        public string TenantAlias { get; set; }
#endif
        /// <summary>[0 - Active, 1 - Suspended, 2 - Remove pending, 3 - Transfering, 4 - Restoring, 5 - Migrating, 6 - Encryption]</summary>
        public int? TenantStatus { get; set; }
        /// <summary>Specifies if a user can connect third-party providers or not</summary>
        public bool? ThirdpartyEnable { get; set; }
        /// <summary>Time zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>List of trusted domains</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TrustedDomains { get; set; }
#nullable restore
#else
        public List<string> TrustedDomains { get; set; }
#endif
        /// <summary>[0 - None, 1 - Custom, 2 - All]</summary>
        public int? TrustedDomainsType { get; set; }
        /// <summary>User name validation regex</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserNameRegex { get; set; }
#nullable restore
#else
        public string UserNameRegex { get; set; }
#endif
        /// <summary>UTC hours offset</summary>
        public double? UtcHoursOffset { get; set; }
        /// <summary>UTC offset</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UtcOffset { get; set; }
#nullable restore
#else
        public string UtcOffset { get; set; }
#endif
        /// <summary>Version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>Wizard token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WizardToken { get; set; }
#nullable restore
#else
        public string WizardToken { get; set; }
#endif
        /// <summary>Zendesk key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZendeskKey { get; set; }
#nullable restore
#else
        public string ZendeskKey { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.SettingsDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.SettingsDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.SettingsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiDocsLink", n => { ApiDocsLink = n.GetStringValue(); } },
                { "baseDomain", n => { BaseDomain = n.GetStringValue(); } },
                { "bookTrainingEmail", n => { BookTrainingEmail = n.GetStringValue(); } },
                { "cookieSettingsEnabled", n => { CookieSettingsEnabled = n.GetBoolValue(); } },
                { "culture", n => { Culture = n.GetStringValue(); } },
                { "debugInfo", n => { DebugInfo = n.GetBoolValue(); } },
                { "deepLink", n => { DeepLink = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.DeepLinkDto>(global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.DeepLinkDto.CreateFromDiscriminatorValue); } },
                { "displayAbout", n => { DisplayAbout = n.GetBoolValue(); } },
                { "docSpace", n => { DocSpace = n.GetBoolValue(); } },
                { "documentationEmail", n => { DocumentationEmail = n.GetStringValue(); } },
                { "domainValidator", n => { DomainValidator = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantDomainValidator>(global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantDomainValidator.CreateFromDiscriminatorValue); } },
                { "enableAdmMess", n => { EnableAdmMess = n.GetBoolValue(); } },
                { "enabledJoin", n => { EnabledJoin = n.GetBoolValue(); } },
                { "firebase", n => { Firebase = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FirebaseDto>(global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FirebaseDto.CreateFromDiscriminatorValue); } },
                { "formGallery", n => { FormGallery = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto>(global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto.CreateFromDiscriminatorValue); } },
                { "forumLink", n => { ForumLink = n.GetStringValue(); } },
                { "greetingSettings", n => { GreetingSettings = n.GetStringValue(); } },
                { "helpLink", n => { HelpLink = n.GetStringValue(); } },
                { "invitationLimit", n => { InvitationLimit = n.GetIntValue(); } },
                { "isAmi", n => { IsAmi = n.GetBoolValue(); } },
                { "legalTerms", n => { LegalTerms = n.GetStringValue(); } },
                { "licenseUrl", n => { LicenseUrl = n.GetStringValue(); } },
                { "limitedAccessSpace", n => { LimitedAccessSpace = n.GetBoolValue(); } },
                { "maxImageUploadSize", n => { MaxImageUploadSize = n.GetLongValue(); } },
                { "nameSchemaId", n => { NameSchemaId = n.GetStringValue(); } },
                { "ownerId", n => { OwnerId = n.GetGuidValue(); } },
                { "passwordHash", n => { PasswordHash = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Security.Cryptography.PasswordHasher>(global::KiotaPosts.Client.Models.ASC.Security.Cryptography.PasswordHasher.CreateFromDiscriminatorValue); } },
                { "plugins", n => { Plugins = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.PluginsDto>(global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.PluginsDto.CreateFromDiscriminatorValue); } },
                { "recaptchaPublicKey", n => { RecaptchaPublicKey = n.GetStringValue(); } },
                { "recaptchaType", n => { RecaptchaType = n.GetIntValue(); } },
                { "socketUrl", n => { SocketUrl = n.GetStringValue(); } },
                { "standalone", n => { Standalone = n.GetBoolValue(); } },
                { "tagManagerId", n => { TagManagerId = n.GetStringValue(); } },
                { "tenantAlias", n => { TenantAlias = n.GetStringValue(); } },
                { "tenantStatus", n => { TenantStatus = n.GetIntValue(); } },
                { "thirdpartyEnable", n => { ThirdpartyEnable = n.GetBoolValue(); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
                { "trustedDomains", n => { TrustedDomains = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "trustedDomainsType", n => { TrustedDomainsType = n.GetIntValue(); } },
                { "userNameRegex", n => { UserNameRegex = n.GetStringValue(); } },
                { "utcHoursOffset", n => { UtcHoursOffset = n.GetDoubleValue(); } },
                { "utcOffset", n => { UtcOffset = n.GetStringValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
                { "wizardToken", n => { WizardToken = n.GetStringValue(); } },
                { "zendeskKey", n => { ZendeskKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiDocsLink", ApiDocsLink);
            writer.WriteStringValue("baseDomain", BaseDomain);
            writer.WriteStringValue("bookTrainingEmail", BookTrainingEmail);
            writer.WriteBoolValue("cookieSettingsEnabled", CookieSettingsEnabled);
            writer.WriteStringValue("culture", Culture);
            writer.WriteBoolValue("debugInfo", DebugInfo);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.DeepLinkDto>("deepLink", DeepLink);
            writer.WriteBoolValue("displayAbout", DisplayAbout);
            writer.WriteBoolValue("docSpace", DocSpace);
            writer.WriteStringValue("documentationEmail", DocumentationEmail);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantDomainValidator>("domainValidator", DomainValidator);
            writer.WriteBoolValue("enableAdmMess", EnableAdmMess);
            writer.WriteBoolValue("enabledJoin", EnabledJoin);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FirebaseDto>("firebase", Firebase);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto>("formGallery", FormGallery);
            writer.WriteStringValue("forumLink", ForumLink);
            writer.WriteStringValue("greetingSettings", GreetingSettings);
            writer.WriteStringValue("helpLink", HelpLink);
            writer.WriteIntValue("invitationLimit", InvitationLimit);
            writer.WriteBoolValue("isAmi", IsAmi);
            writer.WriteStringValue("legalTerms", LegalTerms);
            writer.WriteStringValue("licenseUrl", LicenseUrl);
            writer.WriteBoolValue("limitedAccessSpace", LimitedAccessSpace);
            writer.WriteLongValue("maxImageUploadSize", MaxImageUploadSize);
            writer.WriteStringValue("nameSchemaId", NameSchemaId);
            writer.WriteGuidValue("ownerId", OwnerId);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Security.Cryptography.PasswordHasher>("passwordHash", PasswordHash);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.PluginsDto>("plugins", Plugins);
            writer.WriteStringValue("recaptchaPublicKey", RecaptchaPublicKey);
            writer.WriteIntValue("recaptchaType", RecaptchaType);
            writer.WriteStringValue("socketUrl", SocketUrl);
            writer.WriteBoolValue("standalone", Standalone);
            writer.WriteStringValue("tagManagerId", TagManagerId);
            writer.WriteStringValue("tenantAlias", TenantAlias);
            writer.WriteIntValue("tenantStatus", TenantStatus);
            writer.WriteBoolValue("thirdpartyEnable", ThirdpartyEnable);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteCollectionOfPrimitiveValues<string>("trustedDomains", TrustedDomains);
            writer.WriteIntValue("trustedDomainsType", TrustedDomainsType);
            writer.WriteStringValue("userNameRegex", UserNameRegex);
            writer.WriteDoubleValue("utcHoursOffset", UtcHoursOffset);
            writer.WriteStringValue("utcOffset", UtcOffset);
            writer.WriteStringValue("version", Version);
            writer.WriteStringValue("wizardToken", WizardToken);
            writer.WriteStringValue("zendeskKey", ZendeskKey);
        }
    }
}
#pragma warning restore CS0618
