// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CapabilitiesDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The identityServerEnabled property</summary>
        public bool? IdentityServerEnabled { get; set; }
        /// <summary>Ldap domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LdapDomain { get; set; }
#nullable restore
#else
        public string LdapDomain { get; set; }
#endif
        /// <summary>Specifies if the LDAP settings are enabled or not</summary>
        public bool? LdapEnabled { get; set; }
        /// <summary>Specifies if OAuth is enabled or not</summary>
        public bool? OauthEnabled { get; set; }
        /// <summary>List of providers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Providers { get; set; }
#nullable restore
#else
        public List<string> Providers { get; set; }
#endif
        /// <summary>SP login label</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SsoLabel { get; set; }
#nullable restore
#else
        public string SsoLabel { get; set; }
#endif
        /// <summary>SSO URL. If this parameter is empty, then the SSO settings are disabled</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SsoUrl { get; set; }
#nullable restore
#else
        public string SsoUrl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "identityServerEnabled", n => { IdentityServerEnabled = n.GetBoolValue(); } },
                { "ldapDomain", n => { LdapDomain = n.GetStringValue(); } },
                { "ldapEnabled", n => { LdapEnabled = n.GetBoolValue(); } },
                { "oauthEnabled", n => { OauthEnabled = n.GetBoolValue(); } },
                { "providers", n => { Providers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ssoLabel", n => { SsoLabel = n.GetStringValue(); } },
                { "ssoUrl", n => { SsoUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("identityServerEnabled", IdentityServerEnabled);
            writer.WriteStringValue("ldapDomain", LdapDomain);
            writer.WriteBoolValue("ldapEnabled", LdapEnabled);
            writer.WriteBoolValue("oauthEnabled", OauthEnabled);
            writer.WriteCollectionOfPrimitiveValues<string>("providers", Providers);
            writer.WriteStringValue("ssoLabel", SsoLabel);
            writer.WriteStringValue("ssoUrl", SsoUrl);
        }
    }
}
#pragma warning restore CS0618
