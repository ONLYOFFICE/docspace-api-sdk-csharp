// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto
{
    /// <summary>
    /// SMTP settings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SmtpSettingsDto : IParsable
    {
        /// <summary>Credentials username</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CredentialsUserName { get; set; }
#nullable restore
#else
        public string CredentialsUserName { get; set; }
#endif
        /// <summary>Credentials user password</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CredentialsUserPassword { get; set; }
#nullable restore
#else
        public string CredentialsUserPassword { get; set; }
#endif
        /// <summary>Enables authentication or not</summary>
        public bool? EnableAuth { get; set; }
        /// <summary>Enables SSL or not</summary>
        public bool? EnableSSL { get; set; }
        /// <summary>Host</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Host { get; set; }
#nullable restore
#else
        public string Host { get; set; }
#endif
        /// <summary>Specifies if the current settings are default or not</summary>
        public bool? IsDefaultSettings { get; set; }
        /// <summary>Port</summary>
        public int? Port { get; set; }
        /// <summary>Sender address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderAddress { get; set; }
#nullable restore
#else
        public string SenderAddress { get; set; }
#endif
        /// <summary>Sender display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderDisplayName { get; set; }
#nullable restore
#else
        public string SenderDisplayName { get; set; }
#endif
        /// <summary>Specifies whether to use NTLM or not</summary>
        public bool? UseNtlm { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "credentialsUserName", n => { CredentialsUserName = n.GetStringValue(); } },
                { "credentialsUserPassword", n => { CredentialsUserPassword = n.GetStringValue(); } },
                { "enableAuth", n => { EnableAuth = n.GetBoolValue(); } },
                { "enableSSL", n => { EnableSSL = n.GetBoolValue(); } },
                { "host", n => { Host = n.GetStringValue(); } },
                { "isDefaultSettings", n => { IsDefaultSettings = n.GetBoolValue(); } },
                { "port", n => { Port = n.GetIntValue(); } },
                { "senderAddress", n => { SenderAddress = n.GetStringValue(); } },
                { "senderDisplayName", n => { SenderDisplayName = n.GetStringValue(); } },
                { "useNtlm", n => { UseNtlm = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("credentialsUserName", CredentialsUserName);
            writer.WriteStringValue("credentialsUserPassword", CredentialsUserPassword);
            writer.WriteBoolValue("enableAuth", EnableAuth);
            writer.WriteBoolValue("enableSSL", EnableSSL);
            writer.WriteStringValue("host", Host);
            writer.WriteBoolValue("isDefaultSettings", IsDefaultSettings);
            writer.WriteIntValue("port", Port);
            writer.WriteStringValue("senderAddress", SenderAddress);
            writer.WriteStringValue("senderDisplayName", SenderDisplayName);
            writer.WriteBoolValue("useNtlm", UseNtlm);
        }
    }
}
#pragma warning restore CS0618
