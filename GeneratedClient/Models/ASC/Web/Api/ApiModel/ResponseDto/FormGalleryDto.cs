// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class FormGalleryDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>Ext</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ext { get; set; }
#nullable restore
#else
        public string Ext { get; set; }
#endif
        /// <summary>Path</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>Upload dashboard</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UploadDashboard { get; set; }
#nullable restore
#else
        public string UploadDashboard { get; set; }
#endif
        /// <summary>Upload domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UploadDomain { get; set; }
#nullable restore
#else
        public string UploadDomain { get; set; }
#endif
        /// <summary>Upload ext</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UploadExt { get; set; }
#nullable restore
#else
        public string UploadExt { get; set; }
#endif
        /// <summary>Upload path</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UploadPath { get; set; }
#nullable restore
#else
        public string UploadPath { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "ext", n => { Ext = n.GetStringValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "uploadDashboard", n => { UploadDashboard = n.GetStringValue(); } },
                { "uploadDomain", n => { UploadDomain = n.GetStringValue(); } },
                { "uploadExt", n => { UploadExt = n.GetStringValue(); } },
                { "uploadPath", n => { UploadPath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("domain", Domain);
            writer.WriteStringValue("ext", Ext);
            writer.WriteStringValue("path", Path);
            writer.WriteStringValue("uploadDashboard", UploadDashboard);
            writer.WriteStringValue("uploadDomain", UploadDomain);
            writer.WriteStringValue("uploadExt", UploadExt);
            writer.WriteStringValue("uploadPath", UploadPath);
        }
    }
}
#pragma warning restore CS0618
