// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto
{
    /// <summary>
    /// Authentication request parameters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AuthRequestsDto : IParsable
    {
        /// <summary>Provider access token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessToken { get; set; }
#nullable restore
#else
        public string AccessToken { get; set; }
#endif
        /// <summary>Two-factor authentication code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Code for getting a token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CodeOAuth { get; set; }
#nullable restore
#else
        public string CodeOAuth { get; set; }
#endif
        /// <summary>The confirmData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.ConfirmData? ConfirmData { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.ConfirmData ConfirmData { get; set; }
#endif
        /// <summary>Culture</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Culture { get; set; }
#nullable restore
#else
        public string Culture { get; set; }
#endif
        /// <summary>Password</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>Password hash</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PasswordHash { get; set; }
#nullable restore
#else
        public string PasswordHash { get; set; }
#endif
        /// <summary>Provider type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Provider { get; set; }
#nullable restore
#else
        public string Provider { get; set; }
#endif
        /// <summary>reCAPTCHA response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecaptchaResponse { get; set; }
#nullable restore
#else
        public string RecaptchaResponse { get; set; }
#endif
        /// <summary>[0 - Default, 1 - AndroidV2, 2 - iOSV2, 3 - hCaptcha]</summary>
        public int? RecaptchaType { get; set; }
        /// <summary>Serialized user profile</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerializedProfile { get; set; }
#nullable restore
#else
        public string SerializedProfile { get; set; }
#endif
        /// <summary>Session based authentication or not</summary>
        public bool? Session { get; set; }
        /// <summary>Username / email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessToken", n => { AccessToken = n.GetStringValue(); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "codeOAuth", n => { CodeOAuth = n.GetStringValue(); } },
                { "confirmData", n => { ConfirmData = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.ConfirmData>(global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.ConfirmData.CreateFromDiscriminatorValue); } },
                { "culture", n => { Culture = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "passwordHash", n => { PasswordHash = n.GetStringValue(); } },
                { "provider", n => { Provider = n.GetStringValue(); } },
                { "recaptchaResponse", n => { RecaptchaResponse = n.GetStringValue(); } },
                { "recaptchaType", n => { RecaptchaType = n.GetIntValue(); } },
                { "serializedProfile", n => { SerializedProfile = n.GetStringValue(); } },
                { "session", n => { Session = n.GetBoolValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accessToken", AccessToken);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("codeOAuth", CodeOAuth);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Web.Api.ApiModel.RequestsDto.ConfirmData>("confirmData", ConfirmData);
            writer.WriteStringValue("culture", Culture);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("passwordHash", PasswordHash);
            writer.WriteStringValue("provider", Provider);
            writer.WriteStringValue("recaptchaResponse", RecaptchaResponse);
            writer.WriteIntValue("recaptchaType", RecaptchaType);
            writer.WriteStringValue("serializedProfile", SerializedProfile);
            writer.WriteBoolValue("session", Session);
            writer.WriteStringValue("userName", UserName);
        }
    }
}
#pragma warning restore CS0618
