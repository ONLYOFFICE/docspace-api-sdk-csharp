// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Core.Billing
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tariff : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Customer ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>Delay due date</summary>
        public DateTimeOffset? DelayDueDate { get; set; }
        /// <summary>Due date</summary>
        public DateTimeOffset? DueDate { get; set; }
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>License date</summary>
        public DateTimeOffset? LicenseDate { get; set; }
        /// <summary>List of quotas</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KiotaPosts.Client.Models.ASC.Core.Billing.Quota>? Quotas { get; set; }
#nullable restore
#else
        public List<global::KiotaPosts.Client.Models.ASC.Core.Billing.Quota> Quotas { get; set; }
#endif
        /// <summary>[0 - Trial, 1 - Paid, 2 - Delay, 3 - Not paid]</summary>
        public int? State { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Core.Billing.Tariff"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Core.Billing.Tariff CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Core.Billing.Tariff();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customerId", n => { CustomerId = n.GetStringValue(); } },
                { "delayDueDate", n => { DelayDueDate = n.GetDateTimeOffsetValue(); } },
                { "dueDate", n => { DueDate = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "licenseDate", n => { LicenseDate = n.GetDateTimeOffsetValue(); } },
                { "quotas", n => { Quotas = n.GetCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Core.Billing.Quota>(global::KiotaPosts.Client.Models.ASC.Core.Billing.Quota.CreateFromDiscriminatorValue)?.AsList(); } },
                { "state", n => { State = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("customerId", CustomerId);
            writer.WriteDateTimeOffsetValue("delayDueDate", DelayDueDate);
            writer.WriteDateTimeOffsetValue("dueDate", DueDate);
            writer.WriteIntValue("id", Id);
            writer.WriteDateTimeOffsetValue("licenseDate", LicenseDate);
            writer.WriteCollectionOfObjectValues<global::KiotaPosts.Client.Models.ASC.Core.Billing.Quota>("quotas", Quotas);
            writer.WriteIntValue("state", State);
        }
    }
}
#pragma warning restore CS0618
