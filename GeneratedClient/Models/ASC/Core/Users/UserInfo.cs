// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Core.Users
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserInfo : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>[0 - Not activated, 1 - Activated, 2 - Pending, 4 - Auto generated]</summary>
        public int? ActivationStatus { get; set; }
        /// <summary>Birthday</summary>
        public DateTimeOffset? BirthDate { get; set; }
        /// <summary>The checkActivation property</summary>
        public bool? CheckActivation { get; private set; }
        /// <summary>List of contacts in the string format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Contacts { get; set; }
#nullable restore
#else
        public string Contacts { get; set; }
#endif
        /// <summary>List of contacts</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ContactsList { get; set; }
#nullable restore
#else
        public List<string> ContactsList { get; set; }
#endif
        /// <summary>Creation date</summary>
        public DateTimeOffset? CreateDate { get; set; }
        /// <summary>The createdBy property</summary>
        public Guid? CreatedBy { get; set; }
        /// <summary>Language</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CultureName { get; set; }
#nullable restore
#else
        public string CultureName { get; set; }
#endif
        /// <summary>Email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>First name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>ID</summary>
        public Guid? Id { get; set; }
        /// <summary>Spceifies if the user is active or not</summary>
        public bool? IsActive { get; private set; }
        /// <summary>Last modified date</summary>
        public DateTimeOffset? LastModified { get; set; }
        /// <summary>Last name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>LDAP user quota attribute</summary>
        public long? LdapQouta { get; set; }
        /// <summary>Location</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>Mobile phone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>[0 - Not activated, 1 - Activated]</summary>
        public int? MobilePhoneActivationStatus { get; set; }
        /// <summary>Notes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Specifies if the user account was removed or not</summary>
        public bool? Removed { get; set; }
        /// <summary>Sex (male or female)</summary>
        public bool? Sex { get; set; }
        /// <summary>LDAP user identificator</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sid { get; set; }
#nullable restore
#else
        public string Sid { get; set; }
#endif
        /// <summary>The spam property</summary>
        public bool? Spam { get; set; }
        /// <summary>SSO SAML user identificator</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SsoNameId { get; set; }
#nullable restore
#else
        public string SsoNameId { get; set; }
#endif
        /// <summary>SSO SAML user session identificator</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SsoSessionId { get; set; }
#nullable restore
#else
        public string SsoSessionId { get; set; }
#endif
        /// <summary>[1 - Active, 2 - Terminated, 4 - Pending, 5 - Default, 7 - All]</summary>
        public int? Status { get; set; }
        /// <summary>Tenant ID</summary>
        public int? TenantId { get; set; }
        /// <summary>The date and time when the user account was terminated</summary>
        public DateTimeOffset? TerminatedDate { get; set; }
        /// <summary>Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Username</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>Registration date</summary>
        public DateTimeOffset? WorkFromDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Core.Users.UserInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Core.Users.UserInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Core.Users.UserInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activationStatus", n => { ActivationStatus = n.GetIntValue(); } },
                { "birthDate", n => { BirthDate = n.GetDateTimeOffsetValue(); } },
                { "checkActivation", n => { CheckActivation = n.GetBoolValue(); } },
                { "contacts", n => { Contacts = n.GetStringValue(); } },
                { "contactsList", n => { ContactsList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "createDate", n => { CreateDate = n.GetDateTimeOffsetValue(); } },
                { "createdBy", n => { CreatedBy = n.GetGuidValue(); } },
                { "cultureName", n => { CultureName = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "isActive", n => { IsActive = n.GetBoolValue(); } },
                { "lastModified", n => { LastModified = n.GetDateTimeOffsetValue(); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "ldapQouta", n => { LdapQouta = n.GetLongValue(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "mobilePhone", n => { MobilePhone = n.GetStringValue(); } },
                { "mobilePhoneActivationStatus", n => { MobilePhoneActivationStatus = n.GetIntValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "removed", n => { Removed = n.GetBoolValue(); } },
                { "sex", n => { Sex = n.GetBoolValue(); } },
                { "sid", n => { Sid = n.GetStringValue(); } },
                { "spam", n => { Spam = n.GetBoolValue(); } },
                { "ssoNameId", n => { SsoNameId = n.GetStringValue(); } },
                { "ssoSessionId", n => { SsoSessionId = n.GetStringValue(); } },
                { "status", n => { Status = n.GetIntValue(); } },
                { "tenantId", n => { TenantId = n.GetIntValue(); } },
                { "terminatedDate", n => { TerminatedDate = n.GetDateTimeOffsetValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
                { "workFromDate", n => { WorkFromDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("activationStatus", ActivationStatus);
            writer.WriteDateTimeOffsetValue("birthDate", BirthDate);
            writer.WriteStringValue("contacts", Contacts);
            writer.WriteCollectionOfPrimitiveValues<string>("contactsList", ContactsList);
            writer.WriteDateTimeOffsetValue("createDate", CreateDate);
            writer.WriteGuidValue("createdBy", CreatedBy);
            writer.WriteStringValue("cultureName", CultureName);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteGuidValue("id", Id);
            writer.WriteDateTimeOffsetValue("lastModified", LastModified);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteLongValue("ldapQouta", LdapQouta);
            writer.WriteStringValue("location", Location);
            writer.WriteStringValue("mobilePhone", MobilePhone);
            writer.WriteIntValue("mobilePhoneActivationStatus", MobilePhoneActivationStatus);
            writer.WriteStringValue("notes", Notes);
            writer.WriteBoolValue("removed", Removed);
            writer.WriteBoolValue("sex", Sex);
            writer.WriteStringValue("sid", Sid);
            writer.WriteBoolValue("spam", Spam);
            writer.WriteStringValue("ssoNameId", SsoNameId);
            writer.WriteStringValue("ssoSessionId", SsoSessionId);
            writer.WriteIntValue("status", Status);
            writer.WriteIntValue("tenantId", TenantId);
            writer.WriteDateTimeOffsetValue("terminatedDate", TerminatedDate);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("userName", UserName);
            writer.WriteDateTimeOffsetValue("workFromDate", WorkFromDate);
        }
    }
}
#pragma warning restore CS0618
