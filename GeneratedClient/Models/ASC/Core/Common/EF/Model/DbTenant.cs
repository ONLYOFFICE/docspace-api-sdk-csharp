// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Core.Common.EF.Model
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DbTenant : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Alias</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Alias { get; set; }
#nullable restore
#else
        public string Alias { get; set; }
#endif
        /// <summary>Calls</summary>
        public bool? Calls { get; set; }
        /// <summary>Creation date time</summary>
        public DateTimeOffset? CreationDateTime { get; set; }
        /// <summary>Id</summary>
        public int? Id { get; set; }
        /// <summary>[0 - Other, 1 - Accounting, 2 - Advertising marketing PR, 3 - Banking, 4 - Consulting, 5 - Design, 6 - Education, 7 - Environment, 8 - Financial services, 9 - Health care, 10 - IT, 11 - Legal, 12 - Manufacturing, 13 - Public sector, 14 - Publishing, 15 - Retail sales, 16 - Telecommunications]</summary>
        public int? Industry { get; set; }
        /// <summary>Language</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>Last modified</summary>
        public DateTimeOffset? LastModified { get; set; }
        /// <summary>Mapped domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MappedDomain { get; set; }
#nullable restore
#else
        public string MappedDomain { get; set; }
#endif
        /// <summary>Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Owner id</summary>
        public Guid? OwnerId { get; set; }
        /// <summary>The partner property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenantPartner? Partner { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenantPartner Partner { get; set; }
#endif
        /// <summary>Payment id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentId { get; set; }
#nullable restore
#else
        public string PaymentId { get; set; }
#endif
        /// <summary>[0 - Active, 1 - Suspended, 2 - Remove pending, 3 - Transfering, 4 - Restoring, 5 - Migrating, 6 - Encryption]</summary>
        public int? Status { get; set; }
        /// <summary>Status changed</summary>
        public DateTimeOffset? StatusChanged { get; set; }
        /// <summary>Status changed hack</summary>
        public DateTimeOffset? StatusChangedHack { get; set; }
        /// <summary>Time zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>[0 - None, 1 - Custom, 2 - All]</summary>
        public int? TrustedDomainsEnabled { get; set; }
        /// <summary>Trusted domains raw</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrustedDomainsRaw { get; set; }
#nullable restore
#else
        public string TrustedDomainsRaw { get; set; }
#endif
        /// <summary>Version</summary>
        public int? Version { get; set; }
        /// <summary>Version_changed</summary>
        public DateTimeOffset? Version_Changed { get; set; }
        /// <summary>Version changed</summary>
        public DateTimeOffset? VersionChanged { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alias", n => { Alias = n.GetStringValue(); } },
                { "calls", n => { Calls = n.GetBoolValue(); } },
                { "creationDateTime", n => { CreationDateTime = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "industry", n => { Industry = n.GetIntValue(); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "lastModified", n => { LastModified = n.GetDateTimeOffsetValue(); } },
                { "mappedDomain", n => { MappedDomain = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "ownerId", n => { OwnerId = n.GetGuidValue(); } },
                { "partner", n => { Partner = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenantPartner>(global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenantPartner.CreateFromDiscriminatorValue); } },
                { "paymentId", n => { PaymentId = n.GetStringValue(); } },
                { "status", n => { Status = n.GetIntValue(); } },
                { "statusChanged", n => { StatusChanged = n.GetDateTimeOffsetValue(); } },
                { "statusChangedHack", n => { StatusChangedHack = n.GetDateTimeOffsetValue(); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
                { "trustedDomainsEnabled", n => { TrustedDomainsEnabled = n.GetIntValue(); } },
                { "trustedDomainsRaw", n => { TrustedDomainsRaw = n.GetStringValue(); } },
                { "version", n => { Version = n.GetIntValue(); } },
                { "versionChanged", n => { VersionChanged = n.GetDateTimeOffsetValue(); } },
                { "version_Changed", n => { Version_Changed = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("alias", Alias);
            writer.WriteBoolValue("calls", Calls);
            writer.WriteDateTimeOffsetValue("creationDateTime", CreationDateTime);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("industry", Industry);
            writer.WriteStringValue("language", Language);
            writer.WriteDateTimeOffsetValue("lastModified", LastModified);
            writer.WriteStringValue("mappedDomain", MappedDomain);
            writer.WriteStringValue("name", Name);
            writer.WriteGuidValue("ownerId", OwnerId);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenantPartner>("partner", Partner);
            writer.WriteStringValue("paymentId", PaymentId);
            writer.WriteIntValue("status", Status);
            writer.WriteDateTimeOffsetValue("statusChanged", StatusChanged);
            writer.WriteDateTimeOffsetValue("statusChangedHack", StatusChangedHack);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteIntValue("trustedDomainsEnabled", TrustedDomainsEnabled);
            writer.WriteStringValue("trustedDomainsRaw", TrustedDomainsRaw);
            writer.WriteIntValue("version", Version);
            writer.WriteDateTimeOffsetValue("version_Changed", Version_Changed);
            writer.WriteDateTimeOffsetValue("versionChanged", VersionChanged);
        }
    }
}
#pragma warning restore CS0618
