// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.Core.Common.EF.Model;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Core.Common.EF
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class FireBaseUser : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Application</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Application { get; set; }
#nullable restore
#else
        public string Application { get; set; }
#endif
        /// <summary>Firebase device token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirebaseDeviceToken { get; set; }
#nullable restore
#else
        public string FirebaseDeviceToken { get; set; }
#endif
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Specifies if the user is subscribed to the push notifications or not</summary>
        public bool? IsSubscribed { get; set; }
        /// <summary>The tenant property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant? Tenant { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant Tenant { get; set; }
#endif
        /// <summary>Tenant ID</summary>
        public int? TenantId { get; set; }
        /// <summary>User ID</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Core.Common.EF.FireBaseUser"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Core.Common.EF.FireBaseUser CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Core.Common.EF.FireBaseUser();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "application", n => { Application = n.GetStringValue(); } },
                { "firebaseDeviceToken", n => { FirebaseDeviceToken = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "isSubscribed", n => { IsSubscribed = n.GetBoolValue(); } },
                { "tenant", n => { Tenant = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant>(global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant.CreateFromDiscriminatorValue); } },
                { "tenantId", n => { TenantId = n.GetIntValue(); } },
                { "userId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("application", Application);
            writer.WriteStringValue("firebaseDeviceToken", FirebaseDeviceToken);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("isSubscribed", IsSubscribed);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Core.Common.EF.Model.DbTenant>("tenant", Tenant);
            writer.WriteIntValue("tenantId", TenantId);
            writer.WriteGuidValue("userId", UserId);
        }
    }
}
#pragma warning restore CS0618
