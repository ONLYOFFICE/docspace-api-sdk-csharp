// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Core.Tenants
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TenantQuota : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Specifies if the audit trail is available or not</summary>
        public bool? Audit { get; set; }
        /// <summary>Specifies if the automatic Backup&amp;Restore feature is available or not</summary>
        public bool? AutoBackupRestore { get; set; }
        /// <summary>Specifies if the branding settings are available or not</summary>
        public bool? Branding { get; set; }
        /// <summary>Specifies if the content search is available or not</summary>
        public bool? ContentSearch { get; set; }
        /// <summary>Number of rooms</summary>
        public int? CountRoom { get; set; }
        /// <summary>Number of portal room administrators</summary>
        public int? CountRoomAdmin { get; set; }
        /// <summary>Number of portal users</summary>
        public int? CountUser { get; set; }
        /// <summary>Specifies if the custom domain URL is available or not</summary>
        public bool? Custom { get; set; }
        /// <summary>Specifies if the customization settings are available or not</summary>
        public bool? Customization { get; set; }
        /// <summary>Specifies if this tenant quota is Docs edition or not</summary>
        public bool? DocsEdition { get; set; }
        /// <summary>Tenant quota features</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Features { get; set; }
#nullable restore
#else
        public string Features { get; set; }
#endif
        /// <summary>Specifies if the tenant quota is free or not</summary>
        public bool? Free { get; set; }
        /// <summary>Specifies if the LDAP settings are available or not</summary>
        public bool? Ldap { get; set; }
        /// <summary>Specifies if the license is lifetime or not</summary>
        public bool? Lifetime { get; set; }
        /// <summary>Maximum file size</summary>
        public long? MaxFileSize { get; set; }
        /// <summary>Maximum total size</summary>
        public long? MaxTotalSize { get; set; }
        /// <summary>Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Specifies if the tenant quota is nonprofit or not</summary>
        public bool? NonProfit { get; set; }
        /// <summary>Specifies if Oauth is available or not</summary>
        public bool? Oauth { get; set; }
        /// <summary>Price</summary>
        public double? Price { get; set; }
        /// <summary>Price currency symbol</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PriceCurrencySymbol { get; set; }
#nullable restore
#else
        public string PriceCurrencySymbol { get; set; }
#endif
        /// <summary>Product ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductId { get; set; }
#nullable restore
#else
        public string ProductId { get; set; }
#endif
        /// <summary>Specifies if the SSO settings are available or not</summary>
        public bool? Sso { get; set; }
        /// <summary>Specifies if the statistic settings are available or not</summary>
        public bool? Statistic { get; set; }
        /// <summary>Tenant ID</summary>
        public int? TenantId { get; set; }
        /// <summary>Specifies if the third-party accounts linking is available or not</summary>
        public bool? ThirdParty { get; set; }
        /// <summary>Specifies if the tenant quota is trial or not</summary>
        public bool? Trial { get; set; }
        /// <summary>Specifies if the tenant quota is updated or not</summary>
        public bool? Update { get; set; }
        /// <summary>Number of room users</summary>
        public int? UsersInRoom { get; set; }
        /// <summary>Specifies if the tenant quota is visible or not</summary>
        public bool? Visible { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantQuota"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantQuota CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Core.Tenants.TenantQuota();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audit", n => { Audit = n.GetBoolValue(); } },
                { "autoBackupRestore", n => { AutoBackupRestore = n.GetBoolValue(); } },
                { "branding", n => { Branding = n.GetBoolValue(); } },
                { "contentSearch", n => { ContentSearch = n.GetBoolValue(); } },
                { "countRoom", n => { CountRoom = n.GetIntValue(); } },
                { "countRoomAdmin", n => { CountRoomAdmin = n.GetIntValue(); } },
                { "countUser", n => { CountUser = n.GetIntValue(); } },
                { "custom", n => { Custom = n.GetBoolValue(); } },
                { "customization", n => { Customization = n.GetBoolValue(); } },
                { "docsEdition", n => { DocsEdition = n.GetBoolValue(); } },
                { "features", n => { Features = n.GetStringValue(); } },
                { "free", n => { Free = n.GetBoolValue(); } },
                { "ldap", n => { Ldap = n.GetBoolValue(); } },
                { "lifetime", n => { Lifetime = n.GetBoolValue(); } },
                { "maxFileSize", n => { MaxFileSize = n.GetLongValue(); } },
                { "maxTotalSize", n => { MaxTotalSize = n.GetLongValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nonProfit", n => { NonProfit = n.GetBoolValue(); } },
                { "oauth", n => { Oauth = n.GetBoolValue(); } },
                { "price", n => { Price = n.GetDoubleValue(); } },
                { "priceCurrencySymbol", n => { PriceCurrencySymbol = n.GetStringValue(); } },
                { "productId", n => { ProductId = n.GetStringValue(); } },
                { "sso", n => { Sso = n.GetBoolValue(); } },
                { "statistic", n => { Statistic = n.GetBoolValue(); } },
                { "tenantId", n => { TenantId = n.GetIntValue(); } },
                { "thirdParty", n => { ThirdParty = n.GetBoolValue(); } },
                { "trial", n => { Trial = n.GetBoolValue(); } },
                { "update", n => { Update = n.GetBoolValue(); } },
                { "usersInRoom", n => { UsersInRoom = n.GetIntValue(); } },
                { "visible", n => { Visible = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("audit", Audit);
            writer.WriteBoolValue("autoBackupRestore", AutoBackupRestore);
            writer.WriteBoolValue("branding", Branding);
            writer.WriteBoolValue("contentSearch", ContentSearch);
            writer.WriteIntValue("countRoom", CountRoom);
            writer.WriteIntValue("countRoomAdmin", CountRoomAdmin);
            writer.WriteIntValue("countUser", CountUser);
            writer.WriteBoolValue("custom", Custom);
            writer.WriteBoolValue("customization", Customization);
            writer.WriteBoolValue("docsEdition", DocsEdition);
            writer.WriteStringValue("features", Features);
            writer.WriteBoolValue("free", Free);
            writer.WriteBoolValue("ldap", Ldap);
            writer.WriteBoolValue("lifetime", Lifetime);
            writer.WriteLongValue("maxFileSize", MaxFileSize);
            writer.WriteLongValue("maxTotalSize", MaxTotalSize);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("nonProfit", NonProfit);
            writer.WriteBoolValue("oauth", Oauth);
            writer.WriteDoubleValue("price", Price);
            writer.WriteStringValue("priceCurrencySymbol", PriceCurrencySymbol);
            writer.WriteStringValue("productId", ProductId);
            writer.WriteBoolValue("sso", Sso);
            writer.WriteBoolValue("statistic", Statistic);
            writer.WriteIntValue("tenantId", TenantId);
            writer.WriteBoolValue("thirdParty", ThirdParty);
            writer.WriteBoolValue("trial", Trial);
            writer.WriteBoolValue("update", Update);
            writer.WriteIntValue("usersInRoom", UsersInRoom);
            writer.WriteBoolValue("visible", Visible);
        }
    }
}
#pragma warning restore CS0618
