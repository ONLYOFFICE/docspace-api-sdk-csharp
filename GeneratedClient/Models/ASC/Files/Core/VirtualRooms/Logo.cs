// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Logo : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Color</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>The cover property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.LogoCover? Cover { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.LogoCover Cover { get; set; }
#endif
        /// <summary>Large</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Large { get; set; }
#nullable restore
#else
        public string Large { get; set; }
#endif
        /// <summary>Medium</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Medium { get; set; }
#nullable restore
#else
        public string Medium { get; set; }
#endif
        /// <summary>Original</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Original { get; set; }
#nullable restore
#else
        public string Original { get; set; }
#endif
        /// <summary>Small</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Small { get; set; }
#nullable restore
#else
        public string Small { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.Logo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.Logo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.Logo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "color", n => { Color = n.GetStringValue(); } },
                { "cover", n => { Cover = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.LogoCover>(global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.LogoCover.CreateFromDiscriminatorValue); } },
                { "large", n => { Large = n.GetStringValue(); } },
                { "medium", n => { Medium = n.GetStringValue(); } },
                { "original", n => { Original = n.GetStringValue(); } },
                { "small", n => { Small = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("color", Color);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.VirtualRooms.LogoCover>("cover", Cover);
            writer.WriteStringValue("large", Large);
            writer.WriteStringValue("medium", Medium);
            writer.WriteStringValue("original", Original);
            writer.WriteStringValue("small", Small);
        }
    }
}
#pragma warning restore CS0618
