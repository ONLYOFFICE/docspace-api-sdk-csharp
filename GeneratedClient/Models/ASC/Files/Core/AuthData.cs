// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.FederatedLogin;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AuthData : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Login</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Login { get; set; }
#nullable restore
#else
        public string Login { get; set; }
#endif
        /// <summary>Password</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>Provider</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Provider { get; set; }
#nullable restore
#else
        public string Provider { get; set; }
#endif
        /// <summary>Raw token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RawToken { get; set; }
#nullable restore
#else
        public string RawToken { get; set; }
#endif
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.FederatedLogin.OAuth20Token? Token { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.FederatedLogin.OAuth20Token Token { get; set; }
#endif
        /// <summary>Url</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.AuthData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.AuthData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.AuthData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "login", n => { Login = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "provider", n => { Provider = n.GetStringValue(); } },
                { "rawToken", n => { RawToken = n.GetStringValue(); } },
                { "token", n => { Token = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.FederatedLogin.OAuth20Token>(global::KiotaPosts.Client.Models.ASC.FederatedLogin.OAuth20Token.CreateFromDiscriminatorValue); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("login", Login);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("provider", Provider);
            writer.WriteStringValue("rawToken", RawToken);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.FederatedLogin.OAuth20Token>("token", Token);
            writer.WriteStringValue("url", Url);
        }
    }
}
#pragma warning restore CS0618
