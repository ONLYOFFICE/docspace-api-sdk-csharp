// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.Api.Core;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto
{
    /// <summary>
    /// Session parameters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SessionRequest : IParsable
    {
        /// <summary>Create new if exists</summary>
        public bool? CreateNewIfExist { get; set; }
        /// <summary>The createOn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? CreateOn { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime CreateOn { get; set; }
#endif
        /// <summary>Specifies whether to encrypt a file or not</summary>
        public bool? Encrypted { get; set; }
        /// <summary>File name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; set; }
#nullable restore
#else
        public string FileName { get; set; }
#endif
        /// <summary>File length in bytes</summary>
        public long? FileSize { get; set; }
        /// <summary>Relative path to the folder</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RelativePath { get; set; }
#nullable restore
#else
        public string RelativePath { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.SessionRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.SessionRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.SessionRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createNewIfExist", n => { CreateNewIfExist = n.GetBoolValue(); } },
                { "createOn", n => { CreateOn = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
                { "encrypted", n => { Encrypted = n.GetBoolValue(); } },
                { "fileName", n => { FileName = n.GetStringValue(); } },
                { "fileSize", n => { FileSize = n.GetLongValue(); } },
                { "relativePath", n => { RelativePath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("createNewIfExist", CreateNewIfExist);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("createOn", CreateOn);
            writer.WriteBoolValue("encrypted", Encrypted);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteLongValue("fileSize", FileSize);
            writer.WriteStringValue("relativePath", RelativePath);
        }
    }
}
#pragma warning restore CS0618
