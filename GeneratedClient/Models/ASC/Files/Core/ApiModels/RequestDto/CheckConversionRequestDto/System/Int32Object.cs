// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CheckConversionRequestDto.System
{
    /// <summary>
    /// Request parameters for starting file conversion
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Int32Object : IParsable
    {
        /// <summary>Create new if exists</summary>
        public bool? CreateNewIfExist { get; set; }
        /// <summary>File ID</summary>
        public int? FileId { get; set; }
        /// <summary>Output type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OutputType { get; set; }
#nullable restore
#else
        public string OutputType { get; set; }
#endif
        /// <summary>Password</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>Specifies whether to start a conversion process or not</summary>
        public bool? StartConvert { get; set; }
        /// <summary>Specifies if the conversion process is synchronous or not</summary>
        public bool? Sync { get; set; }
        /// <summary>File version</summary>
        public int? Version { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CheckConversionRequestDto.System.Int32Object"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CheckConversionRequestDto.System.Int32Object CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CheckConversionRequestDto.System.Int32Object();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createNewIfExist", n => { CreateNewIfExist = n.GetBoolValue(); } },
                { "fileId", n => { FileId = n.GetIntValue(); } },
                { "outputType", n => { OutputType = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "startConvert", n => { StartConvert = n.GetBoolValue(); } },
                { "sync", n => { Sync = n.GetBoolValue(); } },
                { "version", n => { Version = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("createNewIfExist", CreateNewIfExist);
            writer.WriteIntValue("fileId", FileId);
            writer.WriteStringValue("outputType", OutputType);
            writer.WriteStringValue("password", Password);
            writer.WriteBoolValue("startConvert", StartConvert);
            writer.WriteBoolValue("sync", Sync);
            writer.WriteIntValue("version", Version);
        }
    }
}
#pragma warning restore CS0618
