// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.ASC.Api.Core;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto
{
    /// <summary>
    /// Link parameters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RoomLinkRequest : IParsable
    {
        /// <summary>[0 - None, 1 - Read and write, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - Fill forms, 8 - Custom filter, 9 - Room manager, 10 - Editing, 11 - Content creator]</summary>
        public int? Access { get; set; }
        /// <summary>Specifies whether downloading a file from a link is disabled or not</summary>
        public bool? DenyDownload { get; set; }
        /// <summary>The expirationDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime? ExpirationDate { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime ExpirationDate { get; set; }
#endif
        /// <summary>Link ID</summary>
        public Guid? LinkId { get; set; }
        /// <summary>[0 - Invitation, 1 - External]</summary>
        public int? LinkType { get; set; }
        /// <summary>Link password</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>Link name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.RoomLinkRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.RoomLinkRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.RoomLinkRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access", n => { Access = n.GetIntValue(); } },
                { "denyDownload", n => { DenyDownload = n.GetBoolValue(); } },
                { "expirationDate", n => { ExpirationDate = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>(global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime.CreateFromDiscriminatorValue); } },
                { "linkId", n => { LinkId = n.GetGuidValue(); } },
                { "linkType", n => { LinkType = n.GetIntValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("access", Access);
            writer.WriteBoolValue("denyDownload", DenyDownload);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Api.Core.ApiDateTime>("expirationDate", ExpirationDate);
            writer.WriteGuidValue("linkId", LinkId);
            writer.WriteIntValue("linkType", LinkType);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("title", Title);
        }
    }
}
#pragma warning restore CS0618
