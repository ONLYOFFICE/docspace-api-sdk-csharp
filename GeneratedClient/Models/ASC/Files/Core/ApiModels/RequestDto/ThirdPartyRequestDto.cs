// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto
{
    /// <summary>
    /// Third-party request parameters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ThirdPartyRequestDto : IParsable
    {
        /// <summary>Customer title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerTitle { get; set; }
#nullable restore
#else
        public string CustomerTitle { get; set; }
#endif
        /// <summary>Login</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Login { get; set; }
#nullable restore
#else
        public string Login { get; set; }
#endif
        /// <summary>Password</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>Provider ID</summary>
        public int? ProviderId { get; set; }
        /// <summary>Provider key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderKey { get; set; }
#nullable restore
#else
        public string ProviderKey { get; set; }
#endif
        /// <summary>Authentication token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Connection URL for the sharepoint</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.ThirdPartyRequestDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.ThirdPartyRequestDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.ThirdPartyRequestDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customerTitle", n => { CustomerTitle = n.GetStringValue(); } },
                { "login", n => { Login = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "providerId", n => { ProviderId = n.GetIntValue(); } },
                { "providerKey", n => { ProviderKey = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("customerTitle", CustomerTitle);
            writer.WriteStringValue("login", Login);
            writer.WriteStringValue("password", Password);
            writer.WriteIntValue("providerId", ProviderId);
            writer.WriteStringValue("providerKey", ProviderKey);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("url", Url);
        }
    }
}
#pragma warning restore CS0618
