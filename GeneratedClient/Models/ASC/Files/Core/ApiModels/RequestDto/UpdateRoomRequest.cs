// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto
{
    /// <summary>
    /// Parameters for updating a room
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UpdateRoomRequest : IParsable
    {
        /// <summary>Color</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>Cover</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cover { get; set; }
#nullable restore
#else
        public string Cover { get; set; }
#endif
        /// <summary>Room quota</summary>
        public bool? DenyDownload { get; set; }
        /// <summary>Indexing</summary>
        public bool? Indexing { get; set; }
        /// <summary>The lifetime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RoomDataLifetimeDto? Lifetime { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RoomDataLifetimeDto Lifetime { get; set; }
#endif
        /// <summary>Logo request parameters</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.LogoRequest? Logo { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.LogoRequest Logo { get; set; }
#endif
        /// <summary>Room quota</summary>
        public long? Quota { get; set; }
        /// <summary>List of tags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>Room name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Request parameters for adding watermarks</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.WatermarkRequestDto? Watermark { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.WatermarkRequestDto Watermark { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.UpdateRoomRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.UpdateRoomRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.UpdateRoomRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "color", n => { Color = n.GetStringValue(); } },
                { "cover", n => { Cover = n.GetStringValue(); } },
                { "denyDownload", n => { DenyDownload = n.GetBoolValue(); } },
                { "indexing", n => { Indexing = n.GetBoolValue(); } },
                { "lifetime", n => { Lifetime = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RoomDataLifetimeDto>(global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RoomDataLifetimeDto.CreateFromDiscriminatorValue); } },
                { "logo", n => { Logo = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.LogoRequest>(global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.LogoRequest.CreateFromDiscriminatorValue); } },
                { "quota", n => { Quota = n.GetLongValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "watermark", n => { Watermark = n.GetObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.WatermarkRequestDto>(global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.WatermarkRequestDto.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("color", Color);
            writer.WriteStringValue("cover", Cover);
            writer.WriteBoolValue("denyDownload", DenyDownload);
            writer.WriteBoolValue("indexing", Indexing);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RoomDataLifetimeDto>("lifetime", Lifetime);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.LogoRequest>("logo", Logo);
            writer.WriteLongValue("quota", Quota);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("title", Title);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.WatermarkRequestDto>("watermark", Watermark);
        }
    }
}
#pragma warning restore CS0618
