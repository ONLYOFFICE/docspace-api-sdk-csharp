// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.System.Net.Mime;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto
{
    /// <summary>
    /// Request parameters for uploading a file
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UploadRequestDto : IParsable
    {
        /// <summary>The contentDisposition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition? ContentDisposition { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition ContentDisposition { get; set; }
#endif
        /// <summary>The contentType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KiotaPosts.Client.Models.System.Net.Mime.ContentType? ContentType { get; set; }
#nullable restore
#else
        public global::KiotaPosts.Client.Models.System.Net.Mime.ContentType ContentType { get; set; }
#endif
        /// <summary>Specifies whether to create a new file if it already exists or not</summary>
        public bool? CreateNewIfExist { get; set; }
        /// <summary>File</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? File { get; set; }
#nullable restore
#else
        public string File { get; set; }
#endif
        /// <summary>List of files when specified as multipart/form-data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Files { get; set; }
#nullable restore
#else
        public List<string> Files { get; set; }
#endif
        /// <summary>Specifies whether to keep the file converting status or not</summary>
        public bool? KeepConvertStatus { get; set; }
        /// <summary>Specifies whether to upload documents in the original formats as well or not</summary>
        public bool? StoreOriginalFileFlag { get; set; }
        /// <summary>Request input stream</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Stream { get; set; }
#nullable restore
#else
        public string Stream { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.UploadRequestDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "contentDisposition", n => { ContentDisposition = n.GetObjectValue<global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition>(global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition.CreateFromDiscriminatorValue); } },
                { "contentType", n => { ContentType = n.GetObjectValue<global::KiotaPosts.Client.Models.System.Net.Mime.ContentType>(global::KiotaPosts.Client.Models.System.Net.Mime.ContentType.CreateFromDiscriminatorValue); } },
                { "createNewIfExist", n => { CreateNewIfExist = n.GetBoolValue(); } },
                { "file", n => { File = n.GetStringValue(); } },
                { "files", n => { Files = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "keepConvertStatus", n => { KeepConvertStatus = n.GetBoolValue(); } },
                { "storeOriginalFileFlag", n => { StoreOriginalFileFlag = n.GetBoolValue(); } },
                { "stream", n => { Stream = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition>("contentDisposition", ContentDisposition);
            writer.WriteObjectValue<global::KiotaPosts.Client.Models.System.Net.Mime.ContentType>("contentType", ContentType);
            writer.WriteBoolValue("createNewIfExist", CreateNewIfExist);
            writer.WriteStringValue("file", File);
            writer.WriteCollectionOfPrimitiveValues<string>("files", Files);
            writer.WriteBoolValue("keepConvertStatus", KeepConvertStatus);
            writer.WriteBoolValue("storeOriginalFileFlag", StoreOriginalFileFlag);
            writer.WriteStringValue("stream", Stream);
        }
    }
}
#pragma warning restore CS0618
