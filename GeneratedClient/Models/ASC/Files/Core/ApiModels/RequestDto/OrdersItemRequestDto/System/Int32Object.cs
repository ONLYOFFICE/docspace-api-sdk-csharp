// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.OrdersItemRequestDto.System
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Int32Object : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The entryId property</summary>
        public int? EntryId { get; set; }
        /// <summary>The entryType property</summary>
        public int? EntryType { get; set; }
        /// <summary>Order</summary>
        public int? Order { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.OrdersItemRequestDto.System.Int32Object"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.OrdersItemRequestDto.System.Int32Object CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.OrdersItemRequestDto.System.Int32Object();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "entryId", n => { EntryId = n.GetIntValue(); } },
                { "entryType", n => { EntryType = n.GetIntValue(); } },
                { "order", n => { Order = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("entryId", EntryId);
            writer.WriteIntValue("entryType", EntryType);
            writer.WriteIntValue("order", Order);
        }
    }
}
#pragma warning restore CS0618
