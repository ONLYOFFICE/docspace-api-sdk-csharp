// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatermarkDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>[1 - User name, 2 - User email, 4 - User ip adress, 8 - Current date, 16 - Room name]</summary>
        public int? Additions { get; set; }
        /// <summary>Watermark image height</summary>
        public double? ImageHeight { get; set; }
        /// <summary>Watermark image scale</summary>
        public int? ImageScale { get; set; }
        /// <summary>Watermark image url</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>Watermark image width</summary>
        public double? ImageWidth { get; set; }
        /// <summary>Watermark text and image rotate</summary>
        public int? Rotate { get; set; }
        /// <summary>Watermark Text</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto.WatermarkDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto.WatermarkDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto.WatermarkDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "additions", n => { Additions = n.GetIntValue(); } },
                { "imageHeight", n => { ImageHeight = n.GetDoubleValue(); } },
                { "imageScale", n => { ImageScale = n.GetIntValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "imageWidth", n => { ImageWidth = n.GetDoubleValue(); } },
                { "rotate", n => { Rotate = n.GetIntValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("additions", Additions);
            writer.WriteDoubleValue("imageHeight", ImageHeight);
            writer.WriteIntValue("imageScale", ImageScale);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteDoubleValue("imageWidth", ImageWidth);
            writer.WriteIntValue("rotate", Rotate);
            writer.WriteStringValue("text", Text);
        }
    }
}
#pragma warning restore CS0618
