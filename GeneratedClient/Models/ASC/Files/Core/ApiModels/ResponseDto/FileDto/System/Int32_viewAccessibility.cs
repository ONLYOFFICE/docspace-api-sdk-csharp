// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto.FileDto.System
{
    /// <summary>
    /// File accessibility
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Int32_viewAccessibility : IParsable
    {
        /// <summary>The CanConvert property</summary>
        public bool? CanConvert { get; set; }
        /// <summary>The CoAuhtoring property</summary>
        public bool? CoAuhtoring { get; set; }
        /// <summary>The ImageView property</summary>
        public bool? ImageView { get; set; }
        /// <summary>The MediaView property</summary>
        public bool? MediaView { get; set; }
        /// <summary>The MustConvert property</summary>
        public bool? MustConvert { get; set; }
        /// <summary>The WebComment property</summary>
        public bool? WebComment { get; set; }
        /// <summary>The WebCustomFilterEditing property</summary>
        public bool? WebCustomFilterEditing { get; set; }
        /// <summary>The WebEdit property</summary>
        public bool? WebEdit { get; set; }
        /// <summary>The WebRestrictedEditing property</summary>
        public bool? WebRestrictedEditing { get; set; }
        /// <summary>The WebReview property</summary>
        public bool? WebReview { get; set; }
        /// <summary>The WebView property</summary>
        public bool? WebView { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto.FileDto.System.Int32_viewAccessibility"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto.FileDto.System.Int32_viewAccessibility CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.ResponseDto.FileDto.System.Int32_viewAccessibility();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "CanConvert", n => { CanConvert = n.GetBoolValue(); } },
                { "CoAuhtoring", n => { CoAuhtoring = n.GetBoolValue(); } },
                { "ImageView", n => { ImageView = n.GetBoolValue(); } },
                { "MediaView", n => { MediaView = n.GetBoolValue(); } },
                { "MustConvert", n => { MustConvert = n.GetBoolValue(); } },
                { "WebComment", n => { WebComment = n.GetBoolValue(); } },
                { "WebCustomFilterEditing", n => { WebCustomFilterEditing = n.GetBoolValue(); } },
                { "WebEdit", n => { WebEdit = n.GetBoolValue(); } },
                { "WebRestrictedEditing", n => { WebRestrictedEditing = n.GetBoolValue(); } },
                { "WebReview", n => { WebReview = n.GetBoolValue(); } },
                { "WebView", n => { WebView = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("CanConvert", CanConvert);
            writer.WriteBoolValue("CoAuhtoring", CoAuhtoring);
            writer.WriteBoolValue("ImageView", ImageView);
            writer.WriteBoolValue("MediaView", MediaView);
            writer.WriteBoolValue("MustConvert", MustConvert);
            writer.WriteBoolValue("WebComment", WebComment);
            writer.WriteBoolValue("WebCustomFilterEditing", WebCustomFilterEditing);
            writer.WriteBoolValue("WebEdit", WebEdit);
            writer.WriteBoolValue("WebRestrictedEditing", WebRestrictedEditing);
            writer.WriteBoolValue("WebReview", WebReview);
            writer.WriteBoolValue("WebView", WebView);
        }
    }
}
#pragma warning restore CS0618
