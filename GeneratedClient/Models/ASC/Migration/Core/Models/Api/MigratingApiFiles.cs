// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.ASC.Migration.Core.Models.Api
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MigratingApiFiles : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The bytesTotal property</summary>
        public long? BytesTotal { get; set; }
        /// <summary>The filesCount property</summary>
        public int? FilesCount { get; set; }
        /// <summary>The foldersCount property</summary>
        public int? FoldersCount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.ASC.Migration.Core.Models.Api.MigratingApiFiles"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.ASC.Migration.Core.Models.Api.MigratingApiFiles CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.ASC.Migration.Core.Models.Api.MigratingApiFiles();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bytesTotal", n => { BytesTotal = n.GetLongValue(); } },
                { "filesCount", n => { FilesCount = n.GetIntValue(); } },
                { "foldersCount", n => { FoldersCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("bytesTotal", BytesTotal);
            writer.WriteIntValue("filesCount", FilesCount);
            writer.WriteIntValue("foldersCount", FoldersCount);
        }
    }
}
#pragma warning restore CS0618
