// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KiotaPosts.Client.Models.System.Net.Mime
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ContentDisposition : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The creationDate property</summary>
        public DateTimeOffset? CreationDate { get; set; }
        /// <summary>The dispositionType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DispositionType { get; set; }
#nullable restore
#else
        public string DispositionType { get; set; }
#endif
        /// <summary>The fileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; set; }
#nullable restore
#else
        public string FileName { get; set; }
#endif
        /// <summary>The inline property</summary>
        public bool? Inline { get; set; }
        /// <summary>The modificationDate property</summary>
        public DateTimeOffset? ModificationDate { get; set; }
        /// <summary>The parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Parameters { get; private set; }
#nullable restore
#else
        public UntypedNode Parameters { get; private set; }
#endif
        /// <summary>The readDate property</summary>
        public DateTimeOffset? ReadDate { get; set; }
        /// <summary>The size property</summary>
        public long? Size { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KiotaPosts.Client.Models.System.Net.Mime.ContentDisposition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "creationDate", n => { CreationDate = n.GetDateTimeOffsetValue(); } },
                { "dispositionType", n => { DispositionType = n.GetStringValue(); } },
                { "fileName", n => { FileName = n.GetStringValue(); } },
                { "inline", n => { Inline = n.GetBoolValue(); } },
                { "modificationDate", n => { ModificationDate = n.GetDateTimeOffsetValue(); } },
                { "parameters", n => { Parameters = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "readDate", n => { ReadDate = n.GetDateTimeOffsetValue(); } },
                { "size", n => { Size = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("creationDate", CreationDate);
            writer.WriteStringValue("dispositionType", DispositionType);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteBoolValue("inline", Inline);
            writer.WriteDateTimeOffsetValue("modificationDate", ModificationDate);
            writer.WriteDateTimeOffsetValue("readDate", ReadDate);
            writer.WriteLongValue("size", Size);
        }
    }
}
#pragma warning restore CS0618
