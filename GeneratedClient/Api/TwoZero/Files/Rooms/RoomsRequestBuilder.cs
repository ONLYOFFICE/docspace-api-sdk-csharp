// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Api.TwoZero.Files.Rooms.Covers;
using KiotaPosts.Client.Api.TwoZero.Files.Rooms.Indexexport;
using KiotaPosts.Client.Api.TwoZero.Files.Rooms.Item;
using KiotaPosts.Client.Api.TwoZero.Files.Rooms.News;
using KiotaPosts.Client.Api.TwoZero.Files.Rooms.Resetquota;
using KiotaPosts.Client.Api.TwoZero.Files.Rooms.Roomquota;
using KiotaPosts.Client.Api.TwoZero.Files.Rooms.Thirdparty;
using KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto;
using KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderContentDto.System;
using KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderDto.System;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaPosts.Client.Api.TwoZero.Files.Rooms
{
    /// <summary>
    /// Builds and executes requests for operations under \api\2.0\files\rooms
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RoomsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The covers property</summary>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Covers.CoversRequestBuilder Covers
        {
            get => new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Covers.CoversRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The indexexport property</summary>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Indexexport.IndexexportRequestBuilder Indexexport
        {
            get => new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Indexexport.IndexexportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The news property</summary>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.News.NewsRequestBuilder News
        {
            get => new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.News.NewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resetquota property</summary>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Resetquota.ResetquotaRequestBuilder Resetquota
        {
            get => new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Resetquota.ResetquotaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The roomquota property</summary>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Roomquota.RoomquotaRequestBuilder Roomquota
        {
            get => new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Roomquota.RoomquotaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The thirdparty property</summary>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Thirdparty.ThirdpartyRequestBuilder Thirdparty
        {
            get => new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Thirdparty.ThirdpartyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the KiotaPosts.Client.api.TwoZero.files.rooms.item collection</summary>
        /// <param name="position">Room Id</param>
        /// <returns>A <see cref="global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Item.RoomsItemRequestBuilder"/></returns>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Item.RoomsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Item.RoomsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the KiotaPosts.Client.api.TwoZero.files.rooms.item collection</summary>
        /// <param name="position">Room Id</param>
        /// <returns>A <see cref="global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Item.RoomsItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Item.RoomsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("id", position);
                return new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.Item.RoomsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RoomsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/2.0/files/rooms{?excludeSubject*,provider*,quotaFilter*,searchArea*,searchInContent*,storageFilter*,subjectFilter*,subjectId*,tags*,type,withSubfolders*,withoutTags*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RoomsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/2.0/files/rooms{?excludeSubject*,provider*,quotaFilter*,searchArea*,searchInContent*,storageFilter*,subjectFilter*,subjectId*,tags*,type,withSubfolders*,withoutTags*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns the contents of the &quot;Rooms&quot; section by the parameters specified in the request.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderContentDto.System.Int32Object"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderContentDto.System.Int32Object?> GetAsync(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder.RoomsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderContentDto.System.Int32Object> GetAsync(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder.RoomsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderContentDto.System.Int32Object>(requestInfo, global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderContentDto.System.Int32Object.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a room in the &quot;Rooms&quot; section.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderDto.System.Int32Object"/></returns>
        /// <param name="body">Request parameters for creating a room</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderDto.System.Int32Object?> PostAsync(global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderDto.System.Int32Object> PostAsync(global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderDto.System.Int32Object>(requestInfo, global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Files.Core.ApiModels.ResponseDto.FolderDto.System.Int32Object.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the contents of the &quot;Rooms&quot; section by the parameters specified in the request.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder.RoomsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder.RoomsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, text/plain;q=0.9");
            return requestInfo;
        }
        /// <summary>
        /// Creates a room in the &quot;Rooms&quot; section.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Request parameters for creating a room</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::KiotaPosts.Client.Models.ASC.Files.Core.ApiModels.RequestDto.CreateRoomRequestDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, text/plain;q=0.9");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns the contents of the &quot;Rooms&quot; section by the parameters specified in the request.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RoomsRequestBuilderGetQueryParameters 
        {
            /// <summary>Specifies whether to exclude a subject or not</summary>
            [QueryParameter("excludeSubject")]
            public bool? ExcludeSubject { get; set; }
            /// <summary>Filter by provider name (None, Box, DropBox, GoogleDrive, kDrive, OneDrive, WebDav)</summary>
            [QueryParameter("provider")]
            public int? Provider { get; set; }
            /// <summary>Filter by quota (Default - 1, Custom - 2)</summary>
            [QueryParameter("quotaFilter")]
            public int? QuotaFilter { get; set; }
            /// <summary>Room search area (Active, Archive, Any)</summary>
            [QueryParameter("searchArea")]
            public int? SearchArea { get; set; }
            /// <summary>Specifies whether to search within the section contents or not</summary>
            [QueryParameter("searchInContent")]
            public bool? SearchInContent { get; set; }
            /// <summary>Filter by storage (Internal - 1, ThirdParty - 2)</summary>
            [QueryParameter("storageFilter")]
            public int? StorageFilter { get; set; }
            /// <summary>Filter by subject (Owner - 1, Member - 1)</summary>
            [QueryParameter("subjectFilter")]
            public int? SubjectFilter { get; set; }
            /// <summary>Filter by user ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("subjectId")]
            public string? SubjectId { get; set; }
#nullable restore
#else
            [QueryParameter("subjectId")]
            public string SubjectId { get; set; }
#endif
            /// <summary>Tags in the serialized format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tags")]
            public string? Tags { get; set; }
#nullable restore
#else
            [QueryParameter("tags")]
            public string Tags { get; set; }
#endif
            /// <summary>Filter by room type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public int?[]? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public int?[] Type { get; set; }
#endif
            /// <summary>Specifies whether to search by tags or not</summary>
            [QueryParameter("withoutTags")]
            public bool? WithoutTags { get; set; }
            /// <summary>Specifies whether to return sections with or without subfolders</summary>
            [QueryParameter("withSubfolders")]
            public bool? WithSubfolders { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RoomsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.Files.Rooms.RoomsRequestBuilder.RoomsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RoomsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
