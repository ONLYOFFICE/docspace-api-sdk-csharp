// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.SuccessApiResponseOfASC.Web.Api.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaPosts.Client.Api.TwoZero.People.Simple.Filter
{
    /// <summary>
    /// Builds and executes requests for operations under \api\2.0\people\simple\filter
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FilterRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/2.0/people/simple/filter{?accountLoginType*,activationStatus*,area*,employeeStatus*,employeeType*,employeeTypes,excludeGroup*,groupId*,invitedByMe*,inviterId*,isAdministrator*,payments*,quotaFilter*,withoutGroup*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/2.0/people/simple/filter{?accountLoginType*,activationStatus*,area*,employeeStatus*,employeeType*,employeeTypes,excludeGroup*,groupId*,invitedByMe*,inviterId*,isAdministrator*,payments*,quotaFilter*,withoutGroup*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of users matching the parameters specified in the request.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Web.Api.Models.EmployeeDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Web.Api.Models.EmployeeDto?> GetAsync(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Web.Api.Models.EmployeeDto> GetAsync(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Web.Api.Models.EmployeeDto>(requestInfo, global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.Web.Api.Models.EmployeeDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of users matching the parameters specified in the request.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, text/plain;q=0.9");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder WithUrl(string rawUrl)
        {
            return new global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of users matching the parameters specified in the request.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FilterRequestBuilderGetQueryParameters 
        {
            /// <summary>Account login type</summary>
            [QueryParameter("accountLoginType")]
            public int? AccountLoginType { get; set; }
            /// <summary>Activation status</summary>
            [QueryParameter("activationStatus")]
            public int? ActivationStatus { get; set; }
            /// <summary>Area</summary>
            [QueryParameter("area")]
            public int? Area { get; set; }
            /// <summary>User status</summary>
            [QueryParameter("employeeStatus")]
            public int? EmployeeStatus { get; set; }
            /// <summary>User type</summary>
            [QueryParameter("employeeType")]
            public int? EmployeeType { get; set; }
            /// <summary>List of user types</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("employeeTypes")]
            public string[]? EmployeeTypes { get; set; }
#nullable restore
#else
            [QueryParameter("employeeTypes")]
            public string[] EmployeeTypes { get; set; }
#endif
            /// <summary>Specifies whether or not the user should be a member of the group with the specified ID</summary>
            [QueryParameter("excludeGroup")]
            public bool? ExcludeGroup { get; set; }
            /// <summary>Group ID</summary>
            [QueryParameter("groupId")]
            public Guid? GroupId { get; set; }
            /// <summary>Invited by me</summary>
            [QueryParameter("invitedByMe")]
            public bool? InvitedByMe { get; set; }
            /// <summary>Inviter Id</summary>
            [QueryParameter("inviterId")]
            public Guid? InviterId { get; set; }
            /// <summary>Specifies if the user is an administrator or not</summary>
            [QueryParameter("isAdministrator")]
            public bool? IsAdministrator { get; set; }
            /// <summary>User payment status</summary>
            [QueryParameter("payments")]
            public int? Payments { get; set; }
            /// <summary>Filter by quota (Default - 1, Custom - 2)</summary>
            [QueryParameter("quotaFilter")]
            public int? QuotaFilter { get; set; }
            /// <summary>Specifies whether the user should be a member of a group or not</summary>
            [QueryParameter("withoutGroup")]
            public bool? WithoutGroup { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FilterRequestBuilderGetRequestConfiguration : RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Simple.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
