// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.Client.Models.SuccessApiResponseOfASC.People.ApiModels.ResponseDto;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers
{
    /// <summary>
    /// Builds and executes requests for operations under \api\2.0\people\thirdparty\providers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ProvidersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProvidersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/2.0/people/thirdparty/providers{?clientCallback*,fromOnly*,inviteView*,settingsView*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProvidersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/2.0/people/thirdparty/providers{?clientCallback*,fromOnly*,inviteView*,settingsView*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of the available third-party accounts.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.People.ApiModels.ResponseDto.AccountInfoDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.People.ApiModels.ResponseDto.AccountInfoDto?> GetAsync(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder.ProvidersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.People.ApiModels.ResponseDto.AccountInfoDto> GetAsync(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder.ProvidersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.People.ApiModels.ResponseDto.AccountInfoDto>(requestInfo, global::KiotaPosts.Client.Models.SuccessApiResponseOfASC.People.ApiModels.ResponseDto.AccountInfoDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of the available third-party accounts.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder.ProvidersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder.ProvidersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, text/plain;q=0.9");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of the available third-party accounts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProvidersRequestBuilderGetQueryParameters 
        {
            /// <summary>Method that is called after authorization</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("clientCallback")]
            public string? ClientCallback { get; set; }
#nullable restore
#else
            [QueryParameter("clientCallback")]
            public string ClientCallback { get; set; }
#endif
            /// <summary>Provider name if the response only from this provider is needed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fromOnly")]
            public string? FromOnly { get; set; }
#nullable restore
#else
            [QueryParameter("fromOnly")]
            public string FromOnly { get; set; }
#endif
            /// <summary>Specifies whether to return providers that are available for invitation links, i.e. the user can login or register through these providers</summary>
            [QueryParameter("inviteView")]
            public bool? InviteView { get; set; }
            /// <summary>Specifies whether to return URLs in the format that is used on the Settings page</summary>
            [QueryParameter("settingsView")]
            public bool? SettingsView { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProvidersRequestBuilderGetRequestConfiguration : RequestConfiguration<global::KiotaPosts.Client.Api.TwoZero.People.Thirdparty.Providers.ProvidersRequestBuilder.ProvidersRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
